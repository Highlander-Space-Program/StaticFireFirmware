
StaticFireFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000550c  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005694  08005694  00006694  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056c0  080056c0  00007048  2**0
                  CONTENTS
  4 .ARM          00000008  080056c0  080056c0  000066c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056c8  080056c8  00007048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056c8  080056c8  000066c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056cc  080056cc  000066cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  080056d0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007048  2**0
                  CONTENTS
 10 .bss          00000180  20000048  20000048  00007048  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  00007048  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000db7e  00000000  00000000  00007078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000208f  00000000  00000000  00014bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cb0  00000000  00000000  00016c88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000009f3  00000000  00000000  00017938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ebe8  00000000  00000000  0001832b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fc51  00000000  00000000  00036f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bca1e  00000000  00000000  00046b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00103582  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000361c  00000000  00000000  001035c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00106be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800567c 	.word	0x0800567c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	0800567c 	.word	0x0800567c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	@ 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_uldivmod>:
 80009a4:	b953      	cbnz	r3, 80009bc <__aeabi_uldivmod+0x18>
 80009a6:	b94a      	cbnz	r2, 80009bc <__aeabi_uldivmod+0x18>
 80009a8:	2900      	cmp	r1, #0
 80009aa:	bf08      	it	eq
 80009ac:	2800      	cmpeq	r0, #0
 80009ae:	bf1c      	itt	ne
 80009b0:	f04f 31ff 	movne.w	r1, #4294967295
 80009b4:	f04f 30ff 	movne.w	r0, #4294967295
 80009b8:	f000 b96a 	b.w	8000c90 <__aeabi_idiv0>
 80009bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009c4:	f000 f806 	bl	80009d4 <__udivmoddi4>
 80009c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009d0:	b004      	add	sp, #16
 80009d2:	4770      	bx	lr

080009d4 <__udivmoddi4>:
 80009d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d8:	9d08      	ldr	r5, [sp, #32]
 80009da:	460c      	mov	r4, r1
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d14e      	bne.n	8000a7e <__udivmoddi4+0xaa>
 80009e0:	4694      	mov	ip, r2
 80009e2:	458c      	cmp	ip, r1
 80009e4:	4686      	mov	lr, r0
 80009e6:	fab2 f282 	clz	r2, r2
 80009ea:	d962      	bls.n	8000ab2 <__udivmoddi4+0xde>
 80009ec:	b14a      	cbz	r2, 8000a02 <__udivmoddi4+0x2e>
 80009ee:	f1c2 0320 	rsb	r3, r2, #32
 80009f2:	4091      	lsls	r1, r2
 80009f4:	fa20 f303 	lsr.w	r3, r0, r3
 80009f8:	fa0c fc02 	lsl.w	ip, ip, r2
 80009fc:	4319      	orrs	r1, r3
 80009fe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a06:	fa1f f68c 	uxth.w	r6, ip
 8000a0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a12:	fb07 1114 	mls	r1, r7, r4, r1
 8000a16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a1a:	fb04 f106 	mul.w	r1, r4, r6
 8000a1e:	4299      	cmp	r1, r3
 8000a20:	d90a      	bls.n	8000a38 <__udivmoddi4+0x64>
 8000a22:	eb1c 0303 	adds.w	r3, ip, r3
 8000a26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000a2a:	f080 8112 	bcs.w	8000c52 <__udivmoddi4+0x27e>
 8000a2e:	4299      	cmp	r1, r3
 8000a30:	f240 810f 	bls.w	8000c52 <__udivmoddi4+0x27e>
 8000a34:	3c02      	subs	r4, #2
 8000a36:	4463      	add	r3, ip
 8000a38:	1a59      	subs	r1, r3, r1
 8000a3a:	fa1f f38e 	uxth.w	r3, lr
 8000a3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a42:	fb07 1110 	mls	r1, r7, r0, r1
 8000a46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a4a:	fb00 f606 	mul.w	r6, r0, r6
 8000a4e:	429e      	cmp	r6, r3
 8000a50:	d90a      	bls.n	8000a68 <__udivmoddi4+0x94>
 8000a52:	eb1c 0303 	adds.w	r3, ip, r3
 8000a56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000a5a:	f080 80fc 	bcs.w	8000c56 <__udivmoddi4+0x282>
 8000a5e:	429e      	cmp	r6, r3
 8000a60:	f240 80f9 	bls.w	8000c56 <__udivmoddi4+0x282>
 8000a64:	4463      	add	r3, ip
 8000a66:	3802      	subs	r0, #2
 8000a68:	1b9b      	subs	r3, r3, r6
 8000a6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a6e:	2100      	movs	r1, #0
 8000a70:	b11d      	cbz	r5, 8000a7a <__udivmoddi4+0xa6>
 8000a72:	40d3      	lsrs	r3, r2
 8000a74:	2200      	movs	r2, #0
 8000a76:	e9c5 3200 	strd	r3, r2, [r5]
 8000a7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7e:	428b      	cmp	r3, r1
 8000a80:	d905      	bls.n	8000a8e <__udivmoddi4+0xba>
 8000a82:	b10d      	cbz	r5, 8000a88 <__udivmoddi4+0xb4>
 8000a84:	e9c5 0100 	strd	r0, r1, [r5]
 8000a88:	2100      	movs	r1, #0
 8000a8a:	4608      	mov	r0, r1
 8000a8c:	e7f5      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000a8e:	fab3 f183 	clz	r1, r3
 8000a92:	2900      	cmp	r1, #0
 8000a94:	d146      	bne.n	8000b24 <__udivmoddi4+0x150>
 8000a96:	42a3      	cmp	r3, r4
 8000a98:	d302      	bcc.n	8000aa0 <__udivmoddi4+0xcc>
 8000a9a:	4290      	cmp	r0, r2
 8000a9c:	f0c0 80f0 	bcc.w	8000c80 <__udivmoddi4+0x2ac>
 8000aa0:	1a86      	subs	r6, r0, r2
 8000aa2:	eb64 0303 	sbc.w	r3, r4, r3
 8000aa6:	2001      	movs	r0, #1
 8000aa8:	2d00      	cmp	r5, #0
 8000aaa:	d0e6      	beq.n	8000a7a <__udivmoddi4+0xa6>
 8000aac:	e9c5 6300 	strd	r6, r3, [r5]
 8000ab0:	e7e3      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000ab2:	2a00      	cmp	r2, #0
 8000ab4:	f040 8090 	bne.w	8000bd8 <__udivmoddi4+0x204>
 8000ab8:	eba1 040c 	sub.w	r4, r1, ip
 8000abc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ac0:	fa1f f78c 	uxth.w	r7, ip
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000aca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ace:	fb08 4416 	mls	r4, r8, r6, r4
 8000ad2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ad6:	fb07 f006 	mul.w	r0, r7, r6
 8000ada:	4298      	cmp	r0, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x11c>
 8000ade:	eb1c 0303 	adds.w	r3, ip, r3
 8000ae2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000ae6:	d202      	bcs.n	8000aee <__udivmoddi4+0x11a>
 8000ae8:	4298      	cmp	r0, r3
 8000aea:	f200 80cd 	bhi.w	8000c88 <__udivmoddi4+0x2b4>
 8000aee:	4626      	mov	r6, r4
 8000af0:	1a1c      	subs	r4, r3, r0
 8000af2:	fa1f f38e 	uxth.w	r3, lr
 8000af6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000afa:	fb08 4410 	mls	r4, r8, r0, r4
 8000afe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b02:	fb00 f707 	mul.w	r7, r0, r7
 8000b06:	429f      	cmp	r7, r3
 8000b08:	d908      	bls.n	8000b1c <__udivmoddi4+0x148>
 8000b0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000b12:	d202      	bcs.n	8000b1a <__udivmoddi4+0x146>
 8000b14:	429f      	cmp	r7, r3
 8000b16:	f200 80b0 	bhi.w	8000c7a <__udivmoddi4+0x2a6>
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	1bdb      	subs	r3, r3, r7
 8000b1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b22:	e7a5      	b.n	8000a70 <__udivmoddi4+0x9c>
 8000b24:	f1c1 0620 	rsb	r6, r1, #32
 8000b28:	408b      	lsls	r3, r1
 8000b2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000b2e:	431f      	orrs	r7, r3
 8000b30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b34:	fa04 f301 	lsl.w	r3, r4, r1
 8000b38:	ea43 030c 	orr.w	r3, r3, ip
 8000b3c:	40f4      	lsrs	r4, r6
 8000b3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000b42:	0c38      	lsrs	r0, r7, #16
 8000b44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b48:	fbb4 fef0 	udiv	lr, r4, r0
 8000b4c:	fa1f fc87 	uxth.w	ip, r7
 8000b50:	fb00 441e 	mls	r4, r0, lr, r4
 8000b54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b58:	fb0e f90c 	mul.w	r9, lr, ip
 8000b5c:	45a1      	cmp	r9, r4
 8000b5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000b62:	d90a      	bls.n	8000b7a <__udivmoddi4+0x1a6>
 8000b64:	193c      	adds	r4, r7, r4
 8000b66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000b6a:	f080 8084 	bcs.w	8000c76 <__udivmoddi4+0x2a2>
 8000b6e:	45a1      	cmp	r9, r4
 8000b70:	f240 8081 	bls.w	8000c76 <__udivmoddi4+0x2a2>
 8000b74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b78:	443c      	add	r4, r7
 8000b7a:	eba4 0409 	sub.w	r4, r4, r9
 8000b7e:	fa1f f983 	uxth.w	r9, r3
 8000b82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b86:	fb00 4413 	mls	r4, r0, r3, r4
 8000b8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000b92:	45a4      	cmp	ip, r4
 8000b94:	d907      	bls.n	8000ba6 <__udivmoddi4+0x1d2>
 8000b96:	193c      	adds	r4, r7, r4
 8000b98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000b9c:	d267      	bcs.n	8000c6e <__udivmoddi4+0x29a>
 8000b9e:	45a4      	cmp	ip, r4
 8000ba0:	d965      	bls.n	8000c6e <__udivmoddi4+0x29a>
 8000ba2:	3b02      	subs	r3, #2
 8000ba4:	443c      	add	r4, r7
 8000ba6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000baa:	fba0 9302 	umull	r9, r3, r0, r2
 8000bae:	eba4 040c 	sub.w	r4, r4, ip
 8000bb2:	429c      	cmp	r4, r3
 8000bb4:	46ce      	mov	lr, r9
 8000bb6:	469c      	mov	ip, r3
 8000bb8:	d351      	bcc.n	8000c5e <__udivmoddi4+0x28a>
 8000bba:	d04e      	beq.n	8000c5a <__udivmoddi4+0x286>
 8000bbc:	b155      	cbz	r5, 8000bd4 <__udivmoddi4+0x200>
 8000bbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000bc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000bc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000bca:	40cb      	lsrs	r3, r1
 8000bcc:	431e      	orrs	r6, r3
 8000bce:	40cc      	lsrs	r4, r1
 8000bd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	e750      	b.n	8000a7a <__udivmoddi4+0xa6>
 8000bd8:	f1c2 0320 	rsb	r3, r2, #32
 8000bdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000be0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000be4:	fa24 f303 	lsr.w	r3, r4, r3
 8000be8:	4094      	lsls	r4, r2
 8000bea:	430c      	orrs	r4, r1
 8000bec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bf4:	fa1f f78c 	uxth.w	r7, ip
 8000bf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000c00:	0c23      	lsrs	r3, r4, #16
 8000c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c06:	fb00 f107 	mul.w	r1, r0, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d908      	bls.n	8000c20 <__udivmoddi4+0x24c>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000c16:	d22c      	bcs.n	8000c72 <__udivmoddi4+0x29e>
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d92a      	bls.n	8000c72 <__udivmoddi4+0x29e>
 8000c1c:	3802      	subs	r0, #2
 8000c1e:	4463      	add	r3, ip
 8000c20:	1a5b      	subs	r3, r3, r1
 8000c22:	b2a4      	uxth	r4, r4
 8000c24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c28:	fb08 3311 	mls	r3, r8, r1, r3
 8000c2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c30:	fb01 f307 	mul.w	r3, r1, r7
 8000c34:	42a3      	cmp	r3, r4
 8000c36:	d908      	bls.n	8000c4a <__udivmoddi4+0x276>
 8000c38:	eb1c 0404 	adds.w	r4, ip, r4
 8000c3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000c40:	d213      	bcs.n	8000c6a <__udivmoddi4+0x296>
 8000c42:	42a3      	cmp	r3, r4
 8000c44:	d911      	bls.n	8000c6a <__udivmoddi4+0x296>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4464      	add	r4, ip
 8000c4a:	1ae4      	subs	r4, r4, r3
 8000c4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c50:	e739      	b.n	8000ac6 <__udivmoddi4+0xf2>
 8000c52:	4604      	mov	r4, r0
 8000c54:	e6f0      	b.n	8000a38 <__udivmoddi4+0x64>
 8000c56:	4608      	mov	r0, r1
 8000c58:	e706      	b.n	8000a68 <__udivmoddi4+0x94>
 8000c5a:	45c8      	cmp	r8, r9
 8000c5c:	d2ae      	bcs.n	8000bbc <__udivmoddi4+0x1e8>
 8000c5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c66:	3801      	subs	r0, #1
 8000c68:	e7a8      	b.n	8000bbc <__udivmoddi4+0x1e8>
 8000c6a:	4631      	mov	r1, r6
 8000c6c:	e7ed      	b.n	8000c4a <__udivmoddi4+0x276>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	e799      	b.n	8000ba6 <__udivmoddi4+0x1d2>
 8000c72:	4630      	mov	r0, r6
 8000c74:	e7d4      	b.n	8000c20 <__udivmoddi4+0x24c>
 8000c76:	46d6      	mov	lr, sl
 8000c78:	e77f      	b.n	8000b7a <__udivmoddi4+0x1a6>
 8000c7a:	4463      	add	r3, ip
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	e74d      	b.n	8000b1c <__udivmoddi4+0x148>
 8000c80:	4606      	mov	r6, r0
 8000c82:	4623      	mov	r3, r4
 8000c84:	4608      	mov	r0, r1
 8000c86:	e70f      	b.n	8000aa8 <__udivmoddi4+0xd4>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	e730      	b.n	8000af0 <__udivmoddi4+0x11c>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_idiv0>:
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b088      	sub	sp, #32
 8000c98:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c9a:	f107 030c 	add.w	r3, r7, #12
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	601a      	str	r2, [r3, #0]
 8000ca2:	605a      	str	r2, [r3, #4]
 8000ca4:	609a      	str	r2, [r3, #8]
 8000ca6:	60da      	str	r2, [r3, #12]
 8000ca8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	4b3a      	ldr	r3, [pc, #232]	@ (8000d98 <MX_GPIO_Init+0x104>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	4a39      	ldr	r2, [pc, #228]	@ (8000d98 <MX_GPIO_Init+0x104>)
 8000cb4:	f043 0304 	orr.w	r3, r3, #4
 8000cb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cba:	4b37      	ldr	r3, [pc, #220]	@ (8000d98 <MX_GPIO_Init+0x104>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cbe:	f003 0304 	and.w	r3, r3, #4
 8000cc2:	60bb      	str	r3, [r7, #8]
 8000cc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b33      	ldr	r3, [pc, #204]	@ (8000d98 <MX_GPIO_Init+0x104>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	4a32      	ldr	r2, [pc, #200]	@ (8000d98 <MX_GPIO_Init+0x104>)
 8000cd0:	f043 0301 	orr.w	r3, r3, #1
 8000cd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd6:	4b30      	ldr	r3, [pc, #192]	@ (8000d98 <MX_GPIO_Init+0x104>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	4b2c      	ldr	r3, [pc, #176]	@ (8000d98 <MX_GPIO_Init+0x104>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	4a2b      	ldr	r2, [pc, #172]	@ (8000d98 <MX_GPIO_Init+0x104>)
 8000cec:	f043 0302 	orr.w	r3, r3, #2
 8000cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf2:	4b29      	ldr	r3, [pc, #164]	@ (8000d98 <MX_GPIO_Init+0x104>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NO2_EN_Pin|NO4_EN_Pin|IGNITER_Pin|NO6_EN_Pin
 8000cfe:	2200      	movs	r2, #0
 8000d00:	219e      	movs	r1, #158	@ 0x9e
 8000d02:	4826      	ldr	r0, [pc, #152]	@ (8000d9c <MX_GPIO_Init+0x108>)
 8000d04:	f001 ffda 	bl	8002cbc <HAL_GPIO_WritePin>
                          |NO3_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SERVO_EN_GPIO_Port, SERVO_EN_Pin, GPIO_PIN_RESET);
 8000d08:	2200      	movs	r2, #0
 8000d0a:	2140      	movs	r1, #64	@ 0x40
 8000d0c:	4824      	ldr	r0, [pc, #144]	@ (8000da0 <MX_GPIO_Init+0x10c>)
 8000d0e:	f001 ffd5 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EO1_EN_GPIO_Port, EO1_EN_Pin, GPIO_PIN_RESET);
 8000d12:	2200      	movs	r2, #0
 8000d14:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000d18:	4822      	ldr	r0, [pc, #136]	@ (8000da4 <MX_GPIO_Init+0x110>)
 8000d1a:	f001 ffcf 	bl	8002cbc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = NO2_EN_Pin|NO4_EN_Pin|NO6_EN_Pin|NO3_EN_Pin;
 8000d1e:	2396      	movs	r3, #150	@ 0x96
 8000d20:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d22:	2301      	movs	r3, #1
 8000d24:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d26:	2302      	movs	r3, #2
 8000d28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2e:	f107 030c 	add.w	r3, r7, #12
 8000d32:	4619      	mov	r1, r3
 8000d34:	4819      	ldr	r0, [pc, #100]	@ (8000d9c <MX_GPIO_Init+0x108>)
 8000d36:	f001 fe25 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IGNITER_Pin;
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(IGNITER_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 030c 	add.w	r3, r7, #12
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4812      	ldr	r0, [pc, #72]	@ (8000d9c <MX_GPIO_Init+0x108>)
 8000d52:	f001 fe17 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SERVO_EN_Pin;
 8000d56:	2340      	movs	r3, #64	@ 0x40
 8000d58:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d5e:	2302      	movs	r3, #2
 8000d60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d62:	2300      	movs	r3, #0
 8000d64:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SERVO_EN_GPIO_Port, &GPIO_InitStruct);
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	480c      	ldr	r0, [pc, #48]	@ (8000da0 <MX_GPIO_Init+0x10c>)
 8000d6e:	f001 fe09 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EO1_EN_Pin;
 8000d72:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d78:	2301      	movs	r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(EO1_EN_GPIO_Port, &GPIO_InitStruct);
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4806      	ldr	r0, [pc, #24]	@ (8000da4 <MX_GPIO_Init+0x110>)
 8000d8c:	f001 fdfa 	bl	8002984 <HAL_GPIO_Init>

}
 8000d90:	bf00      	nop
 8000d92:	3720      	adds	r7, #32
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40023800 	.word	0x40023800
 8000d9c:	40020800 	.word	0x40020800
 8000da0:	40020000 	.word	0x40020000
 8000da4:	40020400 	.word	0x40020400

08000da8 <Deg_To_CCR>:
#ifndef INC_DEG_TO_CCR_H_
#define INC_DEG_TO_CCR_H_
#include "config.h"

//returns ccr needed to move servo to the degree passed in in deg variable
uint32_t Deg_To_CCR(uint8_t deg, const struct Servo *servo, const int max_deg) {
 8000da8:	b5b0      	push	{r4, r5, r7, lr}
 8000daa:	b088      	sub	sp, #32
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
 8000db4:	73fb      	strb	r3, [r7, #15]
  uint32_t arr = servo->timer->Init.Period;
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	68db      	ldr	r3, [r3, #12]
 8000dbc:	61fb      	str	r3, [r7, #28]
  double pulse_width = ((double)HSP_SERVO_MAX_PULSE_WIDTH-HSP_SERVO_MIN_PULSE_WIDTH)/max_deg * deg + HSP_SERVO_MIN_PULSE_WIDTH;
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff fb54 	bl	800046c <__aeabi_i2d>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	460b      	mov	r3, r1
 8000dc8:	f04f 0000 	mov.w	r0, #0
 8000dcc:	491e      	ldr	r1, [pc, #120]	@ (8000e48 <Deg_To_CCR+0xa0>)
 8000dce:	f7ff fce1 	bl	8000794 <__aeabi_ddiv>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	4614      	mov	r4, r2
 8000dd8:	461d      	mov	r5, r3
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	4618      	mov	r0, r3
 8000dde:	f7ff fb45 	bl	800046c <__aeabi_i2d>
 8000de2:	4602      	mov	r2, r0
 8000de4:	460b      	mov	r3, r1
 8000de6:	4620      	mov	r0, r4
 8000de8:	4629      	mov	r1, r5
 8000dea:	f7ff fba9 	bl	8000540 <__aeabi_dmul>
 8000dee:	4602      	mov	r2, r0
 8000df0:	460b      	mov	r3, r1
 8000df2:	4610      	mov	r0, r2
 8000df4:	4619      	mov	r1, r3
 8000df6:	f04f 0200 	mov.w	r2, #0
 8000dfa:	4b14      	ldr	r3, [pc, #80]	@ (8000e4c <Deg_To_CCR+0xa4>)
 8000dfc:	f7ff f9ea 	bl	80001d4 <__adddf3>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	e9c7 2304 	strd	r2, r3, [r7, #16]
  return pulse_width*arr/HSP_SERVO_PWM_PERIOD;
 8000e08:	69f8      	ldr	r0, [r7, #28]
 8000e0a:	f7ff fb1f 	bl	800044c <__aeabi_ui2d>
 8000e0e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e12:	f7ff fb95 	bl	8000540 <__aeabi_dmul>
 8000e16:	4602      	mov	r2, r0
 8000e18:	460b      	mov	r3, r1
 8000e1a:	4610      	mov	r0, r2
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	a308      	add	r3, pc, #32	@ (adr r3, 8000e40 <Deg_To_CCR+0x98>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	f7ff fcb6 	bl	8000794 <__aeabi_ddiv>
 8000e28:	4602      	mov	r2, r0
 8000e2a:	460b      	mov	r3, r1
 8000e2c:	4610      	mov	r0, r2
 8000e2e:	4619      	mov	r1, r3
 8000e30:	f7ff fd98 	bl	8000964 <__aeabi_d2uiz>
 8000e34:	4603      	mov	r3, r0
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	3720      	adds	r7, #32
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	00000000 	.word	0x00000000
 8000e44:	40d38800 	.word	0x40d38800
 8000e48:	409f4000 	.word	0x409f4000
 8000e4c:	407f4000 	.word	0x407f4000

08000e50 <Create_Ack>:
#ifndef INC_CREATE_ACK_H_
#define INC_CREATE_ACK_H_

#include "config.h"

uint8_t Create_Ack() {
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
	if (no2State == SERVO_OPENED_ON || no2State == SERVO_OPENED_OFF) {
 8000e54:	4b3a      	ldr	r3, [pc, #232]	@ (8000f40 <Create_Ack+0xf0>)
 8000e56:	781b      	ldrb	r3, [r3, #0]
 8000e58:	2b03      	cmp	r3, #3
 8000e5a:	d003      	beq.n	8000e64 <Create_Ack+0x14>
 8000e5c:	4b38      	ldr	r3, [pc, #224]	@ (8000f40 <Create_Ack+0xf0>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b04      	cmp	r3, #4
 8000e62:	d105      	bne.n	8000e70 <Create_Ack+0x20>
		++ack;
 8000e64:	4b37      	ldr	r3, [pc, #220]	@ (8000f44 <Create_Ack+0xf4>)
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	4b35      	ldr	r3, [pc, #212]	@ (8000f44 <Create_Ack+0xf4>)
 8000e6e:	701a      	strb	r2, [r3, #0]
	}
	ack = ack << 1;
 8000e70:	4b34      	ldr	r3, [pc, #208]	@ (8000f44 <Create_Ack+0xf4>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	005b      	lsls	r3, r3, #1
 8000e76:	b2da      	uxtb	r2, r3
 8000e78:	4b32      	ldr	r3, [pc, #200]	@ (8000f44 <Create_Ack+0xf4>)
 8000e7a:	701a      	strb	r2, [r3, #0]
	if (no3State == SERVO_OPENED_ON || no3State == SERVO_OPENED_OFF) {
 8000e7c:	4b32      	ldr	r3, [pc, #200]	@ (8000f48 <Create_Ack+0xf8>)
 8000e7e:	781b      	ldrb	r3, [r3, #0]
 8000e80:	2b03      	cmp	r3, #3
 8000e82:	d003      	beq.n	8000e8c <Create_Ack+0x3c>
 8000e84:	4b30      	ldr	r3, [pc, #192]	@ (8000f48 <Create_Ack+0xf8>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b04      	cmp	r3, #4
 8000e8a:	d105      	bne.n	8000e98 <Create_Ack+0x48>
		++ack;
 8000e8c:	4b2d      	ldr	r3, [pc, #180]	@ (8000f44 <Create_Ack+0xf4>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	b2da      	uxtb	r2, r3
 8000e94:	4b2b      	ldr	r3, [pc, #172]	@ (8000f44 <Create_Ack+0xf4>)
 8000e96:	701a      	strb	r2, [r3, #0]
	}
	ack = ack << 1;
 8000e98:	4b2a      	ldr	r3, [pc, #168]	@ (8000f44 <Create_Ack+0xf4>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	b2da      	uxtb	r2, r3
 8000ea0:	4b28      	ldr	r3, [pc, #160]	@ (8000f44 <Create_Ack+0xf4>)
 8000ea2:	701a      	strb	r2, [r3, #0]
	if (no4State == SERVO_OPENED_ON || no4State == SERVO_OPENED_OFF) {
 8000ea4:	4b29      	ldr	r3, [pc, #164]	@ (8000f4c <Create_Ack+0xfc>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b03      	cmp	r3, #3
 8000eaa:	d003      	beq.n	8000eb4 <Create_Ack+0x64>
 8000eac:	4b27      	ldr	r3, [pc, #156]	@ (8000f4c <Create_Ack+0xfc>)
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b04      	cmp	r3, #4
 8000eb2:	d105      	bne.n	8000ec0 <Create_Ack+0x70>
		++ack;
 8000eb4:	4b23      	ldr	r3, [pc, #140]	@ (8000f44 <Create_Ack+0xf4>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	b2da      	uxtb	r2, r3
 8000ebc:	4b21      	ldr	r3, [pc, #132]	@ (8000f44 <Create_Ack+0xf4>)
 8000ebe:	701a      	strb	r2, [r3, #0]
	}
	ack = ack << 1;
 8000ec0:	4b20      	ldr	r3, [pc, #128]	@ (8000f44 <Create_Ack+0xf4>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	b2da      	uxtb	r2, r3
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8000f44 <Create_Ack+0xf4>)
 8000eca:	701a      	strb	r2, [r3, #0]
	if (no6State == SERVO_OPENED_ON || no6State == SERVO_OPENED_OFF) {
 8000ecc:	4b20      	ldr	r3, [pc, #128]	@ (8000f50 <Create_Ack+0x100>)
 8000ece:	781b      	ldrb	r3, [r3, #0]
 8000ed0:	2b03      	cmp	r3, #3
 8000ed2:	d003      	beq.n	8000edc <Create_Ack+0x8c>
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <Create_Ack+0x100>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b04      	cmp	r3, #4
 8000eda:	d105      	bne.n	8000ee8 <Create_Ack+0x98>
		++ack;
 8000edc:	4b19      	ldr	r3, [pc, #100]	@ (8000f44 <Create_Ack+0xf4>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	b2da      	uxtb	r2, r3
 8000ee4:	4b17      	ldr	r3, [pc, #92]	@ (8000f44 <Create_Ack+0xf4>)
 8000ee6:	701a      	strb	r2, [r3, #0]
	}
	ack = ack << 1;
 8000ee8:	4b16      	ldr	r3, [pc, #88]	@ (8000f44 <Create_Ack+0xf4>)
 8000eea:	781b      	ldrb	r3, [r3, #0]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	b2da      	uxtb	r2, r3
 8000ef0:	4b14      	ldr	r3, [pc, #80]	@ (8000f44 <Create_Ack+0xf4>)
 8000ef2:	701a      	strb	r2, [r3, #0]
	if (eo1State == SERVO_OPENED_ON || eo1State == SERVO_OPENED_OFF) {
 8000ef4:	4b17      	ldr	r3, [pc, #92]	@ (8000f54 <Create_Ack+0x104>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d003      	beq.n	8000f04 <Create_Ack+0xb4>
 8000efc:	4b15      	ldr	r3, [pc, #84]	@ (8000f54 <Create_Ack+0x104>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	d105      	bne.n	8000f10 <Create_Ack+0xc0>
		++ack;
 8000f04:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <Create_Ack+0xf4>)
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	@ (8000f44 <Create_Ack+0xf4>)
 8000f0e:	701a      	strb	r2, [r3, #0]
	}
	ack = ack << 1;
 8000f10:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <Create_Ack+0xf4>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	005b      	lsls	r3, r3, #1
 8000f16:	b2da      	uxtb	r2, r3
 8000f18:	4b0a      	ldr	r3, [pc, #40]	@ (8000f44 <Create_Ack+0xf4>)
 8000f1a:	701a      	strb	r2, [r3, #0]
	if (igniterState == IGNITER_ACTIVATED) {
 8000f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f58 <Create_Ack+0x108>)
 8000f1e:	781b      	ldrb	r3, [r3, #0]
 8000f20:	2b02      	cmp	r3, #2
 8000f22:	d105      	bne.n	8000f30 <Create_Ack+0xe0>
		++ack;
 8000f24:	4b07      	ldr	r3, [pc, #28]	@ (8000f44 <Create_Ack+0xf4>)
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	b2da      	uxtb	r2, r3
 8000f2c:	4b05      	ldr	r3, [pc, #20]	@ (8000f44 <Create_Ack+0xf4>)
 8000f2e:	701a      	strb	r2, [r3, #0]
	}
	return ack;
 8000f30:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <Create_Ack+0xf4>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	20000072 	.word	0x20000072
 8000f44:	2000006c 	.word	0x2000006c
 8000f48:	20000071 	.word	0x20000071
 8000f4c:	20000070 	.word	0x20000070
 8000f50:	2000006f 	.word	0x2000006f
 8000f54:	2000006e 	.word	0x2000006e
 8000f58:	2000006d 	.word	0x2000006d

08000f5c <Tick_EO1>:
#include "config.h"
#include "deg_to_ccr.h"
#include "create_ack.h"
#include "main.h"

void Tick_EO1 (uint8_t cmd, struct Servo *servo) {
 8000f5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f60:	b090      	sub	sp, #64	@ 0x40
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	4603      	mov	r3, r0
 8000f66:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000f68:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint64_t curr_ticks = HAL_GetTick();
 8000f6c:	f001 fb36 	bl	80025dc <HAL_GetTick>
 8000f70:	4603      	mov	r3, r0
 8000f72:	2200      	movs	r2, #0
 8000f74:	4698      	mov	r8, r3
 8000f76:	4691      	mov	r9, r2
 8000f78:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	uint64_t on_ticks = curr_ticks - eo1_on_time;
 8000f7c:	4b7f      	ldr	r3, [pc, #508]	@ (800117c <Tick_EO1+0x220>)
 8000f7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f82:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8000f86:	1a14      	subs	r4, r2, r0
 8000f88:	eb63 0501 	sbc.w	r5, r3, r1
 8000f8c:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	//transitions
	switch(eo1State) {
 8000f90:	4b7b      	ldr	r3, [pc, #492]	@ (8001180 <Tick_EO1+0x224>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	f200 80ac 	bhi.w	80010f2 <Tick_EO1+0x196>
 8000f9a:	a201      	add	r2, pc, #4	@ (adr r2, 8000fa0 <Tick_EO1+0x44>)
 8000f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa0:	08000fb5 	.word	0x08000fb5
 8000fa4:	08000fbd 	.word	0x08000fbd
 8000fa8:	08001011 	.word	0x08001011
 8000fac:	080010ab 	.word	0x080010ab
 8000fb0:	08001057 	.word	0x08001057
		case SERVO_INIT:
		eo1State = SERVO_CLOSED_OFF;
 8000fb4:	4b72      	ldr	r3, [pc, #456]	@ (8001180 <Tick_EO1+0x224>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	701a      	strb	r2, [r3, #0]
		break;
 8000fba:	e09a      	b.n	80010f2 <Tick_EO1+0x196>

		case SERVO_CLOSED_OFF:
		if (cmd == CLOSE_EO1) {
 8000fbc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fc0:	2b01      	cmp	r3, #1
 8000fc2:	d10e      	bne.n	8000fe2 <Tick_EO1+0x86>
			eo1_on_time = HAL_GetTick();
 8000fc4:	f001 fb0a 	bl	80025dc <HAL_GetTick>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2200      	movs	r2, #0
 8000fcc:	623b      	str	r3, [r7, #32]
 8000fce:	627a      	str	r2, [r7, #36]	@ 0x24
 8000fd0:	4b6a      	ldr	r3, [pc, #424]	@ (800117c <Tick_EO1+0x220>)
 8000fd2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8000fd6:	e9c3 1200 	strd	r1, r2, [r3]
			eo1State = SERVO_CLOSED_ON;
 8000fda:	4b69      	ldr	r3, [pc, #420]	@ (8001180 <Tick_EO1+0x224>)
 8000fdc:	2202      	movs	r2, #2
 8000fde:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_EO1 || cmd == START_1) {
			eo1_on_time = HAL_GetTick();
			eo1State = SERVO_OPENED_ON;
		}
		break;
 8000fe0:	e080      	b.n	80010e4 <Tick_EO1+0x188>
		else if (cmd == OPEN_EO1 || cmd == START_1) {
 8000fe2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d003      	beq.n	8000ff2 <Tick_EO1+0x96>
 8000fea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fee:	2b08      	cmp	r3, #8
 8000ff0:	d178      	bne.n	80010e4 <Tick_EO1+0x188>
			eo1_on_time = HAL_GetTick();
 8000ff2:	f001 faf3 	bl	80025dc <HAL_GetTick>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	61fa      	str	r2, [r7, #28]
 8000ffe:	4b5f      	ldr	r3, [pc, #380]	@ (800117c <Tick_EO1+0x220>)
 8001000:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001004:	e9c3 1200 	strd	r1, r2, [r3]
			eo1State = SERVO_OPENED_ON;
 8001008:	4b5d      	ldr	r3, [pc, #372]	@ (8001180 <Tick_EO1+0x224>)
 800100a:	2203      	movs	r2, #3
 800100c:	701a      	strb	r2, [r3, #0]
		break;
 800100e:	e069      	b.n	80010e4 <Tick_EO1+0x188>

		case SERVO_CLOSED_ON:
		if (cmd == OPEN_EO1 || cmd == START_1) {
 8001010:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <Tick_EO1+0xc4>
 8001018:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800101c:	2b08      	cmp	r3, #8
 800101e:	d10e      	bne.n	800103e <Tick_EO1+0xe2>
			eo1_on_time = HAL_GetTick();
 8001020:	f001 fadc 	bl	80025dc <HAL_GetTick>
 8001024:	4603      	mov	r3, r0
 8001026:	2200      	movs	r2, #0
 8001028:	613b      	str	r3, [r7, #16]
 800102a:	617a      	str	r2, [r7, #20]
 800102c:	4b53      	ldr	r3, [pc, #332]	@ (800117c <Tick_EO1+0x220>)
 800102e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001032:	e9c3 1200 	strd	r1, r2, [r3]
			eo1State = SERVO_OPENED_ON;
 8001036:	4b52      	ldr	r3, [pc, #328]	@ (8001180 <Tick_EO1+0x224>)
 8001038:	2203      	movs	r2, #3
 800103a:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			eo1State = SERVO_CLOSED_OFF;
		}
		break;
 800103c:	e054      	b.n	80010e8 <Tick_EO1+0x18c>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 800103e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001042:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8001046:	428a      	cmp	r2, r1
 8001048:	f173 0300 	sbcs.w	r3, r3, #0
 800104c:	d34c      	bcc.n	80010e8 <Tick_EO1+0x18c>
			eo1State = SERVO_CLOSED_OFF;
 800104e:	4b4c      	ldr	r3, [pc, #304]	@ (8001180 <Tick_EO1+0x224>)
 8001050:	2201      	movs	r2, #1
 8001052:	701a      	strb	r2, [r3, #0]
		break;
 8001054:	e048      	b.n	80010e8 <Tick_EO1+0x18c>

		case SERVO_OPENED_OFF:
		if (cmd == CLOSE_EO1) {
 8001056:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800105a:	2b01      	cmp	r3, #1
 800105c:	d10e      	bne.n	800107c <Tick_EO1+0x120>
			eo1_on_time = HAL_GetTick();
 800105e:	f001 fabd 	bl	80025dc <HAL_GetTick>
 8001062:	4603      	mov	r3, r0
 8001064:	2200      	movs	r2, #0
 8001066:	60bb      	str	r3, [r7, #8]
 8001068:	60fa      	str	r2, [r7, #12]
 800106a:	4b44      	ldr	r3, [pc, #272]	@ (800117c <Tick_EO1+0x220>)
 800106c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8001070:	e9c3 1200 	strd	r1, r2, [r3]
			eo1State = SERVO_CLOSED_ON;
 8001074:	4b42      	ldr	r3, [pc, #264]	@ (8001180 <Tick_EO1+0x224>)
 8001076:	2202      	movs	r2, #2
 8001078:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_EO1 || cmd == START_1) {
			eo1_on_time = HAL_GetTick();
			eo1State = SERVO_OPENED_ON;
		}
		break;
 800107a:	e037      	b.n	80010ec <Tick_EO1+0x190>
		else if (cmd == OPEN_EO1 || cmd == START_1) {
 800107c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001080:	2b00      	cmp	r3, #0
 8001082:	d003      	beq.n	800108c <Tick_EO1+0x130>
 8001084:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001088:	2b08      	cmp	r3, #8
 800108a:	d12f      	bne.n	80010ec <Tick_EO1+0x190>
			eo1_on_time = HAL_GetTick();
 800108c:	f001 faa6 	bl	80025dc <HAL_GetTick>
 8001090:	4603      	mov	r3, r0
 8001092:	2200      	movs	r2, #0
 8001094:	603b      	str	r3, [r7, #0]
 8001096:	607a      	str	r2, [r7, #4]
 8001098:	4b38      	ldr	r3, [pc, #224]	@ (800117c <Tick_EO1+0x220>)
 800109a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800109e:	e9c3 1200 	strd	r1, r2, [r3]
			eo1State = SERVO_OPENED_ON;
 80010a2:	4b37      	ldr	r3, [pc, #220]	@ (8001180 <Tick_EO1+0x224>)
 80010a4:	2203      	movs	r2, #3
 80010a6:	701a      	strb	r2, [r3, #0]
		break;
 80010a8:	e020      	b.n	80010ec <Tick_EO1+0x190>

		case SERVO_OPENED_ON:
		if (cmd == CLOSE_EO1) {
 80010aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d10c      	bne.n	80010cc <Tick_EO1+0x170>
			eo1_on_time = HAL_GetTick();
 80010b2:	f001 fa93 	bl	80025dc <HAL_GetTick>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2200      	movs	r2, #0
 80010ba:	469a      	mov	sl, r3
 80010bc:	4693      	mov	fp, r2
 80010be:	4b2f      	ldr	r3, [pc, #188]	@ (800117c <Tick_EO1+0x220>)
 80010c0:	e9c3 ab00 	strd	sl, fp, [r3]
			eo1State = SERVO_CLOSED_ON;
 80010c4:	4b2e      	ldr	r3, [pc, #184]	@ (8001180 <Tick_EO1+0x224>)
 80010c6:	2202      	movs	r2, #2
 80010c8:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			eo1State = SERVO_OPENED_OFF;
		}
		break;
 80010ca:	e011      	b.n	80010f0 <Tick_EO1+0x194>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 80010cc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80010d0:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 80010d4:	428a      	cmp	r2, r1
 80010d6:	f173 0300 	sbcs.w	r3, r3, #0
 80010da:	d309      	bcc.n	80010f0 <Tick_EO1+0x194>
			eo1State = SERVO_OPENED_OFF;
 80010dc:	4b28      	ldr	r3, [pc, #160]	@ (8001180 <Tick_EO1+0x224>)
 80010de:	2204      	movs	r2, #4
 80010e0:	701a      	strb	r2, [r3, #0]
		break;
 80010e2:	e005      	b.n	80010f0 <Tick_EO1+0x194>
		break;
 80010e4:	bf00      	nop
 80010e6:	e004      	b.n	80010f2 <Tick_EO1+0x196>
		break;
 80010e8:	bf00      	nop
 80010ea:	e002      	b.n	80010f2 <Tick_EO1+0x196>
		break;
 80010ec:	bf00      	nop
 80010ee:	e000      	b.n	80010f2 <Tick_EO1+0x196>
		break;
 80010f0:	bf00      	nop
	}

	//actions
	switch(eo1State) {
 80010f2:	4b23      	ldr	r3, [pc, #140]	@ (8001180 <Tick_EO1+0x224>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	d83b      	bhi.n	8001172 <Tick_EO1+0x216>
 80010fa:	a201      	add	r2, pc, #4	@ (adr r2, 8001100 <Tick_EO1+0x1a4>)
 80010fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001100:	08001171 	.word	0x08001171
 8001104:	08001115 	.word	0x08001115
 8001108:	08001123 	.word	0x08001123
 800110c:	08001151 	.word	0x08001151
 8001110:	08001143 	.word	0x08001143
		case SERVO_INIT:
		break;

		case SERVO_CLOSED_OFF:
		HAL_GPIO_WritePin(EO1_EN_GPIO_Port, EO1_EN_Pin, GPIO_PIN_RESET);
 8001114:	2200      	movs	r2, #0
 8001116:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800111a:	481a      	ldr	r0, [pc, #104]	@ (8001184 <Tick_EO1+0x228>)
 800111c:	f001 fdce 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 8001120:	e027      	b.n	8001172 <Tick_EO1+0x216>

		case SERVO_CLOSED_ON:
		HAL_GPIO_WritePin(EO1_EN_GPIO_Port, EO1_EN_Pin, GPIO_PIN_SET);
 8001122:	2201      	movs	r2, #1
 8001124:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001128:	4816      	ldr	r0, [pc, #88]	@ (8001184 <Tick_EO1+0x228>)
 800112a:	f001 fdc7 	bl	8002cbc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(EO1_CLOSED_DEG, servo, HSP_SERVO_MAX_DEG);
 800112e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001130:	689c      	ldr	r4, [r3, #8]
 8001132:	22b4      	movs	r2, #180	@ 0xb4
 8001134:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001136:	205a      	movs	r0, #90	@ 0x5a
 8001138:	f7ff fe36 	bl	8000da8 <Deg_To_CCR>
 800113c:	4603      	mov	r3, r0
 800113e:	6023      	str	r3, [r4, #0]
		break;
 8001140:	e017      	b.n	8001172 <Tick_EO1+0x216>

		case SERVO_OPENED_OFF:
		HAL_GPIO_WritePin(EO1_EN_GPIO_Port, EO1_EN_Pin, GPIO_PIN_RESET);
 8001142:	2200      	movs	r2, #0
 8001144:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001148:	480e      	ldr	r0, [pc, #56]	@ (8001184 <Tick_EO1+0x228>)
 800114a:	f001 fdb7 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 800114e:	e010      	b.n	8001172 <Tick_EO1+0x216>

		case SERVO_OPENED_ON:
		HAL_GPIO_WritePin(EO1_EN_GPIO_Port, EO1_EN_Pin, GPIO_PIN_SET);
 8001150:	2201      	movs	r2, #1
 8001152:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001156:	480b      	ldr	r0, [pc, #44]	@ (8001184 <Tick_EO1+0x228>)
 8001158:	f001 fdb0 	bl	8002cbc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(EO1_OPENED_DEG, servo, HSP_SERVO_MAX_DEG);
 800115c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800115e:	689c      	ldr	r4, [r3, #8]
 8001160:	22b4      	movs	r2, #180	@ 0xb4
 8001162:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001164:	2000      	movs	r0, #0
 8001166:	f7ff fe1f 	bl	8000da8 <Deg_To_CCR>
 800116a:	4603      	mov	r3, r0
 800116c:	6023      	str	r3, [r4, #0]
		break;
 800116e:	e000      	b.n	8001172 <Tick_EO1+0x216>
		break;
 8001170:	bf00      	nop

	}
}
 8001172:	bf00      	nop
 8001174:	3740      	adds	r7, #64	@ 0x40
 8001176:	46bd      	mov	sp, r7
 8001178:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800117c:	20000098 	.word	0x20000098
 8001180:	2000006e 	.word	0x2000006e
 8001184:	40020400 	.word	0x40020400

08001188 <Tick_NO6>:
#include "config.h"
#include "deg_to_ccr.h"
#include "create_ack.h"
#include "main.h"

void Tick_NO6 (uint8_t cmd, struct Servo *servo) {
 8001188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800118c:	b090      	sub	sp, #64	@ 0x40
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001194:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint64_t curr_ticks = HAL_GetTick();
 8001198:	f001 fa20 	bl	80025dc <HAL_GetTick>
 800119c:	4603      	mov	r3, r0
 800119e:	2200      	movs	r2, #0
 80011a0:	4698      	mov	r8, r3
 80011a2:	4691      	mov	r9, r2
 80011a4:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	uint64_t on_ticks = curr_ticks - no6_on_time;
 80011a8:	4b7d      	ldr	r3, [pc, #500]	@ (80013a0 <Tick_NO6+0x218>)
 80011aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011ae:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80011b2:	1a14      	subs	r4, r2, r0
 80011b4:	eb63 0501 	sbc.w	r5, r3, r1
 80011b8:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	//transitions
	switch(no6State) {
 80011bc:	4b79      	ldr	r3, [pc, #484]	@ (80013a4 <Tick_NO6+0x21c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	2b04      	cmp	r3, #4
 80011c2:	f200 80ac 	bhi.w	800131e <Tick_NO6+0x196>
 80011c6:	a201      	add	r2, pc, #4	@ (adr r2, 80011cc <Tick_NO6+0x44>)
 80011c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011cc:	080011e1 	.word	0x080011e1
 80011d0:	080011e9 	.word	0x080011e9
 80011d4:	0800123d 	.word	0x0800123d
 80011d8:	080012d7 	.word	0x080012d7
 80011dc:	08001283 	.word	0x08001283
		case SERVO_INIT:
		no6State = SERVO_CLOSED_OFF;
 80011e0:	4b70      	ldr	r3, [pc, #448]	@ (80013a4 <Tick_NO6+0x21c>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
		break;
 80011e6:	e09a      	b.n	800131e <Tick_NO6+0x196>

		case SERVO_CLOSED_OFF:
		if (cmd == CLOSE_NO6) {
 80011e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80011ec:	2b03      	cmp	r3, #3
 80011ee:	d10e      	bne.n	800120e <Tick_NO6+0x86>
			no6_on_time = HAL_GetTick();
 80011f0:	f001 f9f4 	bl	80025dc <HAL_GetTick>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2200      	movs	r2, #0
 80011f8:	623b      	str	r3, [r7, #32]
 80011fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80011fc:	4b68      	ldr	r3, [pc, #416]	@ (80013a0 <Tick_NO6+0x218>)
 80011fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001202:	e9c3 1200 	strd	r1, r2, [r3]
			no6State = SERVO_CLOSED_ON;
 8001206:	4b67      	ldr	r3, [pc, #412]	@ (80013a4 <Tick_NO6+0x21c>)
 8001208:	2202      	movs	r2, #2
 800120a:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO6 || cmd == START_1) {
			no6_on_time = HAL_GetTick();
			no6State = SERVO_OPENED_ON;
		}
		break;
 800120c:	e080      	b.n	8001310 <Tick_NO6+0x188>
		else if (cmd == OPEN_NO6 || cmd == START_1) {
 800120e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001212:	2b02      	cmp	r3, #2
 8001214:	d003      	beq.n	800121e <Tick_NO6+0x96>
 8001216:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800121a:	2b08      	cmp	r3, #8
 800121c:	d178      	bne.n	8001310 <Tick_NO6+0x188>
			no6_on_time = HAL_GetTick();
 800121e:	f001 f9dd 	bl	80025dc <HAL_GetTick>
 8001222:	4603      	mov	r3, r0
 8001224:	2200      	movs	r2, #0
 8001226:	61bb      	str	r3, [r7, #24]
 8001228:	61fa      	str	r2, [r7, #28]
 800122a:	4b5d      	ldr	r3, [pc, #372]	@ (80013a0 <Tick_NO6+0x218>)
 800122c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001230:	e9c3 1200 	strd	r1, r2, [r3]
			no6State = SERVO_OPENED_ON;
 8001234:	4b5b      	ldr	r3, [pc, #364]	@ (80013a4 <Tick_NO6+0x21c>)
 8001236:	2203      	movs	r2, #3
 8001238:	701a      	strb	r2, [r3, #0]
		break;
 800123a:	e069      	b.n	8001310 <Tick_NO6+0x188>

		case SERVO_CLOSED_ON:
		if (cmd == OPEN_NO6 || cmd == START_1) {
 800123c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001240:	2b02      	cmp	r3, #2
 8001242:	d003      	beq.n	800124c <Tick_NO6+0xc4>
 8001244:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001248:	2b08      	cmp	r3, #8
 800124a:	d10e      	bne.n	800126a <Tick_NO6+0xe2>
			no6_on_time = HAL_GetTick();
 800124c:	f001 f9c6 	bl	80025dc <HAL_GetTick>
 8001250:	4603      	mov	r3, r0
 8001252:	2200      	movs	r2, #0
 8001254:	613b      	str	r3, [r7, #16]
 8001256:	617a      	str	r2, [r7, #20]
 8001258:	4b51      	ldr	r3, [pc, #324]	@ (80013a0 <Tick_NO6+0x218>)
 800125a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800125e:	e9c3 1200 	strd	r1, r2, [r3]
			no6State = SERVO_OPENED_ON;
 8001262:	4b50      	ldr	r3, [pc, #320]	@ (80013a4 <Tick_NO6+0x21c>)
 8001264:	2203      	movs	r2, #3
 8001266:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no6State = SERVO_CLOSED_OFF;
		}
		break;
 8001268:	e054      	b.n	8001314 <Tick_NO6+0x18c>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 800126a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800126e:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8001272:	428a      	cmp	r2, r1
 8001274:	f173 0300 	sbcs.w	r3, r3, #0
 8001278:	d34c      	bcc.n	8001314 <Tick_NO6+0x18c>
			no6State = SERVO_CLOSED_OFF;
 800127a:	4b4a      	ldr	r3, [pc, #296]	@ (80013a4 <Tick_NO6+0x21c>)
 800127c:	2201      	movs	r2, #1
 800127e:	701a      	strb	r2, [r3, #0]
		break;
 8001280:	e048      	b.n	8001314 <Tick_NO6+0x18c>

		case SERVO_OPENED_OFF:
		if (cmd == CLOSE_NO6) {
 8001282:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001286:	2b03      	cmp	r3, #3
 8001288:	d10e      	bne.n	80012a8 <Tick_NO6+0x120>
			no6_on_time = HAL_GetTick();
 800128a:	f001 f9a7 	bl	80025dc <HAL_GetTick>
 800128e:	4603      	mov	r3, r0
 8001290:	2200      	movs	r2, #0
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	60fa      	str	r2, [r7, #12]
 8001296:	4b42      	ldr	r3, [pc, #264]	@ (80013a0 <Tick_NO6+0x218>)
 8001298:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800129c:	e9c3 1200 	strd	r1, r2, [r3]
			no6State = SERVO_CLOSED_ON;
 80012a0:	4b40      	ldr	r3, [pc, #256]	@ (80013a4 <Tick_NO6+0x21c>)
 80012a2:	2202      	movs	r2, #2
 80012a4:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO6 || cmd == START_1) {
			no6_on_time = HAL_GetTick();
			no6State = SERVO_OPENED_ON;
		}
		break;
 80012a6:	e037      	b.n	8001318 <Tick_NO6+0x190>
		else if (cmd == OPEN_NO6 || cmd == START_1) {
 80012a8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d003      	beq.n	80012b8 <Tick_NO6+0x130>
 80012b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012b4:	2b08      	cmp	r3, #8
 80012b6:	d12f      	bne.n	8001318 <Tick_NO6+0x190>
			no6_on_time = HAL_GetTick();
 80012b8:	f001 f990 	bl	80025dc <HAL_GetTick>
 80012bc:	4603      	mov	r3, r0
 80012be:	2200      	movs	r2, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	607a      	str	r2, [r7, #4]
 80012c4:	4b36      	ldr	r3, [pc, #216]	@ (80013a0 <Tick_NO6+0x218>)
 80012c6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80012ca:	e9c3 1200 	strd	r1, r2, [r3]
			no6State = SERVO_OPENED_ON;
 80012ce:	4b35      	ldr	r3, [pc, #212]	@ (80013a4 <Tick_NO6+0x21c>)
 80012d0:	2203      	movs	r2, #3
 80012d2:	701a      	strb	r2, [r3, #0]
		break;
 80012d4:	e020      	b.n	8001318 <Tick_NO6+0x190>

		case SERVO_OPENED_ON:
		if (cmd == CLOSE_NO6) {
 80012d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d10c      	bne.n	80012f8 <Tick_NO6+0x170>
			no6_on_time = HAL_GetTick();
 80012de:	f001 f97d 	bl	80025dc <HAL_GetTick>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2200      	movs	r2, #0
 80012e6:	469a      	mov	sl, r3
 80012e8:	4693      	mov	fp, r2
 80012ea:	4b2d      	ldr	r3, [pc, #180]	@ (80013a0 <Tick_NO6+0x218>)
 80012ec:	e9c3 ab00 	strd	sl, fp, [r3]
			no6State = SERVO_CLOSED_ON;
 80012f0:	4b2c      	ldr	r3, [pc, #176]	@ (80013a4 <Tick_NO6+0x21c>)
 80012f2:	2202      	movs	r2, #2
 80012f4:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no6State = SERVO_OPENED_OFF;
		}
		break;
 80012f6:	e011      	b.n	800131c <Tick_NO6+0x194>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 80012f8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80012fc:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8001300:	428a      	cmp	r2, r1
 8001302:	f173 0300 	sbcs.w	r3, r3, #0
 8001306:	d309      	bcc.n	800131c <Tick_NO6+0x194>
			no6State = SERVO_OPENED_OFF;
 8001308:	4b26      	ldr	r3, [pc, #152]	@ (80013a4 <Tick_NO6+0x21c>)
 800130a:	2204      	movs	r2, #4
 800130c:	701a      	strb	r2, [r3, #0]
		break;
 800130e:	e005      	b.n	800131c <Tick_NO6+0x194>
		break;
 8001310:	bf00      	nop
 8001312:	e004      	b.n	800131e <Tick_NO6+0x196>
		break;
 8001314:	bf00      	nop
 8001316:	e002      	b.n	800131e <Tick_NO6+0x196>
		break;
 8001318:	bf00      	nop
 800131a:	e000      	b.n	800131e <Tick_NO6+0x196>
		break;
 800131c:	bf00      	nop
	}

	//actions
	switch(no6State) {
 800131e:	4b21      	ldr	r3, [pc, #132]	@ (80013a4 <Tick_NO6+0x21c>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b04      	cmp	r3, #4
 8001324:	d837      	bhi.n	8001396 <Tick_NO6+0x20e>
 8001326:	a201      	add	r2, pc, #4	@ (adr r2, 800132c <Tick_NO6+0x1a4>)
 8001328:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800132c:	08001395 	.word	0x08001395
 8001330:	08001341 	.word	0x08001341
 8001334:	0800134d 	.word	0x0800134d
 8001338:	08001377 	.word	0x08001377
 800133c:	0800136b 	.word	0x0800136b
		case SERVO_INIT:
		break;

		case SERVO_CLOSED_OFF:
		HAL_GPIO_WritePin(NO6_EN_GPIO_Port, NO6_EN_Pin, GPIO_PIN_RESET);
 8001340:	2200      	movs	r2, #0
 8001342:	2110      	movs	r1, #16
 8001344:	4818      	ldr	r0, [pc, #96]	@ (80013a8 <Tick_NO6+0x220>)
 8001346:	f001 fcb9 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 800134a:	e024      	b.n	8001396 <Tick_NO6+0x20e>

		case SERVO_CLOSED_ON:
		HAL_GPIO_WritePin(NO6_EN_GPIO_Port, NO6_EN_Pin, GPIO_PIN_SET);
 800134c:	2201      	movs	r2, #1
 800134e:	2110      	movs	r1, #16
 8001350:	4815      	ldr	r0, [pc, #84]	@ (80013a8 <Tick_NO6+0x220>)
 8001352:	f001 fcb3 	bl	8002cbc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO6_CLOSED_DEG, servo, HSP_SERVO_MAX_DEG);
 8001356:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001358:	689c      	ldr	r4, [r3, #8]
 800135a:	22b4      	movs	r2, #180	@ 0xb4
 800135c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800135e:	205a      	movs	r0, #90	@ 0x5a
 8001360:	f7ff fd22 	bl	8000da8 <Deg_To_CCR>
 8001364:	4603      	mov	r3, r0
 8001366:	6023      	str	r3, [r4, #0]
		break;
 8001368:	e015      	b.n	8001396 <Tick_NO6+0x20e>

		case SERVO_OPENED_OFF:
		HAL_GPIO_WritePin(NO6_EN_GPIO_Port, NO6_EN_Pin, GPIO_PIN_RESET);
 800136a:	2200      	movs	r2, #0
 800136c:	2110      	movs	r1, #16
 800136e:	480e      	ldr	r0, [pc, #56]	@ (80013a8 <Tick_NO6+0x220>)
 8001370:	f001 fca4 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 8001374:	e00f      	b.n	8001396 <Tick_NO6+0x20e>

		case SERVO_OPENED_ON:
		HAL_GPIO_WritePin(NO6_EN_GPIO_Port, NO6_EN_Pin, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	2110      	movs	r1, #16
 800137a:	480b      	ldr	r0, [pc, #44]	@ (80013a8 <Tick_NO6+0x220>)
 800137c:	f001 fc9e 	bl	8002cbc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO6_OPENED_DEG, servo, HSP_SERVO_MAX_DEG);
 8001380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001382:	689c      	ldr	r4, [r3, #8]
 8001384:	22b4      	movs	r2, #180	@ 0xb4
 8001386:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001388:	2000      	movs	r0, #0
 800138a:	f7ff fd0d 	bl	8000da8 <Deg_To_CCR>
 800138e:	4603      	mov	r3, r0
 8001390:	6023      	str	r3, [r4, #0]
		break;
 8001392:	e000      	b.n	8001396 <Tick_NO6+0x20e>
		break;
 8001394:	bf00      	nop

	}
}
 8001396:	bf00      	nop
 8001398:	3740      	adds	r7, #64	@ 0x40
 800139a:	46bd      	mov	sp, r7
 800139c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80013a0:	20000090 	.word	0x20000090
 80013a4:	2000006f 	.word	0x2000006f
 80013a8:	40020800 	.word	0x40020800

080013ac <Tick_NO4>:
#include "config.h"
#include "deg_to_ccr.h"
#include "create_ack.h"
#include "main.h"

void Tick_NO4 (uint8_t cmd, struct Servo *servo) {
 80013ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013b0:	b090      	sub	sp, #64	@ 0x40
 80013b2:	af00      	add	r7, sp, #0
 80013b4:	4603      	mov	r3, r0
 80013b6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80013b8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint64_t curr_ticks = HAL_GetTick();
 80013bc:	f001 f90e 	bl	80025dc <HAL_GetTick>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2200      	movs	r2, #0
 80013c4:	4698      	mov	r8, r3
 80013c6:	4691      	mov	r9, r2
 80013c8:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	uint64_t on_ticks = curr_ticks - no4_on_time;
 80013cc:	4b77      	ldr	r3, [pc, #476]	@ (80015ac <Tick_NO4+0x200>)
 80013ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013d2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80013d6:	1a14      	subs	r4, r2, r0
 80013d8:	eb63 0501 	sbc.w	r5, r3, r1
 80013dc:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	//transitions
	switch(no4State) {
 80013e0:	4b73      	ldr	r3, [pc, #460]	@ (80015b0 <Tick_NO4+0x204>)
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b04      	cmp	r3, #4
 80013e6:	f200 80a0 	bhi.w	800152a <Tick_NO4+0x17e>
 80013ea:	a201      	add	r2, pc, #4	@ (adr r2, 80013f0 <Tick_NO4+0x44>)
 80013ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f0:	08001405 	.word	0x08001405
 80013f4:	0800140d 	.word	0x0800140d
 80013f8:	08001459 	.word	0x08001459
 80013fc:	080014e3 	.word	0x080014e3
 8001400:	08001497 	.word	0x08001497
		case SERVO_INIT:
		no4State = SERVO_CLOSED_OFF;
 8001404:	4b6a      	ldr	r3, [pc, #424]	@ (80015b0 <Tick_NO4+0x204>)
 8001406:	2201      	movs	r2, #1
 8001408:	701a      	strb	r2, [r3, #0]
		break;
 800140a:	e08e      	b.n	800152a <Tick_NO4+0x17e>

		case SERVO_CLOSED_OFF:
		if (cmd == CLOSE_NO4) {
 800140c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001410:	2b05      	cmp	r3, #5
 8001412:	d10e      	bne.n	8001432 <Tick_NO4+0x86>
			no4_on_time = HAL_GetTick();
 8001414:	f001 f8e2 	bl	80025dc <HAL_GetTick>
 8001418:	4603      	mov	r3, r0
 800141a:	2200      	movs	r2, #0
 800141c:	623b      	str	r3, [r7, #32]
 800141e:	627a      	str	r2, [r7, #36]	@ 0x24
 8001420:	4b62      	ldr	r3, [pc, #392]	@ (80015ac <Tick_NO4+0x200>)
 8001422:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001426:	e9c3 1200 	strd	r1, r2, [r3]
			no4State = SERVO_CLOSED_ON;
 800142a:	4b61      	ldr	r3, [pc, #388]	@ (80015b0 <Tick_NO4+0x204>)
 800142c:	2202      	movs	r2, #2
 800142e:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO4) {
			no4_on_time = HAL_GetTick();
			no4State = SERVO_OPENED_ON;
		}
		break;
 8001430:	e074      	b.n	800151c <Tick_NO4+0x170>
		else if (cmd == OPEN_NO4) {
 8001432:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001436:	2b04      	cmp	r3, #4
 8001438:	d170      	bne.n	800151c <Tick_NO4+0x170>
			no4_on_time = HAL_GetTick();
 800143a:	f001 f8cf 	bl	80025dc <HAL_GetTick>
 800143e:	4603      	mov	r3, r0
 8001440:	2200      	movs	r2, #0
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	61fa      	str	r2, [r7, #28]
 8001446:	4b59      	ldr	r3, [pc, #356]	@ (80015ac <Tick_NO4+0x200>)
 8001448:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800144c:	e9c3 1200 	strd	r1, r2, [r3]
			no4State = SERVO_OPENED_ON;
 8001450:	4b57      	ldr	r3, [pc, #348]	@ (80015b0 <Tick_NO4+0x204>)
 8001452:	2203      	movs	r2, #3
 8001454:	701a      	strb	r2, [r3, #0]
		break;
 8001456:	e061      	b.n	800151c <Tick_NO4+0x170>

		case SERVO_CLOSED_ON:
		if (cmd == OPEN_NO4) {
 8001458:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800145c:	2b04      	cmp	r3, #4
 800145e:	d10e      	bne.n	800147e <Tick_NO4+0xd2>
			no4_on_time = HAL_GetTick();
 8001460:	f001 f8bc 	bl	80025dc <HAL_GetTick>
 8001464:	4603      	mov	r3, r0
 8001466:	2200      	movs	r2, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	617a      	str	r2, [r7, #20]
 800146c:	4b4f      	ldr	r3, [pc, #316]	@ (80015ac <Tick_NO4+0x200>)
 800146e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8001472:	e9c3 1200 	strd	r1, r2, [r3]
			no4State = SERVO_OPENED_ON;
 8001476:	4b4e      	ldr	r3, [pc, #312]	@ (80015b0 <Tick_NO4+0x204>)
 8001478:	2203      	movs	r2, #3
 800147a:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no4State = SERVO_CLOSED_OFF;
		}
		break;
 800147c:	e050      	b.n	8001520 <Tick_NO4+0x174>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 800147e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001482:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8001486:	428a      	cmp	r2, r1
 8001488:	f173 0300 	sbcs.w	r3, r3, #0
 800148c:	d348      	bcc.n	8001520 <Tick_NO4+0x174>
			no4State = SERVO_CLOSED_OFF;
 800148e:	4b48      	ldr	r3, [pc, #288]	@ (80015b0 <Tick_NO4+0x204>)
 8001490:	2201      	movs	r2, #1
 8001492:	701a      	strb	r2, [r3, #0]
		break;
 8001494:	e044      	b.n	8001520 <Tick_NO4+0x174>

		case SERVO_OPENED_OFF:
		if (cmd == CLOSE_NO4) {
 8001496:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800149a:	2b05      	cmp	r3, #5
 800149c:	d10e      	bne.n	80014bc <Tick_NO4+0x110>
			no4_on_time = HAL_GetTick();
 800149e:	f001 f89d 	bl	80025dc <HAL_GetTick>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2200      	movs	r2, #0
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	60fa      	str	r2, [r7, #12]
 80014aa:	4b40      	ldr	r3, [pc, #256]	@ (80015ac <Tick_NO4+0x200>)
 80014ac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80014b0:	e9c3 1200 	strd	r1, r2, [r3]
			no4State = SERVO_CLOSED_ON;
 80014b4:	4b3e      	ldr	r3, [pc, #248]	@ (80015b0 <Tick_NO4+0x204>)
 80014b6:	2202      	movs	r2, #2
 80014b8:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO4) {
			no4_on_time = HAL_GetTick();
			no4State = SERVO_OPENED_ON;
		}
		break;
 80014ba:	e033      	b.n	8001524 <Tick_NO4+0x178>
		else if (cmd == OPEN_NO4) {
 80014bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014c0:	2b04      	cmp	r3, #4
 80014c2:	d12f      	bne.n	8001524 <Tick_NO4+0x178>
			no4_on_time = HAL_GetTick();
 80014c4:	f001 f88a 	bl	80025dc <HAL_GetTick>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2200      	movs	r2, #0
 80014cc:	603b      	str	r3, [r7, #0]
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	4b36      	ldr	r3, [pc, #216]	@ (80015ac <Tick_NO4+0x200>)
 80014d2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80014d6:	e9c3 1200 	strd	r1, r2, [r3]
			no4State = SERVO_OPENED_ON;
 80014da:	4b35      	ldr	r3, [pc, #212]	@ (80015b0 <Tick_NO4+0x204>)
 80014dc:	2203      	movs	r2, #3
 80014de:	701a      	strb	r2, [r3, #0]
		break;
 80014e0:	e020      	b.n	8001524 <Tick_NO4+0x178>

		case SERVO_OPENED_ON:
		if (cmd == CLOSE_NO4) {
 80014e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014e6:	2b05      	cmp	r3, #5
 80014e8:	d10c      	bne.n	8001504 <Tick_NO4+0x158>
			no4_on_time = HAL_GetTick();
 80014ea:	f001 f877 	bl	80025dc <HAL_GetTick>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2200      	movs	r2, #0
 80014f2:	469a      	mov	sl, r3
 80014f4:	4693      	mov	fp, r2
 80014f6:	4b2d      	ldr	r3, [pc, #180]	@ (80015ac <Tick_NO4+0x200>)
 80014f8:	e9c3 ab00 	strd	sl, fp, [r3]
			no4State = SERVO_CLOSED_ON;
 80014fc:	4b2c      	ldr	r3, [pc, #176]	@ (80015b0 <Tick_NO4+0x204>)
 80014fe:	2202      	movs	r2, #2
 8001500:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no4State = SERVO_OPENED_OFF;
		}
		break;
 8001502:	e011      	b.n	8001528 <Tick_NO4+0x17c>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8001504:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001508:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 800150c:	428a      	cmp	r2, r1
 800150e:	f173 0300 	sbcs.w	r3, r3, #0
 8001512:	d309      	bcc.n	8001528 <Tick_NO4+0x17c>
			no4State = SERVO_OPENED_OFF;
 8001514:	4b26      	ldr	r3, [pc, #152]	@ (80015b0 <Tick_NO4+0x204>)
 8001516:	2204      	movs	r2, #4
 8001518:	701a      	strb	r2, [r3, #0]
		break;
 800151a:	e005      	b.n	8001528 <Tick_NO4+0x17c>
		break;
 800151c:	bf00      	nop
 800151e:	e004      	b.n	800152a <Tick_NO4+0x17e>
		break;
 8001520:	bf00      	nop
 8001522:	e002      	b.n	800152a <Tick_NO4+0x17e>
		break;
 8001524:	bf00      	nop
 8001526:	e000      	b.n	800152a <Tick_NO4+0x17e>
		break;
 8001528:	bf00      	nop
	}

	//actions
	switch(no4State) {
 800152a:	4b21      	ldr	r3, [pc, #132]	@ (80015b0 <Tick_NO4+0x204>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b04      	cmp	r3, #4
 8001530:	d837      	bhi.n	80015a2 <Tick_NO4+0x1f6>
 8001532:	a201      	add	r2, pc, #4	@ (adr r2, 8001538 <Tick_NO4+0x18c>)
 8001534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001538:	080015a1 	.word	0x080015a1
 800153c:	0800154d 	.word	0x0800154d
 8001540:	08001559 	.word	0x08001559
 8001544:	08001583 	.word	0x08001583
 8001548:	08001577 	.word	0x08001577
		case SERVO_INIT:
		break;

		case SERVO_CLOSED_OFF:
		HAL_GPIO_WritePin(NO4_EN_GPIO_Port, NO4_EN_Pin, GPIO_PIN_RESET);
 800154c:	2200      	movs	r2, #0
 800154e:	2104      	movs	r1, #4
 8001550:	4818      	ldr	r0, [pc, #96]	@ (80015b4 <Tick_NO4+0x208>)
 8001552:	f001 fbb3 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 8001556:	e024      	b.n	80015a2 <Tick_NO4+0x1f6>

		case SERVO_CLOSED_ON:
		HAL_GPIO_WritePin(NO4_EN_GPIO_Port, NO4_EN_Pin, GPIO_PIN_SET);
 8001558:	2201      	movs	r2, #1
 800155a:	2104      	movs	r1, #4
 800155c:	4815      	ldr	r0, [pc, #84]	@ (80015b4 <Tick_NO4+0x208>)
 800155e:	f001 fbad 	bl	8002cbc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO4_CLOSED_DEG, servo, HSP_SERVO_MAX_DEG);
 8001562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001564:	689c      	ldr	r4, [r3, #8]
 8001566:	22b4      	movs	r2, #180	@ 0xb4
 8001568:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800156a:	205c      	movs	r0, #92	@ 0x5c
 800156c:	f7ff fc1c 	bl	8000da8 <Deg_To_CCR>
 8001570:	4603      	mov	r3, r0
 8001572:	6023      	str	r3, [r4, #0]
		break;
 8001574:	e015      	b.n	80015a2 <Tick_NO4+0x1f6>

		case SERVO_OPENED_OFF:
		HAL_GPIO_WritePin(NO4_EN_GPIO_Port, NO4_EN_Pin, GPIO_PIN_RESET);
 8001576:	2200      	movs	r2, #0
 8001578:	2104      	movs	r1, #4
 800157a:	480e      	ldr	r0, [pc, #56]	@ (80015b4 <Tick_NO4+0x208>)
 800157c:	f001 fb9e 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 8001580:	e00f      	b.n	80015a2 <Tick_NO4+0x1f6>

		case SERVO_OPENED_ON:
		HAL_GPIO_WritePin(NO4_EN_GPIO_Port, NO4_EN_Pin, GPIO_PIN_SET);
 8001582:	2201      	movs	r2, #1
 8001584:	2104      	movs	r1, #4
 8001586:	480b      	ldr	r0, [pc, #44]	@ (80015b4 <Tick_NO4+0x208>)
 8001588:	f001 fb98 	bl	8002cbc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO4_OPENED_DEG, servo, HSP_SERVO_MAX_DEG);
 800158c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800158e:	689c      	ldr	r4, [r3, #8]
 8001590:	22b4      	movs	r2, #180	@ 0xb4
 8001592:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001594:	2008      	movs	r0, #8
 8001596:	f7ff fc07 	bl	8000da8 <Deg_To_CCR>
 800159a:	4603      	mov	r3, r0
 800159c:	6023      	str	r3, [r4, #0]
		break;
 800159e:	e000      	b.n	80015a2 <Tick_NO4+0x1f6>
		break;
 80015a0:	bf00      	nop

	}
}
 80015a2:	bf00      	nop
 80015a4:	3740      	adds	r7, #64	@ 0x40
 80015a6:	46bd      	mov	sp, r7
 80015a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80015ac:	20000088 	.word	0x20000088
 80015b0:	20000070 	.word	0x20000070
 80015b4:	40020800 	.word	0x40020800

080015b8 <Tick_NO3>:
#include "config.h"
#include "deg_to_ccr.h"
#include "create_ack.h"
#include "main.h"

void Tick_NO3 (uint8_t cmd, struct Servo *servo) {
 80015b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015bc:	b090      	sub	sp, #64	@ 0x40
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80015c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint64_t curr_ticks = HAL_GetTick();
 80015c8:	f001 f808 	bl	80025dc <HAL_GetTick>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2200      	movs	r2, #0
 80015d0:	4698      	mov	r8, r3
 80015d2:	4691      	mov	r9, r2
 80015d4:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	uint64_t on_ticks = curr_ticks - no3_on_time;
 80015d8:	4b78      	ldr	r3, [pc, #480]	@ (80017bc <Tick_NO3+0x204>)
 80015da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80015de:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80015e2:	1a14      	subs	r4, r2, r0
 80015e4:	eb63 0501 	sbc.w	r5, r3, r1
 80015e8:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	//transitions
	switch(no3State) {
 80015ec:	4b74      	ldr	r3, [pc, #464]	@ (80017c0 <Tick_NO3+0x208>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	f200 80a0 	bhi.w	8001736 <Tick_NO3+0x17e>
 80015f6:	a201      	add	r2, pc, #4	@ (adr r2, 80015fc <Tick_NO3+0x44>)
 80015f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015fc:	08001611 	.word	0x08001611
 8001600:	08001619 	.word	0x08001619
 8001604:	08001665 	.word	0x08001665
 8001608:	080016ef 	.word	0x080016ef
 800160c:	080016a3 	.word	0x080016a3
		case SERVO_INIT:
		no3State = SERVO_CLOSED_OFF;
 8001610:	4b6b      	ldr	r3, [pc, #428]	@ (80017c0 <Tick_NO3+0x208>)
 8001612:	2201      	movs	r2, #1
 8001614:	701a      	strb	r2, [r3, #0]
		break;
 8001616:	e08e      	b.n	8001736 <Tick_NO3+0x17e>

		case SERVO_CLOSED_OFF:
		if (cmd == CLOSE_NO3) {
 8001618:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800161c:	2b07      	cmp	r3, #7
 800161e:	d10e      	bne.n	800163e <Tick_NO3+0x86>
			no3_on_time = HAL_GetTick();
 8001620:	f000 ffdc 	bl	80025dc <HAL_GetTick>
 8001624:	4603      	mov	r3, r0
 8001626:	2200      	movs	r2, #0
 8001628:	623b      	str	r3, [r7, #32]
 800162a:	627a      	str	r2, [r7, #36]	@ 0x24
 800162c:	4b63      	ldr	r3, [pc, #396]	@ (80017bc <Tick_NO3+0x204>)
 800162e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001632:	e9c3 1200 	strd	r1, r2, [r3]
			no3State = SERVO_CLOSED_ON;
 8001636:	4b62      	ldr	r3, [pc, #392]	@ (80017c0 <Tick_NO3+0x208>)
 8001638:	2202      	movs	r2, #2
 800163a:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO3) {
			no3_on_time = HAL_GetTick();
			no3State = SERVO_OPENED_ON;
		}
		break;
 800163c:	e074      	b.n	8001728 <Tick_NO3+0x170>
		else if (cmd == OPEN_NO3) {
 800163e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001642:	2b06      	cmp	r3, #6
 8001644:	d170      	bne.n	8001728 <Tick_NO3+0x170>
			no3_on_time = HAL_GetTick();
 8001646:	f000 ffc9 	bl	80025dc <HAL_GetTick>
 800164a:	4603      	mov	r3, r0
 800164c:	2200      	movs	r2, #0
 800164e:	61bb      	str	r3, [r7, #24]
 8001650:	61fa      	str	r2, [r7, #28]
 8001652:	4b5a      	ldr	r3, [pc, #360]	@ (80017bc <Tick_NO3+0x204>)
 8001654:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001658:	e9c3 1200 	strd	r1, r2, [r3]
			no3State = SERVO_OPENED_ON;
 800165c:	4b58      	ldr	r3, [pc, #352]	@ (80017c0 <Tick_NO3+0x208>)
 800165e:	2203      	movs	r2, #3
 8001660:	701a      	strb	r2, [r3, #0]
		break;
 8001662:	e061      	b.n	8001728 <Tick_NO3+0x170>

		case SERVO_CLOSED_ON:
		if (cmd == OPEN_NO3) {
 8001664:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001668:	2b06      	cmp	r3, #6
 800166a:	d10e      	bne.n	800168a <Tick_NO3+0xd2>
			no3_on_time = HAL_GetTick();
 800166c:	f000 ffb6 	bl	80025dc <HAL_GetTick>
 8001670:	4603      	mov	r3, r0
 8001672:	2200      	movs	r2, #0
 8001674:	613b      	str	r3, [r7, #16]
 8001676:	617a      	str	r2, [r7, #20]
 8001678:	4b50      	ldr	r3, [pc, #320]	@ (80017bc <Tick_NO3+0x204>)
 800167a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800167e:	e9c3 1200 	strd	r1, r2, [r3]
			no3State = SERVO_OPENED_ON;
 8001682:	4b4f      	ldr	r3, [pc, #316]	@ (80017c0 <Tick_NO3+0x208>)
 8001684:	2203      	movs	r2, #3
 8001686:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no3State = SERVO_CLOSED_OFF;
		}
		break;
 8001688:	e050      	b.n	800172c <Tick_NO3+0x174>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 800168a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800168e:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8001692:	428a      	cmp	r2, r1
 8001694:	f173 0300 	sbcs.w	r3, r3, #0
 8001698:	d348      	bcc.n	800172c <Tick_NO3+0x174>
			no3State = SERVO_CLOSED_OFF;
 800169a:	4b49      	ldr	r3, [pc, #292]	@ (80017c0 <Tick_NO3+0x208>)
 800169c:	2201      	movs	r2, #1
 800169e:	701a      	strb	r2, [r3, #0]
		break;
 80016a0:	e044      	b.n	800172c <Tick_NO3+0x174>

		case SERVO_OPENED_OFF:
		if (cmd == CLOSE_NO3) {
 80016a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016a6:	2b07      	cmp	r3, #7
 80016a8:	d10e      	bne.n	80016c8 <Tick_NO3+0x110>
			no3_on_time = HAL_GetTick();
 80016aa:	f000 ff97 	bl	80025dc <HAL_GetTick>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2200      	movs	r2, #0
 80016b2:	60bb      	str	r3, [r7, #8]
 80016b4:	60fa      	str	r2, [r7, #12]
 80016b6:	4b41      	ldr	r3, [pc, #260]	@ (80017bc <Tick_NO3+0x204>)
 80016b8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80016bc:	e9c3 1200 	strd	r1, r2, [r3]
			no3State = SERVO_CLOSED_ON;
 80016c0:	4b3f      	ldr	r3, [pc, #252]	@ (80017c0 <Tick_NO3+0x208>)
 80016c2:	2202      	movs	r2, #2
 80016c4:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO3) {
			no3_on_time = HAL_GetTick();
			no3State = SERVO_OPENED_ON;
		}
		break;
 80016c6:	e033      	b.n	8001730 <Tick_NO3+0x178>
		else if (cmd == OPEN_NO3) {
 80016c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016cc:	2b06      	cmp	r3, #6
 80016ce:	d12f      	bne.n	8001730 <Tick_NO3+0x178>
			no3_on_time = HAL_GetTick();
 80016d0:	f000 ff84 	bl	80025dc <HAL_GetTick>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2200      	movs	r2, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	607a      	str	r2, [r7, #4]
 80016dc:	4b37      	ldr	r3, [pc, #220]	@ (80017bc <Tick_NO3+0x204>)
 80016de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80016e2:	e9c3 1200 	strd	r1, r2, [r3]
			no3State = SERVO_OPENED_ON;
 80016e6:	4b36      	ldr	r3, [pc, #216]	@ (80017c0 <Tick_NO3+0x208>)
 80016e8:	2203      	movs	r2, #3
 80016ea:	701a      	strb	r2, [r3, #0]
		break;
 80016ec:	e020      	b.n	8001730 <Tick_NO3+0x178>

		case SERVO_OPENED_ON:
		if (cmd == CLOSE_NO3) {
 80016ee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80016f2:	2b07      	cmp	r3, #7
 80016f4:	d10c      	bne.n	8001710 <Tick_NO3+0x158>
			no3_on_time = HAL_GetTick();
 80016f6:	f000 ff71 	bl	80025dc <HAL_GetTick>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2200      	movs	r2, #0
 80016fe:	469a      	mov	sl, r3
 8001700:	4693      	mov	fp, r2
 8001702:	4b2e      	ldr	r3, [pc, #184]	@ (80017bc <Tick_NO3+0x204>)
 8001704:	e9c3 ab00 	strd	sl, fp, [r3]
			no3State = SERVO_CLOSED_ON;
 8001708:	4b2d      	ldr	r3, [pc, #180]	@ (80017c0 <Tick_NO3+0x208>)
 800170a:	2202      	movs	r2, #2
 800170c:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no3State = SERVO_OPENED_OFF;
		}
		break;
 800170e:	e011      	b.n	8001734 <Tick_NO3+0x17c>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8001710:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001714:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8001718:	428a      	cmp	r2, r1
 800171a:	f173 0300 	sbcs.w	r3, r3, #0
 800171e:	d309      	bcc.n	8001734 <Tick_NO3+0x17c>
			no3State = SERVO_OPENED_OFF;
 8001720:	4b27      	ldr	r3, [pc, #156]	@ (80017c0 <Tick_NO3+0x208>)
 8001722:	2204      	movs	r2, #4
 8001724:	701a      	strb	r2, [r3, #0]
		break;
 8001726:	e005      	b.n	8001734 <Tick_NO3+0x17c>
		break;
 8001728:	bf00      	nop
 800172a:	e004      	b.n	8001736 <Tick_NO3+0x17e>
		break;
 800172c:	bf00      	nop
 800172e:	e002      	b.n	8001736 <Tick_NO3+0x17e>
		break;
 8001730:	bf00      	nop
 8001732:	e000      	b.n	8001736 <Tick_NO3+0x17e>
		break;
 8001734:	bf00      	nop
	}

	//actions
	switch(no3State) {
 8001736:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <Tick_NO3+0x208>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b04      	cmp	r3, #4
 800173c:	d839      	bhi.n	80017b2 <Tick_NO3+0x1fa>
 800173e:	a201      	add	r2, pc, #4	@ (adr r2, 8001744 <Tick_NO3+0x18c>)
 8001740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001744:	080017b1 	.word	0x080017b1
 8001748:	08001759 	.word	0x08001759
 800174c:	08001765 	.word	0x08001765
 8001750:	08001791 	.word	0x08001791
 8001754:	08001785 	.word	0x08001785
		case SERVO_INIT:
		break;

		case SERVO_CLOSED_OFF:
		HAL_GPIO_WritePin(NO3_EN_GPIO_Port, NO3_EN_Pin, GPIO_PIN_RESET);
 8001758:	2200      	movs	r2, #0
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4819      	ldr	r0, [pc, #100]	@ (80017c4 <Tick_NO3+0x20c>)
 800175e:	f001 faad 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 8001762:	e026      	b.n	80017b2 <Tick_NO3+0x1fa>

		case SERVO_CLOSED_ON:
		HAL_GPIO_WritePin(NO3_EN_GPIO_Port, NO3_EN_Pin, GPIO_PIN_SET);
 8001764:	2201      	movs	r2, #1
 8001766:	2180      	movs	r1, #128	@ 0x80
 8001768:	4816      	ldr	r0, [pc, #88]	@ (80017c4 <Tick_NO3+0x20c>)
 800176a:	f001 faa7 	bl	8002cbc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO3_CLOSED_DEG, servo, HSP_NO3_SERVO_MAX_DEG);
 800176e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001770:	689c      	ldr	r4, [r3, #8]
 8001772:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 8001776:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001778:	205a      	movs	r0, #90	@ 0x5a
 800177a:	f7ff fb15 	bl	8000da8 <Deg_To_CCR>
 800177e:	4603      	mov	r3, r0
 8001780:	6023      	str	r3, [r4, #0]
		break;
 8001782:	e016      	b.n	80017b2 <Tick_NO3+0x1fa>

		case SERVO_OPENED_OFF:
		HAL_GPIO_WritePin(NO3_EN_GPIO_Port, NO3_EN_Pin, GPIO_PIN_RESET);
 8001784:	2200      	movs	r2, #0
 8001786:	2180      	movs	r1, #128	@ 0x80
 8001788:	480e      	ldr	r0, [pc, #56]	@ (80017c4 <Tick_NO3+0x20c>)
 800178a:	f001 fa97 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 800178e:	e010      	b.n	80017b2 <Tick_NO3+0x1fa>

		case SERVO_OPENED_ON:
		HAL_GPIO_WritePin(NO3_EN_GPIO_Port, NO3_EN_Pin, GPIO_PIN_SET);
 8001790:	2201      	movs	r2, #1
 8001792:	2180      	movs	r1, #128	@ 0x80
 8001794:	480b      	ldr	r0, [pc, #44]	@ (80017c4 <Tick_NO3+0x20c>)
 8001796:	f001 fa91 	bl	8002cbc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO3_OPENED_DEG, servo, HSP_NO3_SERVO_MAX_DEG);
 800179a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800179c:	689c      	ldr	r4, [r3, #8]
 800179e:	f44f 7287 	mov.w	r2, #270	@ 0x10e
 80017a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80017a4:	2000      	movs	r0, #0
 80017a6:	f7ff faff 	bl	8000da8 <Deg_To_CCR>
 80017aa:	4603      	mov	r3, r0
 80017ac:	6023      	str	r3, [r4, #0]
		break;
 80017ae:	e000      	b.n	80017b2 <Tick_NO3+0x1fa>
		break;
 80017b0:	bf00      	nop

	}
}
 80017b2:	bf00      	nop
 80017b4:	3740      	adds	r7, #64	@ 0x40
 80017b6:	46bd      	mov	sp, r7
 80017b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80017bc:	20000080 	.word	0x20000080
 80017c0:	20000071 	.word	0x20000071
 80017c4:	40020800 	.word	0x40020800

080017c8 <Tick_NO2>:
#include "config.h"
#include "deg_to_ccr.h"
#include "create_ack.h"
#include "main.h"

void Tick_NO2 (uint8_t cmd, struct Servo *servo) {
 80017c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80017cc:	b090      	sub	sp, #64	@ 0x40
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	4603      	mov	r3, r0
 80017d2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80017d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint64_t curr_ticks = HAL_GetTick();
 80017d8:	f000 ff00 	bl	80025dc <HAL_GetTick>
 80017dc:	4603      	mov	r3, r0
 80017de:	2200      	movs	r2, #0
 80017e0:	4698      	mov	r8, r3
 80017e2:	4691      	mov	r9, r2
 80017e4:	e9c7 890e 	strd	r8, r9, [r7, #56]	@ 0x38
	uint64_t on_ticks = curr_ticks - no2_on_time;
 80017e8:	4b77      	ldr	r3, [pc, #476]	@ (80019c8 <Tick_NO2+0x200>)
 80017ea:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80017f2:	1a14      	subs	r4, r2, r0
 80017f4:	eb63 0501 	sbc.w	r5, r3, r1
 80017f8:	e9c7 450c 	strd	r4, r5, [r7, #48]	@ 0x30
	//transitions
	switch(no2State) {
 80017fc:	4b73      	ldr	r3, [pc, #460]	@ (80019cc <Tick_NO2+0x204>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b04      	cmp	r3, #4
 8001802:	f200 80a0 	bhi.w	8001946 <Tick_NO2+0x17e>
 8001806:	a201      	add	r2, pc, #4	@ (adr r2, 800180c <Tick_NO2+0x44>)
 8001808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180c:	08001821 	.word	0x08001821
 8001810:	08001829 	.word	0x08001829
 8001814:	08001875 	.word	0x08001875
 8001818:	080018ff 	.word	0x080018ff
 800181c:	080018b3 	.word	0x080018b3
		case SERVO_INIT:
		no2State = SERVO_CLOSED_OFF;
 8001820:	4b6a      	ldr	r3, [pc, #424]	@ (80019cc <Tick_NO2+0x204>)
 8001822:	2201      	movs	r2, #1
 8001824:	701a      	strb	r2, [r3, #0]
		break;
 8001826:	e08e      	b.n	8001946 <Tick_NO2+0x17e>

		case SERVO_CLOSED_OFF:
		if (cmd == CLOSE_NO2) {
 8001828:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800182c:	2b0a      	cmp	r3, #10
 800182e:	d10e      	bne.n	800184e <Tick_NO2+0x86>
			no2_on_time = HAL_GetTick();
 8001830:	f000 fed4 	bl	80025dc <HAL_GetTick>
 8001834:	4603      	mov	r3, r0
 8001836:	2200      	movs	r2, #0
 8001838:	623b      	str	r3, [r7, #32]
 800183a:	627a      	str	r2, [r7, #36]	@ 0x24
 800183c:	4b62      	ldr	r3, [pc, #392]	@ (80019c8 <Tick_NO2+0x200>)
 800183e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8001842:	e9c3 1200 	strd	r1, r2, [r3]
			no2State = SERVO_CLOSED_ON;
 8001846:	4b61      	ldr	r3, [pc, #388]	@ (80019cc <Tick_NO2+0x204>)
 8001848:	2202      	movs	r2, #2
 800184a:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO2) {
			no2_on_time = HAL_GetTick();
			no2State = SERVO_OPENED_ON;
		}
		break;
 800184c:	e074      	b.n	8001938 <Tick_NO2+0x170>
		else if (cmd == OPEN_NO2) {
 800184e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001852:	2b09      	cmp	r3, #9
 8001854:	d170      	bne.n	8001938 <Tick_NO2+0x170>
			no2_on_time = HAL_GetTick();
 8001856:	f000 fec1 	bl	80025dc <HAL_GetTick>
 800185a:	4603      	mov	r3, r0
 800185c:	2200      	movs	r2, #0
 800185e:	61bb      	str	r3, [r7, #24]
 8001860:	61fa      	str	r2, [r7, #28]
 8001862:	4b59      	ldr	r3, [pc, #356]	@ (80019c8 <Tick_NO2+0x200>)
 8001864:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8001868:	e9c3 1200 	strd	r1, r2, [r3]
			no2State = SERVO_OPENED_ON;
 800186c:	4b57      	ldr	r3, [pc, #348]	@ (80019cc <Tick_NO2+0x204>)
 800186e:	2203      	movs	r2, #3
 8001870:	701a      	strb	r2, [r3, #0]
		break;
 8001872:	e061      	b.n	8001938 <Tick_NO2+0x170>

		case SERVO_CLOSED_ON:
		if (cmd == OPEN_NO2) {
 8001874:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001878:	2b09      	cmp	r3, #9
 800187a:	d10e      	bne.n	800189a <Tick_NO2+0xd2>
			no2_on_time = HAL_GetTick();
 800187c:	f000 feae 	bl	80025dc <HAL_GetTick>
 8001880:	4603      	mov	r3, r0
 8001882:	2200      	movs	r2, #0
 8001884:	613b      	str	r3, [r7, #16]
 8001886:	617a      	str	r2, [r7, #20]
 8001888:	4b4f      	ldr	r3, [pc, #316]	@ (80019c8 <Tick_NO2+0x200>)
 800188a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800188e:	e9c3 1200 	strd	r1, r2, [r3]
			no2State = SERVO_OPENED_ON;
 8001892:	4b4e      	ldr	r3, [pc, #312]	@ (80019cc <Tick_NO2+0x204>)
 8001894:	2203      	movs	r2, #3
 8001896:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no2State = SERVO_CLOSED_OFF;
		}
		break;
 8001898:	e050      	b.n	800193c <Tick_NO2+0x174>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 800189a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800189e:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 80018a2:	428a      	cmp	r2, r1
 80018a4:	f173 0300 	sbcs.w	r3, r3, #0
 80018a8:	d348      	bcc.n	800193c <Tick_NO2+0x174>
			no2State = SERVO_CLOSED_OFF;
 80018aa:	4b48      	ldr	r3, [pc, #288]	@ (80019cc <Tick_NO2+0x204>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	701a      	strb	r2, [r3, #0]
		break;
 80018b0:	e044      	b.n	800193c <Tick_NO2+0x174>

		case SERVO_OPENED_OFF:
		if (cmd == CLOSE_NO2) {
 80018b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018b6:	2b0a      	cmp	r3, #10
 80018b8:	d10e      	bne.n	80018d8 <Tick_NO2+0x110>
			no2_on_time = HAL_GetTick();
 80018ba:	f000 fe8f 	bl	80025dc <HAL_GetTick>
 80018be:	4603      	mov	r3, r0
 80018c0:	2200      	movs	r2, #0
 80018c2:	60bb      	str	r3, [r7, #8]
 80018c4:	60fa      	str	r2, [r7, #12]
 80018c6:	4b40      	ldr	r3, [pc, #256]	@ (80019c8 <Tick_NO2+0x200>)
 80018c8:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80018cc:	e9c3 1200 	strd	r1, r2, [r3]
			no2State = SERVO_CLOSED_ON;
 80018d0:	4b3e      	ldr	r3, [pc, #248]	@ (80019cc <Tick_NO2+0x204>)
 80018d2:	2202      	movs	r2, #2
 80018d4:	701a      	strb	r2, [r3, #0]
		}
		else if (cmd == OPEN_NO2) {
			no2_on_time = HAL_GetTick();
			no2State = SERVO_OPENED_ON;
		}
		break;
 80018d6:	e033      	b.n	8001940 <Tick_NO2+0x178>
		else if (cmd == OPEN_NO2) {
 80018d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018dc:	2b09      	cmp	r3, #9
 80018de:	d12f      	bne.n	8001940 <Tick_NO2+0x178>
			no2_on_time = HAL_GetTick();
 80018e0:	f000 fe7c 	bl	80025dc <HAL_GetTick>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2200      	movs	r2, #0
 80018e8:	603b      	str	r3, [r7, #0]
 80018ea:	607a      	str	r2, [r7, #4]
 80018ec:	4b36      	ldr	r3, [pc, #216]	@ (80019c8 <Tick_NO2+0x200>)
 80018ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 80018f2:	e9c3 1200 	strd	r1, r2, [r3]
			no2State = SERVO_OPENED_ON;
 80018f6:	4b35      	ldr	r3, [pc, #212]	@ (80019cc <Tick_NO2+0x204>)
 80018f8:	2203      	movs	r2, #3
 80018fa:	701a      	strb	r2, [r3, #0]
		break;
 80018fc:	e020      	b.n	8001940 <Tick_NO2+0x178>

		case SERVO_OPENED_ON:
		if (cmd == CLOSE_NO2) {
 80018fe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001902:	2b0a      	cmp	r3, #10
 8001904:	d10c      	bne.n	8001920 <Tick_NO2+0x158>
			no2_on_time = HAL_GetTick();
 8001906:	f000 fe69 	bl	80025dc <HAL_GetTick>
 800190a:	4603      	mov	r3, r0
 800190c:	2200      	movs	r2, #0
 800190e:	469a      	mov	sl, r3
 8001910:	4693      	mov	fp, r2
 8001912:	4b2d      	ldr	r3, [pc, #180]	@ (80019c8 <Tick_NO2+0x200>)
 8001914:	e9c3 ab00 	strd	sl, fp, [r3]
			no2State = SERVO_CLOSED_ON;
 8001918:	4b2c      	ldr	r3, [pc, #176]	@ (80019cc <Tick_NO2+0x204>)
 800191a:	2202      	movs	r2, #2
 800191c:	701a      	strb	r2, [r3, #0]
		}
		else if (on_ticks > SERVO_ON_TIME_MS) {
			no2State = SERVO_OPENED_OFF;
		}
		break;
 800191e:	e011      	b.n	8001944 <Tick_NO2+0x17c>
		else if (on_ticks > SERVO_ON_TIME_MS) {
 8001920:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001924:	f640 31b9 	movw	r1, #3001	@ 0xbb9
 8001928:	428a      	cmp	r2, r1
 800192a:	f173 0300 	sbcs.w	r3, r3, #0
 800192e:	d309      	bcc.n	8001944 <Tick_NO2+0x17c>
			no2State = SERVO_OPENED_OFF;
 8001930:	4b26      	ldr	r3, [pc, #152]	@ (80019cc <Tick_NO2+0x204>)
 8001932:	2204      	movs	r2, #4
 8001934:	701a      	strb	r2, [r3, #0]
		break;
 8001936:	e005      	b.n	8001944 <Tick_NO2+0x17c>
		break;
 8001938:	bf00      	nop
 800193a:	e004      	b.n	8001946 <Tick_NO2+0x17e>
		break;
 800193c:	bf00      	nop
 800193e:	e002      	b.n	8001946 <Tick_NO2+0x17e>
		break;
 8001940:	bf00      	nop
 8001942:	e000      	b.n	8001946 <Tick_NO2+0x17e>
		break;
 8001944:	bf00      	nop
	}

	//actions
	switch(no2State) {
 8001946:	4b21      	ldr	r3, [pc, #132]	@ (80019cc <Tick_NO2+0x204>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b04      	cmp	r3, #4
 800194c:	d837      	bhi.n	80019be <Tick_NO2+0x1f6>
 800194e:	a201      	add	r2, pc, #4	@ (adr r2, 8001954 <Tick_NO2+0x18c>)
 8001950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001954:	080019bd 	.word	0x080019bd
 8001958:	08001969 	.word	0x08001969
 800195c:	08001975 	.word	0x08001975
 8001960:	0800199f 	.word	0x0800199f
 8001964:	08001993 	.word	0x08001993
		case SERVO_INIT:
		break;

		case SERVO_CLOSED_OFF:
		HAL_GPIO_WritePin(NO2_EN_GPIO_Port, NO2_EN_Pin, GPIO_PIN_RESET);
 8001968:	2200      	movs	r2, #0
 800196a:	2102      	movs	r1, #2
 800196c:	4818      	ldr	r0, [pc, #96]	@ (80019d0 <Tick_NO2+0x208>)
 800196e:	f001 f9a5 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 8001972:	e024      	b.n	80019be <Tick_NO2+0x1f6>

		case SERVO_CLOSED_ON:
		HAL_GPIO_WritePin(NO2_EN_GPIO_Port, NO2_EN_Pin, GPIO_PIN_SET);
 8001974:	2201      	movs	r2, #1
 8001976:	2102      	movs	r1, #2
 8001978:	4815      	ldr	r0, [pc, #84]	@ (80019d0 <Tick_NO2+0x208>)
 800197a:	f001 f99f 	bl	8002cbc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO2_CLOSED_DEG, servo, HSP_SERVO_MAX_DEG);
 800197e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001980:	689c      	ldr	r4, [r3, #8]
 8001982:	22b4      	movs	r2, #180	@ 0xb4
 8001984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001986:	2056      	movs	r0, #86	@ 0x56
 8001988:	f7ff fa0e 	bl	8000da8 <Deg_To_CCR>
 800198c:	4603      	mov	r3, r0
 800198e:	6023      	str	r3, [r4, #0]
		break;
 8001990:	e015      	b.n	80019be <Tick_NO2+0x1f6>

		case SERVO_OPENED_OFF:
		HAL_GPIO_WritePin(NO2_EN_GPIO_Port, NO2_EN_Pin, GPIO_PIN_RESET);
 8001992:	2200      	movs	r2, #0
 8001994:	2102      	movs	r1, #2
 8001996:	480e      	ldr	r0, [pc, #56]	@ (80019d0 <Tick_NO2+0x208>)
 8001998:	f001 f990 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 800199c:	e00f      	b.n	80019be <Tick_NO2+0x1f6>

		case SERVO_OPENED_ON:
		HAL_GPIO_WritePin(NO2_EN_GPIO_Port, NO2_EN_Pin, GPIO_PIN_SET);
 800199e:	2201      	movs	r2, #1
 80019a0:	2102      	movs	r1, #2
 80019a2:	480b      	ldr	r0, [pc, #44]	@ (80019d0 <Tick_NO2+0x208>)
 80019a4:	f001 f98a 	bl	8002cbc <HAL_GPIO_WritePin>
		*servo->ccr = Deg_To_CCR(NO2_OPENED_DEG, servo, HSP_SERVO_MAX_DEG);
 80019a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019aa:	689c      	ldr	r4, [r3, #8]
 80019ac:	22b4      	movs	r2, #180	@ 0xb4
 80019ae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80019b0:	2000      	movs	r0, #0
 80019b2:	f7ff f9f9 	bl	8000da8 <Deg_To_CCR>
 80019b6:	4603      	mov	r3, r0
 80019b8:	6023      	str	r3, [r4, #0]
		break;
 80019ba:	e000      	b.n	80019be <Tick_NO2+0x1f6>
		break;
 80019bc:	bf00      	nop

	}
}
 80019be:	bf00      	nop
 80019c0:	3740      	adds	r7, #64	@ 0x40
 80019c2:	46bd      	mov	sp, r7
 80019c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019c8:	20000078 	.word	0x20000078
 80019cc:	20000072 	.word	0x20000072
 80019d0:	40020800 	.word	0x40020800

080019d4 <Tick_Igniter>:
#define INC_IGNITER_H_

#include "config.h"

//behavior for igniter
void Tick_Igniter(uint8_t cmd) {
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
	//transitions
	switch(igniterState) {
 80019de:	4b32      	ldr	r3, [pc, #200]	@ (8001aa8 <Tick_Igniter+0xd4>)
 80019e0:	781b      	ldrb	r3, [r3, #0]
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d023      	beq.n	8001a2e <Tick_Igniter+0x5a>
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	dc3d      	bgt.n	8001a66 <Tick_Igniter+0x92>
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d002      	beq.n	80019f4 <Tick_Igniter+0x20>
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d004      	beq.n	80019fc <Tick_Igniter+0x28>
 80019f2:	e038      	b.n	8001a66 <Tick_Igniter+0x92>
		case IGNITER_INIT:
		igniterState = IGNITER_DEACTIVATED;
 80019f4:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa8 <Tick_Igniter+0xd4>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	701a      	strb	r2, [r3, #0]
		break;
 80019fa:	e034      	b.n	8001a66 <Tick_Igniter+0x92>

		case IGNITER_DEACTIVATED:
		if (cmd == ACTIVATE_IGNITER && (!isCloseAll && !isAborted)) {
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2b0e      	cmp	r3, #14
 8001a00:	d111      	bne.n	8001a26 <Tick_Igniter+0x52>
 8001a02:	4b2a      	ldr	r3, [pc, #168]	@ (8001aac <Tick_Igniter+0xd8>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	f083 0301 	eor.w	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00a      	beq.n	8001a26 <Tick_Igniter+0x52>
 8001a10:	4b27      	ldr	r3, [pc, #156]	@ (8001ab0 <Tick_Igniter+0xdc>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	f083 0301 	eor.w	r3, r3, #1
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <Tick_Igniter+0x52>
			igniterState = IGNITER_ACTIVATED;
 8001a1e:	4b22      	ldr	r3, [pc, #136]	@ (8001aa8 <Tick_Igniter+0xd4>)
 8001a20:	2202      	movs	r2, #2
 8001a22:	701a      	strb	r2, [r3, #0]
		}
		else {
			igniterState = IGNITER_DEACTIVATED;
		}
		break;
 8001a24:	e01f      	b.n	8001a66 <Tick_Igniter+0x92>
			igniterState = IGNITER_DEACTIVATED;
 8001a26:	4b20      	ldr	r3, [pc, #128]	@ (8001aa8 <Tick_Igniter+0xd4>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	701a      	strb	r2, [r3, #0]
		break;
 8001a2c:	e01b      	b.n	8001a66 <Tick_Igniter+0x92>

		case IGNITER_ACTIVATED:
		if (((cmd == DEACTIVATE_IGNITER || cmd == CLOSE_ALL || isCloseAll)  && !isStarted) || cmd == ABORT) {
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d006      	beq.n	8001a42 <Tick_Igniter+0x6e>
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	2b0c      	cmp	r3, #12
 8001a38:	d003      	beq.n	8001a42 <Tick_Igniter+0x6e>
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <Tick_Igniter+0xd8>)
 8001a3c:	781b      	ldrb	r3, [r3, #0]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d006      	beq.n	8001a50 <Tick_Igniter+0x7c>
 8001a42:	4b1c      	ldr	r3, [pc, #112]	@ (8001ab4 <Tick_Igniter+0xe0>)
 8001a44:	781b      	ldrb	r3, [r3, #0]
 8001a46:	f083 0301 	eor.w	r3, r3, #1
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <Tick_Igniter+0x82>
 8001a50:	79fb      	ldrb	r3, [r7, #7]
 8001a52:	2b10      	cmp	r3, #16
 8001a54:	d103      	bne.n	8001a5e <Tick_Igniter+0x8a>
			igniterState = IGNITER_DEACTIVATED;
 8001a56:	4b14      	ldr	r3, [pc, #80]	@ (8001aa8 <Tick_Igniter+0xd4>)
 8001a58:	2201      	movs	r2, #1
 8001a5a:	701a      	strb	r2, [r3, #0]
		}
		else {
			igniterState = IGNITER_ACTIVATED;
		}
		break;
 8001a5c:	e002      	b.n	8001a64 <Tick_Igniter+0x90>
			igniterState = IGNITER_ACTIVATED;
 8001a5e:	4b12      	ldr	r3, [pc, #72]	@ (8001aa8 <Tick_Igniter+0xd4>)
 8001a60:	2202      	movs	r2, #2
 8001a62:	701a      	strb	r2, [r3, #0]
		break;
 8001a64:	bf00      	nop
	}

	//actions
	switch(igniterState) {
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <Tick_Igniter+0xd4>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d012      	beq.n	8001a94 <Tick_Igniter+0xc0>
 8001a6e:	2b02      	cmp	r3, #2
 8001a70:	dc16      	bgt.n	8001aa0 <Tick_Igniter+0xcc>
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d002      	beq.n	8001a7c <Tick_Igniter+0xa8>
 8001a76:	2b01      	cmp	r3, #1
 8001a78:	d006      	beq.n	8001a88 <Tick_Igniter+0xb4>

		case IGNITER_ACTIVATED:
		HAL_GPIO_WritePin(GPIOC, IGNITER_Pin, GPIO_PIN_SET);
		break;
	}
}
 8001a7a:	e011      	b.n	8001aa0 <Tick_Igniter+0xcc>
		HAL_GPIO_WritePin(GPIOC, IGNITER_Pin, GPIO_PIN_RESET);
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	2108      	movs	r1, #8
 8001a80:	480d      	ldr	r0, [pc, #52]	@ (8001ab8 <Tick_Igniter+0xe4>)
 8001a82:	f001 f91b 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 8001a86:	e00b      	b.n	8001aa0 <Tick_Igniter+0xcc>
		HAL_GPIO_WritePin(GPIOC, IGNITER_Pin, GPIO_PIN_RESET);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2108      	movs	r1, #8
 8001a8c:	480a      	ldr	r0, [pc, #40]	@ (8001ab8 <Tick_Igniter+0xe4>)
 8001a8e:	f001 f915 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 8001a92:	e005      	b.n	8001aa0 <Tick_Igniter+0xcc>
		HAL_GPIO_WritePin(GPIOC, IGNITER_Pin, GPIO_PIN_SET);
 8001a94:	2201      	movs	r2, #1
 8001a96:	2108      	movs	r1, #8
 8001a98:	4807      	ldr	r0, [pc, #28]	@ (8001ab8 <Tick_Igniter+0xe4>)
 8001a9a:	f001 f90f 	bl	8002cbc <HAL_GPIO_WritePin>
		break;
 8001a9e:	bf00      	nop
}
 8001aa0:	bf00      	nop
 8001aa2:	3708      	adds	r7, #8
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	2000006d 	.word	0x2000006d
 8001aac:	20000068 	.word	0x20000068
 8001ab0:	20000069 	.word	0x20000069
 8001ab4:	2000006b 	.word	0x2000006b
 8001ab8:	40020800 	.word	0x40020800

08001abc <Servo_Disable>:

#include "config.h"
#include "tim.h"

//disables PWM signal to all servos
void Servo_Disable() {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_1);
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	480d      	ldr	r0, [pc, #52]	@ (8001af8 <Servo_Disable+0x3c>)
 8001ac4:	f001 fedc 	bl	8003880 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8001ac8:	2104      	movs	r1, #4
 8001aca:	480b      	ldr	r0, [pc, #44]	@ (8001af8 <Servo_Disable+0x3c>)
 8001acc:	f001 fed8 	bl	8003880 <HAL_TIM_PWM_Stop>
	  HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_3);
 8001ad0:	2108      	movs	r1, #8
 8001ad2:	4809      	ldr	r0, [pc, #36]	@ (8001af8 <Servo_Disable+0x3c>)
 8001ad4:	f001 fed4 	bl	8003880 <HAL_TIM_PWM_Stop>
	  //HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_4);
	  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 8001ad8:	2100      	movs	r1, #0
 8001ada:	4808      	ldr	r0, [pc, #32]	@ (8001afc <Servo_Disable+0x40>)
 8001adc:	f001 fed0 	bl	8003880 <HAL_TIM_PWM_Stop>
	  HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4807      	ldr	r0, [pc, #28]	@ (8001b00 <Servo_Disable+0x44>)
 8001ae4:	f002 fc90 	bl	8004408 <HAL_TIMEx_PWMN_Stop>
	  HAL_GPIO_WritePin(SERVO_EN_GPIO_Port, SERVO_EN_Pin, GPIO_PIN_RESET);
 8001ae8:	2200      	movs	r2, #0
 8001aea:	2140      	movs	r1, #64	@ 0x40
 8001aec:	4805      	ldr	r0, [pc, #20]	@ (8001b04 <Servo_Disable+0x48>)
 8001aee:	f001 f8e5 	bl	8002cbc <HAL_GPIO_WritePin>
}
 8001af2:	bf00      	nop
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000138 	.word	0x20000138
 8001afc:	200000f0 	.word	0x200000f0
 8001b00:	200000a8 	.word	0x200000a8
 8001b04:	40020000 	.word	0x40020000

08001b08 <Servo_Enable>:

void Servo_Enable() {
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	480d      	ldr	r0, [pc, #52]	@ (8001b44 <Servo_Enable+0x3c>)
 8001b10:	f001 fdee 	bl	80036f0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001b14:	2104      	movs	r1, #4
 8001b16:	480b      	ldr	r0, [pc, #44]	@ (8001b44 <Servo_Enable+0x3c>)
 8001b18:	f001 fdea 	bl	80036f0 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001b1c:	2108      	movs	r1, #8
 8001b1e:	4809      	ldr	r0, [pc, #36]	@ (8001b44 <Servo_Enable+0x3c>)
 8001b20:	f001 fde6 	bl	80036f0 <HAL_TIM_PWM_Start>
	  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
	  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001b24:	2100      	movs	r1, #0
 8001b26:	4808      	ldr	r0, [pc, #32]	@ (8001b48 <Servo_Enable+0x40>)
 8001b28:	f001 fde2 	bl	80036f0 <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);  // <- this makes me want to cry
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4807      	ldr	r0, [pc, #28]	@ (8001b4c <Servo_Enable+0x44>)
 8001b30:	f002 fbb0 	bl	8004294 <HAL_TIMEx_PWMN_Start>
	  HAL_GPIO_WritePin(SERVO_EN_GPIO_Port, SERVO_EN_Pin, GPIO_PIN_SET);
 8001b34:	2201      	movs	r2, #1
 8001b36:	2140      	movs	r1, #64	@ 0x40
 8001b38:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <Servo_Enable+0x48>)
 8001b3a:	f001 f8bf 	bl	8002cbc <HAL_GPIO_WritePin>
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000138 	.word	0x20000138
 8001b48:	200000f0 	.word	0x200000f0
 8001b4c:	200000a8 	.word	0x200000a8
 8001b50:	40020000 	.word	0x40020000

08001b54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b58:	f000 fcda 	bl	8002510 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b5c:	f000 f88c 	bl	8001c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b60:	f7ff f898 	bl	8000c94 <MX_GPIO_Init>
  MX_TIM4_Init();
 8001b64:	f000 facc 	bl	8002100 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8001b68:	f000 fc2e 	bl	80023c8 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8001b6c:	f000 fa52 	bl	8002014 <MX_TIM3_Init>
  MX_TIM1_Init();
 8001b70:	f000 f9b0 	bl	8001ed4 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */



  HAL_UART_Receive_IT(&huart3, rx_buff, 1);
 8001b74:	2201      	movs	r2, #1
 8001b76:	4937      	ldr	r1, [pc, #220]	@ (8001c54 <main+0x100>)
 8001b78:	4837      	ldr	r0, [pc, #220]	@ (8001c58 <main+0x104>)
 8001b7a:	f002 fe28 	bl	80047ce <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//activates servos
	if (rx_buff[0] == ACTIVATE_SERVOS) {
 8001b7e:	4b35      	ldr	r3, [pc, #212]	@ (8001c54 <main+0x100>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b11      	cmp	r3, #17
 8001b84:	d105      	bne.n	8001b92 <main+0x3e>
		Servo_Enable();
 8001b86:	f7ff ffbf 	bl	8001b08 <Servo_Enable>
		isServoEnabled = true;
 8001b8a:	4b34      	ldr	r3, [pc, #208]	@ (8001c5c <main+0x108>)
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	701a      	strb	r2, [r3, #0]
 8001b90:	e008      	b.n	8001ba4 <main+0x50>
	}
	//deactivates servos
	else if (rx_buff[0] == DEACTIVATE_SERVOS) {
 8001b92:	4b30      	ldr	r3, [pc, #192]	@ (8001c54 <main+0x100>)
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b12      	cmp	r3, #18
 8001b98:	d104      	bne.n	8001ba4 <main+0x50>
		Servo_Disable();
 8001b9a:	f7ff ff8f 	bl	8001abc <Servo_Disable>
		isServoEnabled = false;
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c5c <main+0x108>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	701a      	strb	r2, [r3, #0]
	}
	//if we get abort command disable servo signals and set flags
	if (rx_buff[0] == ABORT) {
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	@ (8001c54 <main+0x100>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b10      	cmp	r3, #16
 8001baa:	d108      	bne.n	8001bbe <main+0x6a>
		Servo_Disable();
 8001bac:	f7ff ff86 	bl	8001abc <Servo_Disable>
		isServoEnabled = false;
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c5c <main+0x108>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	701a      	strb	r2, [r3, #0]
		isAborted = true;
 8001bb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001c60 <main+0x10c>)
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]
 8001bbc:	e006      	b.n	8001bcc <main+0x78>
	}
	//remove abort flag if deabort
	else if (rx_buff[0] == DEABORT) {
 8001bbe:	4b25      	ldr	r3, [pc, #148]	@ (8001c54 <main+0x100>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	2b13      	cmp	r3, #19
 8001bc4:	d102      	bne.n	8001bcc <main+0x78>
		isAborted = false;
 8001bc6:	4b26      	ldr	r3, [pc, #152]	@ (8001c60 <main+0x10c>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	701a      	strb	r2, [r3, #0]
	}
	//set close all flag if we get close all cmd
	if (rx_buff[0] == CLOSE_ALL) {
 8001bcc:	4b21      	ldr	r3, [pc, #132]	@ (8001c54 <main+0x100>)
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	2b0c      	cmp	r3, #12
 8001bd2:	d103      	bne.n	8001bdc <main+0x88>
		isCloseAll = true;
 8001bd4:	4b23      	ldr	r3, [pc, #140]	@ (8001c64 <main+0x110>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
 8001bda:	e006      	b.n	8001bea <main+0x96>
	}
	//remove close all flag if we get declose all cmd
	else if (rx_buff[0] == DECLOSE_ALL) {
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8001c54 <main+0x100>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b0d      	cmp	r3, #13
 8001be2:	d102      	bne.n	8001bea <main+0x96>
		isCloseAll = false;
 8001be4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c64 <main+0x110>)
 8001be6:	2200      	movs	r2, #0
 8001be8:	701a      	strb	r2, [r3, #0]
	}
	//set started flag if we get start cmd
	if (rx_buff[0] == START_1) {
 8001bea:	4b1a      	ldr	r3, [pc, #104]	@ (8001c54 <main+0x100>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b08      	cmp	r3, #8
 8001bf0:	d102      	bne.n	8001bf8 <main+0xa4>
		isStarted = true;
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	@ (8001c68 <main+0x114>)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	701a      	strb	r2, [r3, #0]
	}
	//removes started flag if we get destart cmd
	if (rx_buff[0] == DESTART) {
 8001bf8:	4b16      	ldr	r3, [pc, #88]	@ (8001c54 <main+0x100>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b15      	cmp	r3, #21
 8001bfe:	d102      	bne.n	8001c06 <main+0xb2>
		isStarted = false;
 8001c00:	4b19      	ldr	r3, [pc, #100]	@ (8001c68 <main+0x114>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	701a      	strb	r2, [r3, #0]
	}

	Tick_Components();
 8001c06:	f000 f8a9 	bl	8001d5c <Tick_Components>


    //creates and sends acknowledgement if a new command is received or 5 seconds have passed
    if (rx_buff[0] != 0xF0 || ticks >= 50) {
 8001c0a:	4b12      	ldr	r3, [pc, #72]	@ (8001c54 <main+0x100>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2bf0      	cmp	r3, #240	@ 0xf0
 8001c10:	d103      	bne.n	8001c1a <main+0xc6>
 8001c12:	4b16      	ldr	r3, [pc, #88]	@ (8001c6c <main+0x118>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2b31      	cmp	r3, #49	@ 0x31
 8001c18:	dd10      	ble.n	8001c3c <main+0xe8>
    	Create_Ack();
 8001c1a:	f7ff f919 	bl	8000e50 <Create_Ack>
    	tx_buff[0] = ack;
 8001c1e:	4b14      	ldr	r3, [pc, #80]	@ (8001c70 <main+0x11c>)
 8001c20:	781a      	ldrb	r2, [r3, #0]
 8001c22:	4b14      	ldr	r3, [pc, #80]	@ (8001c74 <main+0x120>)
 8001c24:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Transmit_IT(&huart3, tx_buff, 1);
 8001c26:	2201      	movs	r2, #1
 8001c28:	4912      	ldr	r1, [pc, #72]	@ (8001c74 <main+0x120>)
 8001c2a:	480b      	ldr	r0, [pc, #44]	@ (8001c58 <main+0x104>)
 8001c2c:	f002 fd8a 	bl	8004744 <HAL_UART_Transmit_IT>
    	ack = 0x00;
 8001c30:	4b0f      	ldr	r3, [pc, #60]	@ (8001c70 <main+0x11c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	701a      	strb	r2, [r3, #0]
    	ticks = 0;
 8001c36:	4b0d      	ldr	r3, [pc, #52]	@ (8001c6c <main+0x118>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
    }
//    HAL_GPIO_TogglePin(BUILTIN_LED_GPIO_Port, BUILTIN_LED_Pin);
    rx_buff[0] = 0xF0;
 8001c3c:	4b05      	ldr	r3, [pc, #20]	@ (8001c54 <main+0x100>)
 8001c3e:	22f0      	movs	r2, #240	@ 0xf0
 8001c40:	701a      	strb	r2, [r3, #0]
    ++ticks;
 8001c42:	4b0a      	ldr	r3, [pc, #40]	@ (8001c6c <main+0x118>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	3301      	adds	r3, #1
 8001c48:	4a08      	ldr	r2, [pc, #32]	@ (8001c6c <main+0x118>)
 8001c4a:	6013      	str	r3, [r2, #0]
    HAL_Delay(10);
 8001c4c:	200a      	movs	r0, #10
 8001c4e:	f000 fcd1 	bl	80025f4 <HAL_Delay>
	if (rx_buff[0] == ACTIVATE_SERVOS) {
 8001c52:	e794      	b.n	8001b7e <main+0x2a>
 8001c54:	200000a0 	.word	0x200000a0
 8001c58:	20000180 	.word	0x20000180
 8001c5c:	2000006a 	.word	0x2000006a
 8001c60:	20000069 	.word	0x20000069
 8001c64:	20000068 	.word	0x20000068
 8001c68:	2000006b 	.word	0x2000006b
 8001c6c:	20000064 	.word	0x20000064
 8001c70:	2000006c 	.word	0x2000006c
 8001c74:	200000a4 	.word	0x200000a4

08001c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b094      	sub	sp, #80	@ 0x50
 8001c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c7e:	f107 0320 	add.w	r3, r7, #32
 8001c82:	2230      	movs	r2, #48	@ 0x30
 8001c84:	2100      	movs	r1, #0
 8001c86:	4618      	mov	r0, r3
 8001c88:	f003 fccc 	bl	8005624 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c8c:	f107 030c 	add.w	r3, r7, #12
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]
 8001c94:	605a      	str	r2, [r3, #4]
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	60da      	str	r2, [r3, #12]
 8001c9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60bb      	str	r3, [r7, #8]
 8001ca0:	4b22      	ldr	r3, [pc, #136]	@ (8001d2c <SystemClock_Config+0xb4>)
 8001ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ca4:	4a21      	ldr	r2, [pc, #132]	@ (8001d2c <SystemClock_Config+0xb4>)
 8001ca6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001caa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001cac:	4b1f      	ldr	r3, [pc, #124]	@ (8001d2c <SystemClock_Config+0xb4>)
 8001cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cb4:	60bb      	str	r3, [r7, #8]
 8001cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001cb8:	2300      	movs	r3, #0
 8001cba:	607b      	str	r3, [r7, #4]
 8001cbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001d30 <SystemClock_Config+0xb8>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001d30 <SystemClock_Config+0xb8>)
 8001cc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cc6:	6013      	str	r3, [r2, #0]
 8001cc8:	4b19      	ldr	r3, [pc, #100]	@ (8001d30 <SystemClock_Config+0xb8>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cd0:	607b      	str	r3, [r7, #4]
 8001cd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001cdc:	2310      	movs	r3, #16
 8001cde:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f001 f801 	bl	8002cf0 <HAL_RCC_OscConfig>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d001      	beq.n	8001cf8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001cf4:	f000 f874 	bl	8001de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cf8:	230f      	movs	r3, #15
 8001cfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d00:	2300      	movs	r3, #0
 8001d02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001d04:	2300      	movs	r3, #0
 8001d06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001d0c:	f107 030c 	add.w	r3, r7, #12
 8001d10:	2100      	movs	r1, #0
 8001d12:	4618      	mov	r0, r3
 8001d14:	f001 fa64 	bl	80031e0 <HAL_RCC_ClockConfig>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001d1e:	f000 f85f 	bl	8001de0 <Error_Handler>
  }
}
 8001d22:	bf00      	nop
 8001d24:	3750      	adds	r7, #80	@ 0x50
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023800 	.word	0x40023800
 8001d30:	40007000 	.word	0x40007000

08001d34 <HAL_UART_RxCpltCallback>:



//received uart byte gets put into rx_buff and interrupt re-enabled
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  Tick_Components();
 8001d3c:	f000 f80e 	bl	8001d5c <Tick_Components>
  HAL_UART_Receive_IT(&huart3, rx_buff, 1);
 8001d40:	2201      	movs	r2, #1
 8001d42:	4904      	ldr	r1, [pc, #16]	@ (8001d54 <HAL_UART_RxCpltCallback+0x20>)
 8001d44:	4804      	ldr	r0, [pc, #16]	@ (8001d58 <HAL_UART_RxCpltCallback+0x24>)
 8001d46:	f002 fd42 	bl	80047ce <HAL_UART_Receive_IT>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200000a0 	.word	0x200000a0
 8001d58:	20000180 	.word	0x20000180

08001d5c <Tick_Components>:

void Tick_Components() {
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	//ticks calls servo functions if servos have been enabled and abort isn't enabled
	if (isServoEnabled && !isAborted) {
 8001d60:	4b17      	ldr	r3, [pc, #92]	@ (8001dc0 <Tick_Components+0x64>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d024      	beq.n	8001db2 <Tick_Components+0x56>
 8001d68:	4b16      	ldr	r3, [pc, #88]	@ (8001dc4 <Tick_Components+0x68>)
 8001d6a:	781b      	ldrb	r3, [r3, #0]
 8001d6c:	f083 0301 	eor.w	r3, r3, #1
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d01d      	beq.n	8001db2 <Tick_Components+0x56>
		Tick_NO2(rx_buff[0], &servos[3]);
 8001d76:	4b14      	ldr	r3, [pc, #80]	@ (8001dc8 <Tick_Components+0x6c>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	4914      	ldr	r1, [pc, #80]	@ (8001dcc <Tick_Components+0x70>)
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fd23 	bl	80017c8 <Tick_NO2>
		Tick_NO4(rx_buff[0], &servos[2]);
 8001d82:	4b11      	ldr	r3, [pc, #68]	@ (8001dc8 <Tick_Components+0x6c>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	4912      	ldr	r1, [pc, #72]	@ (8001dd0 <Tick_Components+0x74>)
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fb0f 	bl	80013ac <Tick_NO4>
		Tick_NO6(rx_buff[0], &servos[0]);
 8001d8e:	4b0e      	ldr	r3, [pc, #56]	@ (8001dc8 <Tick_Components+0x6c>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4910      	ldr	r1, [pc, #64]	@ (8001dd4 <Tick_Components+0x78>)
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff f9f7 	bl	8001188 <Tick_NO6>
		Tick_EO1(rx_buff[0], &servos[1]);
 8001d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001dc8 <Tick_Components+0x6c>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	490e      	ldr	r1, [pc, #56]	@ (8001dd8 <Tick_Components+0x7c>)
 8001da0:	4618      	mov	r0, r3
 8001da2:	f7ff f8db 	bl	8000f5c <Tick_EO1>
		Tick_NO3(rx_buff[0], &servos[4]);
 8001da6:	4b08      	ldr	r3, [pc, #32]	@ (8001dc8 <Tick_Components+0x6c>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	490c      	ldr	r1, [pc, #48]	@ (8001ddc <Tick_Components+0x80>)
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fc03 	bl	80015b8 <Tick_NO3>
	}
	Tick_Igniter(rx_buff[0]);
 8001db2:	4b05      	ldr	r3, [pc, #20]	@ (8001dc8 <Tick_Components+0x6c>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	4618      	mov	r0, r3
 8001db8:	f7ff fe0c 	bl	80019d4 <Tick_Igniter>
}
 8001dbc:	bf00      	nop
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	2000006a 	.word	0x2000006a
 8001dc4:	20000069 	.word	0x20000069
 8001dc8:	200000a0 	.word	0x200000a0
 8001dcc:	20000024 	.word	0x20000024
 8001dd0:	20000018 	.word	0x20000018
 8001dd4:	20000000 	.word	0x20000000
 8001dd8:	2000000c 	.word	0x2000000c
 8001ddc:	20000030 	.word	0x20000030

08001de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001de4:	b672      	cpsid	i
}
 8001de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <Error_Handler+0x8>

08001dec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	4b10      	ldr	r3, [pc, #64]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001df8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfa:	4a0f      	ldr	r2, [pc, #60]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001dfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e00:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e02:	4b0d      	ldr	r3, [pc, #52]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e0a:	607b      	str	r3, [r7, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	603b      	str	r3, [r7, #0]
 8001e12:	4b09      	ldr	r3, [pc, #36]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001e14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e16:	4a08      	ldr	r2, [pc, #32]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001e18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e1e:	4b06      	ldr	r3, [pc, #24]	@ (8001e38 <HAL_MspInit+0x4c>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e26:	603b      	str	r3, [r7, #0]
 8001e28:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800

08001e3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e40:	bf00      	nop
 8001e42:	e7fd      	b.n	8001e40 <NMI_Handler+0x4>

08001e44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e44:	b480      	push	{r7}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e48:	bf00      	nop
 8001e4a:	e7fd      	b.n	8001e48 <HardFault_Handler+0x4>

08001e4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e50:	bf00      	nop
 8001e52:	e7fd      	b.n	8001e50 <MemManage_Handler+0x4>

08001e54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e58:	bf00      	nop
 8001e5a:	e7fd      	b.n	8001e58 <BusFault_Handler+0x4>

08001e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e60:	bf00      	nop
 8001e62:	e7fd      	b.n	8001e60 <UsageFault_Handler+0x4>

08001e64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr

08001e72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7e:	4770      	bx	lr

08001e80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e84:	bf00      	nop
 8001e86:	46bd      	mov	sp, r7
 8001e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8c:	4770      	bx	lr

08001e8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e8e:	b580      	push	{r7, lr}
 8001e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e92:	f000 fb8f 	bl	80025b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
	...

08001e9c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ea0:	4802      	ldr	r0, [pc, #8]	@ (8001eac <USART3_IRQHandler+0x10>)
 8001ea2:	f002 fcc5 	bl	8004830 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	bd80      	pop	{r7, pc}
 8001eaa:	bf00      	nop
 8001eac:	20000180 	.word	0x20000180

08001eb0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <SystemInit+0x20>)
 8001eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eba:	4a05      	ldr	r2, [pc, #20]	@ (8001ed0 <SystemInit+0x20>)
 8001ebc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ec0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ec4:	bf00      	nop
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000ed00 	.word	0xe000ed00

08001ed4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b096      	sub	sp, #88	@ 0x58
 8001ed8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001eda:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ee8:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
 8001efc:	609a      	str	r2, [r3, #8]
 8001efe:	60da      	str	r2, [r3, #12]
 8001f00:	611a      	str	r2, [r3, #16]
 8001f02:	615a      	str	r2, [r3, #20]
 8001f04:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f06:	1d3b      	adds	r3, r7, #4
 8001f08:	2220      	movs	r2, #32
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f003 fb89 	bl	8005624 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f12:	4b3e      	ldr	r3, [pc, #248]	@ (800200c <MX_TIM1_Init+0x138>)
 8001f14:	4a3e      	ldr	r2, [pc, #248]	@ (8002010 <MX_TIM1_Init+0x13c>)
 8001f16:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 4;
 8001f18:	4b3c      	ldr	r3, [pc, #240]	@ (800200c <MX_TIM1_Init+0x138>)
 8001f1a:	2204      	movs	r2, #4
 8001f1c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f1e:	4b3b      	ldr	r3, [pc, #236]	@ (800200c <MX_TIM1_Init+0x138>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 63999;
 8001f24:	4b39      	ldr	r3, [pc, #228]	@ (800200c <MX_TIM1_Init+0x138>)
 8001f26:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8001f2a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f2c:	4b37      	ldr	r3, [pc, #220]	@ (800200c <MX_TIM1_Init+0x138>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f32:	4b36      	ldr	r3, [pc, #216]	@ (800200c <MX_TIM1_Init+0x138>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f38:	4b34      	ldr	r3, [pc, #208]	@ (800200c <MX_TIM1_Init+0x138>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001f3e:	4833      	ldr	r0, [pc, #204]	@ (800200c <MX_TIM1_Init+0x138>)
 8001f40:	f001 fb2e 	bl	80035a0 <HAL_TIM_Base_Init>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001f4a:	f7ff ff49 	bl	8001de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f4e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f52:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001f54:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001f58:	4619      	mov	r1, r3
 8001f5a:	482c      	ldr	r0, [pc, #176]	@ (800200c <MX_TIM1_Init+0x138>)
 8001f5c:	f001 fdc2 	bl	8003ae4 <HAL_TIM_ConfigClockSource>
 8001f60:	4603      	mov	r3, r0
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d001      	beq.n	8001f6a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001f66:	f7ff ff3b 	bl	8001de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f6a:	4828      	ldr	r0, [pc, #160]	@ (800200c <MX_TIM1_Init+0x138>)
 8001f6c:	f001 fb67 	bl	800363e <HAL_TIM_PWM_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001f76:	f7ff ff33 	bl	8001de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001f82:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001f86:	4619      	mov	r1, r3
 8001f88:	4820      	ldr	r0, [pc, #128]	@ (800200c <MX_TIM1_Init+0x138>)
 8001f8a:	f002 fa9b 	bl	80044c4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001f94:	f7ff ff24 	bl	8001de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f98:	2360      	movs	r3, #96	@ 0x60
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fac:	2300      	movs	r3, #0
 8001fae:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fb8:	2200      	movs	r2, #0
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4813      	ldr	r0, [pc, #76]	@ (800200c <MX_TIM1_Init+0x138>)
 8001fbe:	f001 fccf 	bl	8003960 <HAL_TIM_PWM_ConfigChannel>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d001      	beq.n	8001fcc <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001fc8:	f7ff ff0a 	bl	8001de0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001fe0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001fe4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001fea:	1d3b      	adds	r3, r7, #4
 8001fec:	4619      	mov	r1, r3
 8001fee:	4807      	ldr	r0, [pc, #28]	@ (800200c <MX_TIM1_Init+0x138>)
 8001ff0:	f002 fae4 	bl	80045bc <HAL_TIMEx_ConfigBreakDeadTime>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8001ffa:	f7ff fef1 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ffe:	4803      	ldr	r0, [pc, #12]	@ (800200c <MX_TIM1_Init+0x138>)
 8002000:	f000 f958 	bl	80022b4 <HAL_TIM_MspPostInit>

}
 8002004:	bf00      	nop
 8002006:	3758      	adds	r7, #88	@ 0x58
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	200000a8 	.word	0x200000a8
 8002010:	40010000 	.word	0x40010000

08002014 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08e      	sub	sp, #56	@ 0x38
 8002018:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800201a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800201e:	2200      	movs	r2, #0
 8002020:	601a      	str	r2, [r3, #0]
 8002022:	605a      	str	r2, [r3, #4]
 8002024:	609a      	str	r2, [r3, #8]
 8002026:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002028:	f107 0320 	add.w	r3, r7, #32
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002032:	1d3b      	adds	r3, r7, #4
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
 8002040:	615a      	str	r2, [r3, #20]
 8002042:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002044:	4b2c      	ldr	r3, [pc, #176]	@ (80020f8 <MX_TIM3_Init+0xe4>)
 8002046:	4a2d      	ldr	r2, [pc, #180]	@ (80020fc <MX_TIM3_Init+0xe8>)
 8002048:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 4;
 800204a:	4b2b      	ldr	r3, [pc, #172]	@ (80020f8 <MX_TIM3_Init+0xe4>)
 800204c:	2204      	movs	r2, #4
 800204e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002050:	4b29      	ldr	r3, [pc, #164]	@ (80020f8 <MX_TIM3_Init+0xe4>)
 8002052:	2200      	movs	r2, #0
 8002054:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 63999;
 8002056:	4b28      	ldr	r3, [pc, #160]	@ (80020f8 <MX_TIM3_Init+0xe4>)
 8002058:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 800205c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800205e:	4b26      	ldr	r3, [pc, #152]	@ (80020f8 <MX_TIM3_Init+0xe4>)
 8002060:	2200      	movs	r2, #0
 8002062:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002064:	4b24      	ldr	r3, [pc, #144]	@ (80020f8 <MX_TIM3_Init+0xe4>)
 8002066:	2200      	movs	r2, #0
 8002068:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800206a:	4823      	ldr	r0, [pc, #140]	@ (80020f8 <MX_TIM3_Init+0xe4>)
 800206c:	f001 fa98 	bl	80035a0 <HAL_TIM_Base_Init>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d001      	beq.n	800207a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002076:	f7ff feb3 	bl	8001de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800207a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800207e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002080:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002084:	4619      	mov	r1, r3
 8002086:	481c      	ldr	r0, [pc, #112]	@ (80020f8 <MX_TIM3_Init+0xe4>)
 8002088:	f001 fd2c 	bl	8003ae4 <HAL_TIM_ConfigClockSource>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002092:	f7ff fea5 	bl	8001de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002096:	4818      	ldr	r0, [pc, #96]	@ (80020f8 <MX_TIM3_Init+0xe4>)
 8002098:	f001 fad1 	bl	800363e <HAL_TIM_PWM_Init>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80020a2:	f7ff fe9d 	bl	8001de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020ae:	f107 0320 	add.w	r3, r7, #32
 80020b2:	4619      	mov	r1, r3
 80020b4:	4810      	ldr	r0, [pc, #64]	@ (80020f8 <MX_TIM3_Init+0xe4>)
 80020b6:	f002 fa05 	bl	80044c4 <HAL_TIMEx_MasterConfigSynchronization>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80020c0:	f7ff fe8e 	bl	8001de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020c4:	2360      	movs	r3, #96	@ 0x60
 80020c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020cc:	2300      	movs	r3, #0
 80020ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020d4:	1d3b      	adds	r3, r7, #4
 80020d6:	2200      	movs	r2, #0
 80020d8:	4619      	mov	r1, r3
 80020da:	4807      	ldr	r0, [pc, #28]	@ (80020f8 <MX_TIM3_Init+0xe4>)
 80020dc:	f001 fc40 	bl	8003960 <HAL_TIM_PWM_ConfigChannel>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80020e6:	f7ff fe7b 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80020ea:	4803      	ldr	r0, [pc, #12]	@ (80020f8 <MX_TIM3_Init+0xe4>)
 80020ec:	f000 f8e2 	bl	80022b4 <HAL_TIM_MspPostInit>

}
 80020f0:	bf00      	nop
 80020f2:	3738      	adds	r7, #56	@ 0x38
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	200000f0 	.word	0x200000f0
 80020fc:	40000400 	.word	0x40000400

08002100 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b08e      	sub	sp, #56	@ 0x38
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002106:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800210a:	2200      	movs	r2, #0
 800210c:	601a      	str	r2, [r3, #0]
 800210e:	605a      	str	r2, [r3, #4]
 8002110:	609a      	str	r2, [r3, #8]
 8002112:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002114:	f107 0320 	add.w	r3, r7, #32
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
 800211c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800211e:	1d3b      	adds	r3, r7, #4
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
 8002124:	605a      	str	r2, [r3, #4]
 8002126:	609a      	str	r2, [r3, #8]
 8002128:	60da      	str	r2, [r3, #12]
 800212a:	611a      	str	r2, [r3, #16]
 800212c:	615a      	str	r2, [r3, #20]
 800212e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002130:	4b37      	ldr	r3, [pc, #220]	@ (8002210 <MX_TIM4_Init+0x110>)
 8002132:	4a38      	ldr	r2, [pc, #224]	@ (8002214 <MX_TIM4_Init+0x114>)
 8002134:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 4;
 8002136:	4b36      	ldr	r3, [pc, #216]	@ (8002210 <MX_TIM4_Init+0x110>)
 8002138:	2204      	movs	r2, #4
 800213a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213c:	4b34      	ldr	r3, [pc, #208]	@ (8002210 <MX_TIM4_Init+0x110>)
 800213e:	2200      	movs	r2, #0
 8002140:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 63999;
 8002142:	4b33      	ldr	r3, [pc, #204]	@ (8002210 <MX_TIM4_Init+0x110>)
 8002144:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8002148:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214a:	4b31      	ldr	r3, [pc, #196]	@ (8002210 <MX_TIM4_Init+0x110>)
 800214c:	2200      	movs	r2, #0
 800214e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002150:	4b2f      	ldr	r3, [pc, #188]	@ (8002210 <MX_TIM4_Init+0x110>)
 8002152:	2200      	movs	r2, #0
 8002154:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002156:	482e      	ldr	r0, [pc, #184]	@ (8002210 <MX_TIM4_Init+0x110>)
 8002158:	f001 fa22 	bl	80035a0 <HAL_TIM_Base_Init>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d001      	beq.n	8002166 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002162:	f7ff fe3d 	bl	8001de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002166:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800216a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800216c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002170:	4619      	mov	r1, r3
 8002172:	4827      	ldr	r0, [pc, #156]	@ (8002210 <MX_TIM4_Init+0x110>)
 8002174:	f001 fcb6 	bl	8003ae4 <HAL_TIM_ConfigClockSource>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800217e:	f7ff fe2f 	bl	8001de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002182:	4823      	ldr	r0, [pc, #140]	@ (8002210 <MX_TIM4_Init+0x110>)
 8002184:	f001 fa5b 	bl	800363e <HAL_TIM_PWM_Init>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800218e:	f7ff fe27 	bl	8001de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800219a:	f107 0320 	add.w	r3, r7, #32
 800219e:	4619      	mov	r1, r3
 80021a0:	481b      	ldr	r0, [pc, #108]	@ (8002210 <MX_TIM4_Init+0x110>)
 80021a2:	f002 f98f 	bl	80044c4 <HAL_TIMEx_MasterConfigSynchronization>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d001      	beq.n	80021b0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80021ac:	f7ff fe18 	bl	8001de0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021b0:	2360      	movs	r3, #96	@ 0x60
 80021b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021b4:	2300      	movs	r3, #0
 80021b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021b8:	2300      	movs	r3, #0
 80021ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021c0:	1d3b      	adds	r3, r7, #4
 80021c2:	2200      	movs	r2, #0
 80021c4:	4619      	mov	r1, r3
 80021c6:	4812      	ldr	r0, [pc, #72]	@ (8002210 <MX_TIM4_Init+0x110>)
 80021c8:	f001 fbca 	bl	8003960 <HAL_TIM_PWM_ConfigChannel>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80021d2:	f7ff fe05 	bl	8001de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80021d6:	1d3b      	adds	r3, r7, #4
 80021d8:	2204      	movs	r2, #4
 80021da:	4619      	mov	r1, r3
 80021dc:	480c      	ldr	r0, [pc, #48]	@ (8002210 <MX_TIM4_Init+0x110>)
 80021de:	f001 fbbf 	bl	8003960 <HAL_TIM_PWM_ConfigChannel>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80021e8:	f7ff fdfa 	bl	8001de0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80021ec:	1d3b      	adds	r3, r7, #4
 80021ee:	2208      	movs	r2, #8
 80021f0:	4619      	mov	r1, r3
 80021f2:	4807      	ldr	r0, [pc, #28]	@ (8002210 <MX_TIM4_Init+0x110>)
 80021f4:	f001 fbb4 	bl	8003960 <HAL_TIM_PWM_ConfigChannel>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80021fe:	f7ff fdef 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002202:	4803      	ldr	r0, [pc, #12]	@ (8002210 <MX_TIM4_Init+0x110>)
 8002204:	f000 f856 	bl	80022b4 <HAL_TIM_MspPostInit>

}
 8002208:	bf00      	nop
 800220a:	3738      	adds	r7, #56	@ 0x38
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000138 	.word	0x20000138
 8002214:	40000800 	.word	0x40000800

08002218 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002218:	b480      	push	{r7}
 800221a:	b087      	sub	sp, #28
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a1f      	ldr	r2, [pc, #124]	@ (80022a4 <HAL_TIM_Base_MspInit+0x8c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d10e      	bne.n	8002248 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]
 800222e:	4b1e      	ldr	r3, [pc, #120]	@ (80022a8 <HAL_TIM_Base_MspInit+0x90>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002232:	4a1d      	ldr	r2, [pc, #116]	@ (80022a8 <HAL_TIM_Base_MspInit+0x90>)
 8002234:	f043 0301 	orr.w	r3, r3, #1
 8002238:	6453      	str	r3, [r2, #68]	@ 0x44
 800223a:	4b1b      	ldr	r3, [pc, #108]	@ (80022a8 <HAL_TIM_Base_MspInit+0x90>)
 800223c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223e:	f003 0301 	and.w	r3, r3, #1
 8002242:	617b      	str	r3, [r7, #20]
 8002244:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002246:	e026      	b.n	8002296 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM3)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a17      	ldr	r2, [pc, #92]	@ (80022ac <HAL_TIM_Base_MspInit+0x94>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d10e      	bne.n	8002270 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	613b      	str	r3, [r7, #16]
 8002256:	4b14      	ldr	r3, [pc, #80]	@ (80022a8 <HAL_TIM_Base_MspInit+0x90>)
 8002258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225a:	4a13      	ldr	r2, [pc, #76]	@ (80022a8 <HAL_TIM_Base_MspInit+0x90>)
 800225c:	f043 0302 	orr.w	r3, r3, #2
 8002260:	6413      	str	r3, [r2, #64]	@ 0x40
 8002262:	4b11      	ldr	r3, [pc, #68]	@ (80022a8 <HAL_TIM_Base_MspInit+0x90>)
 8002264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002266:	f003 0302 	and.w	r3, r3, #2
 800226a:	613b      	str	r3, [r7, #16]
 800226c:	693b      	ldr	r3, [r7, #16]
}
 800226e:	e012      	b.n	8002296 <HAL_TIM_Base_MspInit+0x7e>
  else if(tim_baseHandle->Instance==TIM4)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a0e      	ldr	r2, [pc, #56]	@ (80022b0 <HAL_TIM_Base_MspInit+0x98>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d10d      	bne.n	8002296 <HAL_TIM_Base_MspInit+0x7e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800227a:	2300      	movs	r3, #0
 800227c:	60fb      	str	r3, [r7, #12]
 800227e:	4b0a      	ldr	r3, [pc, #40]	@ (80022a8 <HAL_TIM_Base_MspInit+0x90>)
 8002280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002282:	4a09      	ldr	r2, [pc, #36]	@ (80022a8 <HAL_TIM_Base_MspInit+0x90>)
 8002284:	f043 0304 	orr.w	r3, r3, #4
 8002288:	6413      	str	r3, [r2, #64]	@ 0x40
 800228a:	4b07      	ldr	r3, [pc, #28]	@ (80022a8 <HAL_TIM_Base_MspInit+0x90>)
 800228c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228e:	f003 0304 	and.w	r3, r3, #4
 8002292:	60fb      	str	r3, [r7, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
}
 8002296:	bf00      	nop
 8002298:	371c      	adds	r7, #28
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	40010000 	.word	0x40010000
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40000400 	.word	0x40000400
 80022b0:	40000800 	.word	0x40000800

080022b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	@ 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a37      	ldr	r2, [pc, #220]	@ (80023b0 <HAL_TIM_MspPostInit+0xfc>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d11f      	bne.n	8002316 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b36      	ldr	r3, [pc, #216]	@ (80023b4 <HAL_TIM_MspPostInit+0x100>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	4a35      	ldr	r2, [pc, #212]	@ (80023b4 <HAL_TIM_MspPostInit+0x100>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e6:	4b33      	ldr	r3, [pc, #204]	@ (80023b4 <HAL_TIM_MspPostInit+0x100>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PB13     ------> TIM1_CH1N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80022f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80022f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f8:	2302      	movs	r3, #2
 80022fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fc:	2300      	movs	r3, #0
 80022fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002300:	2300      	movs	r3, #0
 8002302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002304:	2301      	movs	r3, #1
 8002306:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002308:	f107 0314 	add.w	r3, r7, #20
 800230c:	4619      	mov	r1, r3
 800230e:	482a      	ldr	r0, [pc, #168]	@ (80023b8 <HAL_TIM_MspPostInit+0x104>)
 8002310:	f000 fb38 	bl	8002984 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002314:	e047      	b.n	80023a6 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM3)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a28      	ldr	r2, [pc, #160]	@ (80023bc <HAL_TIM_MspPostInit+0x108>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d11e      	bne.n	800235e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002320:	2300      	movs	r3, #0
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	4b23      	ldr	r3, [pc, #140]	@ (80023b4 <HAL_TIM_MspPostInit+0x100>)
 8002326:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002328:	4a22      	ldr	r2, [pc, #136]	@ (80023b4 <HAL_TIM_MspPostInit+0x100>)
 800232a:	f043 0304 	orr.w	r3, r3, #4
 800232e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002330:	4b20      	ldr	r3, [pc, #128]	@ (80023b4 <HAL_TIM_MspPostInit+0x100>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002334:	f003 0304 	and.w	r3, r3, #4
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800233c:	2340      	movs	r3, #64	@ 0x40
 800233e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002340:	2302      	movs	r3, #2
 8002342:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002344:	2300      	movs	r3, #0
 8002346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002348:	2300      	movs	r3, #0
 800234a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800234c:	2302      	movs	r3, #2
 800234e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002350:	f107 0314 	add.w	r3, r7, #20
 8002354:	4619      	mov	r1, r3
 8002356:	481a      	ldr	r0, [pc, #104]	@ (80023c0 <HAL_TIM_MspPostInit+0x10c>)
 8002358:	f000 fb14 	bl	8002984 <HAL_GPIO_Init>
}
 800235c:	e023      	b.n	80023a6 <HAL_TIM_MspPostInit+0xf2>
  else if(timHandle->Instance==TIM4)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a18      	ldr	r2, [pc, #96]	@ (80023c4 <HAL_TIM_MspPostInit+0x110>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d11e      	bne.n	80023a6 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002368:	2300      	movs	r3, #0
 800236a:	60bb      	str	r3, [r7, #8]
 800236c:	4b11      	ldr	r3, [pc, #68]	@ (80023b4 <HAL_TIM_MspPostInit+0x100>)
 800236e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002370:	4a10      	ldr	r2, [pc, #64]	@ (80023b4 <HAL_TIM_MspPostInit+0x100>)
 8002372:	f043 0302 	orr.w	r3, r3, #2
 8002376:	6313      	str	r3, [r2, #48]	@ 0x30
 8002378:	4b0e      	ldr	r3, [pc, #56]	@ (80023b4 <HAL_TIM_MspPostInit+0x100>)
 800237a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8002384:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8002388:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800238a:	2302      	movs	r3, #2
 800238c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002396:	2302      	movs	r3, #2
 8002398:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	4805      	ldr	r0, [pc, #20]	@ (80023b8 <HAL_TIM_MspPostInit+0x104>)
 80023a2:	f000 faef 	bl	8002984 <HAL_GPIO_Init>
}
 80023a6:	bf00      	nop
 80023a8:	3728      	adds	r7, #40	@ 0x28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40010000 	.word	0x40010000
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020400 	.word	0x40020400
 80023bc:	40000400 	.word	0x40000400
 80023c0:	40020800 	.word	0x40020800
 80023c4:	40000800 	.word	0x40000800

080023c8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80023cc:	4b11      	ldr	r3, [pc, #68]	@ (8002414 <MX_USART3_UART_Init+0x4c>)
 80023ce:	4a12      	ldr	r2, [pc, #72]	@ (8002418 <MX_USART3_UART_Init+0x50>)
 80023d0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80023d2:	4b10      	ldr	r3, [pc, #64]	@ (8002414 <MX_USART3_UART_Init+0x4c>)
 80023d4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80023d8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023da:	4b0e      	ldr	r3, [pc, #56]	@ (8002414 <MX_USART3_UART_Init+0x4c>)
 80023dc:	2200      	movs	r2, #0
 80023de:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023e0:	4b0c      	ldr	r3, [pc, #48]	@ (8002414 <MX_USART3_UART_Init+0x4c>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <MX_USART3_UART_Init+0x4c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023ec:	4b09      	ldr	r3, [pc, #36]	@ (8002414 <MX_USART3_UART_Init+0x4c>)
 80023ee:	220c      	movs	r2, #12
 80023f0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023f2:	4b08      	ldr	r3, [pc, #32]	@ (8002414 <MX_USART3_UART_Init+0x4c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023f8:	4b06      	ldr	r3, [pc, #24]	@ (8002414 <MX_USART3_UART_Init+0x4c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023fe:	4805      	ldr	r0, [pc, #20]	@ (8002414 <MX_USART3_UART_Init+0x4c>)
 8002400:	f002 f953 	bl	80046aa <HAL_UART_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800240a:	f7ff fce9 	bl	8001de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	20000180 	.word	0x20000180
 8002418:	40004800 	.word	0x40004800

0800241c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b08a      	sub	sp, #40	@ 0x28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002424:	f107 0314 	add.w	r3, r7, #20
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]
 800242c:	605a      	str	r2, [r3, #4]
 800242e:	609a      	str	r2, [r3, #8]
 8002430:	60da      	str	r2, [r3, #12]
 8002432:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a1d      	ldr	r2, [pc, #116]	@ (80024b0 <HAL_UART_MspInit+0x94>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d134      	bne.n	80024a8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	613b      	str	r3, [r7, #16]
 8002442:	4b1c      	ldr	r3, [pc, #112]	@ (80024b4 <HAL_UART_MspInit+0x98>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002446:	4a1b      	ldr	r2, [pc, #108]	@ (80024b4 <HAL_UART_MspInit+0x98>)
 8002448:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800244c:	6413      	str	r3, [r2, #64]	@ 0x40
 800244e:	4b19      	ldr	r3, [pc, #100]	@ (80024b4 <HAL_UART_MspInit+0x98>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002452:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002456:	613b      	str	r3, [r7, #16]
 8002458:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800245a:	2300      	movs	r3, #0
 800245c:	60fb      	str	r3, [r7, #12]
 800245e:	4b15      	ldr	r3, [pc, #84]	@ (80024b4 <HAL_UART_MspInit+0x98>)
 8002460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002462:	4a14      	ldr	r2, [pc, #80]	@ (80024b4 <HAL_UART_MspInit+0x98>)
 8002464:	f043 0302 	orr.w	r3, r3, #2
 8002468:	6313      	str	r3, [r2, #48]	@ 0x30
 800246a:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <HAL_UART_MspInit+0x98>)
 800246c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002476:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800247a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247c:	2302      	movs	r3, #2
 800247e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002480:	2300      	movs	r3, #0
 8002482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002484:	2303      	movs	r3, #3
 8002486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002488:	2307      	movs	r3, #7
 800248a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248c:	f107 0314 	add.w	r3, r7, #20
 8002490:	4619      	mov	r1, r3
 8002492:	4809      	ldr	r0, [pc, #36]	@ (80024b8 <HAL_UART_MspInit+0x9c>)
 8002494:	f000 fa76 	bl	8002984 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	2027      	movs	r0, #39	@ 0x27
 800249e:	f000 f9a8 	bl	80027f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80024a2:	2027      	movs	r0, #39	@ 0x27
 80024a4:	f000 f9c1 	bl	800282a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80024a8:	bf00      	nop
 80024aa:	3728      	adds	r7, #40	@ 0x28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	40004800 	.word	0x40004800
 80024b4:	40023800 	.word	0x40023800
 80024b8:	40020400 	.word	0x40020400

080024bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024bc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80024c0:	480d      	ldr	r0, [pc, #52]	@ (80024f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80024c2:	490e      	ldr	r1, [pc, #56]	@ (80024fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80024c4:	4a0e      	ldr	r2, [pc, #56]	@ (8002500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80024c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c8:	e002      	b.n	80024d0 <LoopCopyDataInit>

080024ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024ce:	3304      	adds	r3, #4

080024d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024d4:	d3f9      	bcc.n	80024ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024d6:	4a0b      	ldr	r2, [pc, #44]	@ (8002504 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80024d8:	4c0b      	ldr	r4, [pc, #44]	@ (8002508 <LoopFillZerobss+0x26>)
  movs r3, #0
 80024da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024dc:	e001      	b.n	80024e2 <LoopFillZerobss>

080024de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024e0:	3204      	adds	r2, #4

080024e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024e4:	d3fb      	bcc.n	80024de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80024e6:	f7ff fce3 	bl	8001eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80024ea:	f003 f8a3 	bl	8005634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024ee:	f7ff fb31 	bl	8001b54 <main>
  bx  lr    
 80024f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80024f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80024f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024fc:	20000048 	.word	0x20000048
  ldr r2, =_sidata
 8002500:	080056d0 	.word	0x080056d0
  ldr r2, =_sbss
 8002504:	20000048 	.word	0x20000048
  ldr r4, =_ebss
 8002508:	200001c8 	.word	0x200001c8

0800250c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800250c:	e7fe      	b.n	800250c <ADC_IRQHandler>
	...

08002510 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002514:	4b0e      	ldr	r3, [pc, #56]	@ (8002550 <HAL_Init+0x40>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0d      	ldr	r2, [pc, #52]	@ (8002550 <HAL_Init+0x40>)
 800251a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800251e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002520:	4b0b      	ldr	r3, [pc, #44]	@ (8002550 <HAL_Init+0x40>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a0a      	ldr	r2, [pc, #40]	@ (8002550 <HAL_Init+0x40>)
 8002526:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800252a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800252c:	4b08      	ldr	r3, [pc, #32]	@ (8002550 <HAL_Init+0x40>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a07      	ldr	r2, [pc, #28]	@ (8002550 <HAL_Init+0x40>)
 8002532:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002536:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002538:	2003      	movs	r0, #3
 800253a:	f000 f94f 	bl	80027dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800253e:	200f      	movs	r0, #15
 8002540:	f000 f808 	bl	8002554 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002544:	f7ff fc52 	bl	8001dec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40023c00 	.word	0x40023c00

08002554 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b082      	sub	sp, #8
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800255c:	4b12      	ldr	r3, [pc, #72]	@ (80025a8 <HAL_InitTick+0x54>)
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	4b12      	ldr	r3, [pc, #72]	@ (80025ac <HAL_InitTick+0x58>)
 8002562:	781b      	ldrb	r3, [r3, #0]
 8002564:	4619      	mov	r1, r3
 8002566:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800256a:	fbb3 f3f1 	udiv	r3, r3, r1
 800256e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f967 	bl	8002846 <HAL_SYSTICK_Config>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e00e      	b.n	80025a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2b0f      	cmp	r3, #15
 8002586:	d80a      	bhi.n	800259e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002588:	2200      	movs	r2, #0
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	f04f 30ff 	mov.w	r0, #4294967295
 8002590:	f000 f92f 	bl	80027f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002594:	4a06      	ldr	r2, [pc, #24]	@ (80025b0 <HAL_InitTick+0x5c>)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	e000      	b.n	80025a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800259e:	2301      	movs	r3, #1
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3708      	adds	r7, #8
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	2000003c 	.word	0x2000003c
 80025ac:	20000044 	.word	0x20000044
 80025b0:	20000040 	.word	0x20000040

080025b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025b8:	4b06      	ldr	r3, [pc, #24]	@ (80025d4 <HAL_IncTick+0x20>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	4b06      	ldr	r3, [pc, #24]	@ (80025d8 <HAL_IncTick+0x24>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4413      	add	r3, r2
 80025c4:	4a04      	ldr	r2, [pc, #16]	@ (80025d8 <HAL_IncTick+0x24>)
 80025c6:	6013      	str	r3, [r2, #0]
}
 80025c8:	bf00      	nop
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	20000044 	.word	0x20000044
 80025d8:	200001c4 	.word	0x200001c4

080025dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  return uwTick;
 80025e0:	4b03      	ldr	r3, [pc, #12]	@ (80025f0 <HAL_GetTick+0x14>)
 80025e2:	681b      	ldr	r3, [r3, #0]
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	200001c4 	.word	0x200001c4

080025f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025fc:	f7ff ffee 	bl	80025dc <HAL_GetTick>
 8002600:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260c:	d005      	beq.n	800261a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800260e:	4b0a      	ldr	r3, [pc, #40]	@ (8002638 <HAL_Delay+0x44>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	461a      	mov	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4413      	add	r3, r2
 8002618:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800261a:	bf00      	nop
 800261c:	f7ff ffde 	bl	80025dc <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	68fa      	ldr	r2, [r7, #12]
 8002628:	429a      	cmp	r2, r3
 800262a:	d8f7      	bhi.n	800261c <HAL_Delay+0x28>
  {
  }
}
 800262c:	bf00      	nop
 800262e:	bf00      	nop
 8002630:	3710      	adds	r7, #16
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	20000044 	.word	0x20000044

0800263c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800264c:	4b0c      	ldr	r3, [pc, #48]	@ (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002658:	4013      	ands	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002664:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800266c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800266e:	4a04      	ldr	r2, [pc, #16]	@ (8002680 <__NVIC_SetPriorityGrouping+0x44>)
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	60d3      	str	r3, [r2, #12]
}
 8002674:	bf00      	nop
 8002676:	3714      	adds	r7, #20
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	e000ed00 	.word	0xe000ed00

08002684 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002684:	b480      	push	{r7}
 8002686:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002688:	4b04      	ldr	r3, [pc, #16]	@ (800269c <__NVIC_GetPriorityGrouping+0x18>)
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	0a1b      	lsrs	r3, r3, #8
 800268e:	f003 0307 	and.w	r3, r3, #7
}
 8002692:	4618      	mov	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr
 800269c:	e000ed00 	.word	0xe000ed00

080026a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b083      	sub	sp, #12
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	4603      	mov	r3, r0
 80026a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	db0b      	blt.n	80026ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026b2:	79fb      	ldrb	r3, [r7, #7]
 80026b4:	f003 021f 	and.w	r2, r3, #31
 80026b8:	4907      	ldr	r1, [pc, #28]	@ (80026d8 <__NVIC_EnableIRQ+0x38>)
 80026ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026be:	095b      	lsrs	r3, r3, #5
 80026c0:	2001      	movs	r0, #1
 80026c2:	fa00 f202 	lsl.w	r2, r0, r2
 80026c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026ca:	bf00      	nop
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	e000e100 	.word	0xe000e100

080026dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	6039      	str	r1, [r7, #0]
 80026e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	db0a      	blt.n	8002706 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	490c      	ldr	r1, [pc, #48]	@ (8002728 <__NVIC_SetPriority+0x4c>)
 80026f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026fa:	0112      	lsls	r2, r2, #4
 80026fc:	b2d2      	uxtb	r2, r2
 80026fe:	440b      	add	r3, r1
 8002700:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002704:	e00a      	b.n	800271c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	b2da      	uxtb	r2, r3
 800270a:	4908      	ldr	r1, [pc, #32]	@ (800272c <__NVIC_SetPriority+0x50>)
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	3b04      	subs	r3, #4
 8002714:	0112      	lsls	r2, r2, #4
 8002716:	b2d2      	uxtb	r2, r2
 8002718:	440b      	add	r3, r1
 800271a:	761a      	strb	r2, [r3, #24]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	e000e100 	.word	0xe000e100
 800272c:	e000ed00 	.word	0xe000ed00

08002730 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	@ 0x24
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0307 	and.w	r3, r3, #7
 8002742:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	f1c3 0307 	rsb	r3, r3, #7
 800274a:	2b04      	cmp	r3, #4
 800274c:	bf28      	it	cs
 800274e:	2304      	movcs	r3, #4
 8002750:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3304      	adds	r3, #4
 8002756:	2b06      	cmp	r3, #6
 8002758:	d902      	bls.n	8002760 <NVIC_EncodePriority+0x30>
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3b03      	subs	r3, #3
 800275e:	e000      	b.n	8002762 <NVIC_EncodePriority+0x32>
 8002760:	2300      	movs	r3, #0
 8002762:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002764:	f04f 32ff 	mov.w	r2, #4294967295
 8002768:	69bb      	ldr	r3, [r7, #24]
 800276a:	fa02 f303 	lsl.w	r3, r2, r3
 800276e:	43da      	mvns	r2, r3
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	401a      	ands	r2, r3
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002778:	f04f 31ff 	mov.w	r1, #4294967295
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	fa01 f303 	lsl.w	r3, r1, r3
 8002782:	43d9      	mvns	r1, r3
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002788:	4313      	orrs	r3, r2
         );
}
 800278a:	4618      	mov	r0, r3
 800278c:	3724      	adds	r7, #36	@ 0x24
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80027a8:	d301      	bcc.n	80027ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027aa:	2301      	movs	r3, #1
 80027ac:	e00f      	b.n	80027ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027ae:	4a0a      	ldr	r2, [pc, #40]	@ (80027d8 <SysTick_Config+0x40>)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	3b01      	subs	r3, #1
 80027b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027b6:	210f      	movs	r1, #15
 80027b8:	f04f 30ff 	mov.w	r0, #4294967295
 80027bc:	f7ff ff8e 	bl	80026dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c0:	4b05      	ldr	r3, [pc, #20]	@ (80027d8 <SysTick_Config+0x40>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027c6:	4b04      	ldr	r3, [pc, #16]	@ (80027d8 <SysTick_Config+0x40>)
 80027c8:	2207      	movs	r2, #7
 80027ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3708      	adds	r7, #8
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	e000e010 	.word	0xe000e010

080027dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ff29 	bl	800263c <__NVIC_SetPriorityGrouping>
}
 80027ea:	bf00      	nop
 80027ec:	3708      	adds	r7, #8
 80027ee:	46bd      	mov	sp, r7
 80027f0:	bd80      	pop	{r7, pc}

080027f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f2:	b580      	push	{r7, lr}
 80027f4:	b086      	sub	sp, #24
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	4603      	mov	r3, r0
 80027fa:	60b9      	str	r1, [r7, #8]
 80027fc:	607a      	str	r2, [r7, #4]
 80027fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002804:	f7ff ff3e 	bl	8002684 <__NVIC_GetPriorityGrouping>
 8002808:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	68b9      	ldr	r1, [r7, #8]
 800280e:	6978      	ldr	r0, [r7, #20]
 8002810:	f7ff ff8e 	bl	8002730 <NVIC_EncodePriority>
 8002814:	4602      	mov	r2, r0
 8002816:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800281a:	4611      	mov	r1, r2
 800281c:	4618      	mov	r0, r3
 800281e:	f7ff ff5d 	bl	80026dc <__NVIC_SetPriority>
}
 8002822:	bf00      	nop
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}

0800282a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800282a:	b580      	push	{r7, lr}
 800282c:	b082      	sub	sp, #8
 800282e:	af00      	add	r7, sp, #0
 8002830:	4603      	mov	r3, r0
 8002832:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002838:	4618      	mov	r0, r3
 800283a:	f7ff ff31 	bl	80026a0 <__NVIC_EnableIRQ>
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b082      	sub	sp, #8
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f7ff ffa2 	bl	8002798 <SysTick_Config>
 8002854:	4603      	mov	r3, r0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3708      	adds	r7, #8
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}

0800285e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800285e:	b580      	push	{r7, lr}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
 8002864:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800286c:	f7ff feb6 	bl	80025dc <HAL_GetTick>
 8002870:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002878:	b2db      	uxtb	r3, r3
 800287a:	2b02      	cmp	r3, #2
 800287c:	d008      	beq.n	8002890 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2280      	movs	r2, #128	@ 0x80
 8002882:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	e052      	b.n	8002936 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f022 0216 	bic.w	r2, r2, #22
 800289e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	695a      	ldr	r2, [r3, #20]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80028ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d103      	bne.n	80028c0 <HAL_DMA_Abort+0x62>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d007      	beq.n	80028d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f022 0208 	bic.w	r2, r2, #8
 80028ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f022 0201 	bic.w	r2, r2, #1
 80028de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028e0:	e013      	b.n	800290a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028e2:	f7ff fe7b 	bl	80025dc <HAL_GetTick>
 80028e6:	4602      	mov	r2, r0
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	1ad3      	subs	r3, r2, r3
 80028ec:	2b05      	cmp	r3, #5
 80028ee:	d90c      	bls.n	800290a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2220      	movs	r2, #32
 80028f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2203      	movs	r2, #3
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e015      	b.n	8002936 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1e4      	bne.n	80028e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800291c:	223f      	movs	r2, #63	@ 0x3f
 800291e:	409a      	lsls	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}

0800293e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d004      	beq.n	800295c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2280      	movs	r2, #128	@ 0x80
 8002956:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e00c      	b.n	8002976 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2205      	movs	r2, #5
 8002960:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f022 0201 	bic.w	r2, r2, #1
 8002972:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
	...

08002984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	@ 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	e16b      	b.n	8002c78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029a0:	2201      	movs	r2, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	f040 815a 	bne.w	8002c72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d005      	beq.n	80029d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d130      	bne.n	8002a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	689b      	ldr	r3, [r3, #8]
 80029da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029dc:	69fb      	ldr	r3, [r7, #28]
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	2203      	movs	r2, #3
 80029e2:	fa02 f303 	lsl.w	r3, r2, r3
 80029e6:	43db      	mvns	r3, r3
 80029e8:	69ba      	ldr	r2, [r7, #24]
 80029ea:	4013      	ands	r3, r2
 80029ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	fa02 f303 	lsl.w	r3, r2, r3
 80029fa:	69ba      	ldr	r2, [r7, #24]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa02 f303 	lsl.w	r3, r2, r3
 8002a14:	43db      	mvns	r3, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	091b      	lsrs	r3, r3, #4
 8002a22:	f003 0201 	and.w	r2, r3, #1
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	2b03      	cmp	r3, #3
 8002a42:	d017      	beq.n	8002a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2203      	movs	r2, #3
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	69ba      	ldr	r2, [r7, #24]
 8002a58:	4013      	ands	r3, r2
 8002a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	fa02 f303 	lsl.w	r3, r2, r3
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	69ba      	ldr	r2, [r7, #24]
 8002a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	685b      	ldr	r3, [r3, #4]
 8002a78:	f003 0303 	and.w	r3, r3, #3
 8002a7c:	2b02      	cmp	r3, #2
 8002a7e:	d123      	bne.n	8002ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	08da      	lsrs	r2, r3, #3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3208      	adds	r2, #8
 8002a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	220f      	movs	r2, #15
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	08da      	lsrs	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3208      	adds	r2, #8
 8002ac2:	69b9      	ldr	r1, [r7, #24]
 8002ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0203 	and.w	r2, r3, #3
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80b4 	beq.w	8002c72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	4b60      	ldr	r3, [pc, #384]	@ (8002c90 <HAL_GPIO_Init+0x30c>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	4a5f      	ldr	r2, [pc, #380]	@ (8002c90 <HAL_GPIO_Init+0x30c>)
 8002b14:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c90 <HAL_GPIO_Init+0x30c>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b26:	4a5b      	ldr	r2, [pc, #364]	@ (8002c94 <HAL_GPIO_Init+0x310>)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	220f      	movs	r2, #15
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a52      	ldr	r2, [pc, #328]	@ (8002c98 <HAL_GPIO_Init+0x314>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d02b      	beq.n	8002baa <HAL_GPIO_Init+0x226>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a51      	ldr	r2, [pc, #324]	@ (8002c9c <HAL_GPIO_Init+0x318>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d025      	beq.n	8002ba6 <HAL_GPIO_Init+0x222>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a50      	ldr	r2, [pc, #320]	@ (8002ca0 <HAL_GPIO_Init+0x31c>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01f      	beq.n	8002ba2 <HAL_GPIO_Init+0x21e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4f      	ldr	r2, [pc, #316]	@ (8002ca4 <HAL_GPIO_Init+0x320>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d019      	beq.n	8002b9e <HAL_GPIO_Init+0x21a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4e      	ldr	r2, [pc, #312]	@ (8002ca8 <HAL_GPIO_Init+0x324>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_GPIO_Init+0x216>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4d      	ldr	r2, [pc, #308]	@ (8002cac <HAL_GPIO_Init+0x328>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00d      	beq.n	8002b96 <HAL_GPIO_Init+0x212>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4c      	ldr	r2, [pc, #304]	@ (8002cb0 <HAL_GPIO_Init+0x32c>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <HAL_GPIO_Init+0x20e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4b      	ldr	r2, [pc, #300]	@ (8002cb4 <HAL_GPIO_Init+0x330>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d101      	bne.n	8002b8e <HAL_GPIO_Init+0x20a>
 8002b8a:	2307      	movs	r3, #7
 8002b8c:	e00e      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b8e:	2308      	movs	r3, #8
 8002b90:	e00c      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b92:	2306      	movs	r3, #6
 8002b94:	e00a      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b96:	2305      	movs	r3, #5
 8002b98:	e008      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b9a:	2304      	movs	r3, #4
 8002b9c:	e006      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e004      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e002      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002baa:	2300      	movs	r3, #0
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	f002 0203 	and.w	r2, r2, #3
 8002bb2:	0092      	lsls	r2, r2, #2
 8002bb4:	4093      	lsls	r3, r2
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bbc:	4935      	ldr	r1, [pc, #212]	@ (8002c94 <HAL_GPIO_Init+0x310>)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bca:	4b3b      	ldr	r3, [pc, #236]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bee:	4a32      	ldr	r2, [pc, #200]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002bf4:	4b30      	ldr	r3, [pc, #192]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002bf6:	68db      	ldr	r3, [r3, #12]
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c18:	4a27      	ldr	r2, [pc, #156]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c1e:	4b26      	ldr	r3, [pc, #152]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c42:	4a1d      	ldr	r2, [pc, #116]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c48:	4b1b      	ldr	r3, [pc, #108]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c6c:	4a12      	ldr	r2, [pc, #72]	@ (8002cb8 <HAL_GPIO_Init+0x334>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3301      	adds	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b0f      	cmp	r3, #15
 8002c7c:	f67f ae90 	bls.w	80029a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c80:	bf00      	nop
 8002c82:	bf00      	nop
 8002c84:	3724      	adds	r7, #36	@ 0x24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40013800 	.word	0x40013800
 8002c98:	40020000 	.word	0x40020000
 8002c9c:	40020400 	.word	0x40020400
 8002ca0:	40020800 	.word	0x40020800
 8002ca4:	40020c00 	.word	0x40020c00
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	40021400 	.word	0x40021400
 8002cb0:	40021800 	.word	0x40021800
 8002cb4:	40021c00 	.word	0x40021c00
 8002cb8:	40013c00 	.word	0x40013c00

08002cbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ccc:	787b      	ldrb	r3, [r7, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d003      	beq.n	8002cda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cd2:	887a      	ldrh	r2, [r7, #2]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cd8:	e003      	b.n	8002ce2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cda:	887b      	ldrh	r3, [r7, #2]
 8002cdc:	041a      	lsls	r2, r3, #16
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	619a      	str	r2, [r3, #24]
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e267      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d075      	beq.n	8002dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0e:	4b88      	ldr	r3, [pc, #544]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d00c      	beq.n	8002d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1a:	4b85      	ldr	r3, [pc, #532]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d112      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4b82      	ldr	r3, [pc, #520]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002d32:	d10b      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	4b7e      	ldr	r3, [pc, #504]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d05b      	beq.n	8002df8 <HAL_RCC_OscConfig+0x108>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d157      	bne.n	8002df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e242      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d54:	d106      	bne.n	8002d64 <HAL_RCC_OscConfig+0x74>
 8002d56:	4b76      	ldr	r3, [pc, #472]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a75      	ldr	r2, [pc, #468]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e01d      	b.n	8002da0 <HAL_RCC_OscConfig+0xb0>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x98>
 8002d6e:	4b70      	ldr	r3, [pc, #448]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a6f      	ldr	r2, [pc, #444]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6c      	ldr	r2, [pc, #432]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0xb0>
 8002d88:	4b69      	ldr	r3, [pc, #420]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a68      	ldr	r2, [pc, #416]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	4b66      	ldr	r3, [pc, #408]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a65      	ldr	r2, [pc, #404]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7ff fc18 	bl	80025dc <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db0:	f7ff fc14 	bl	80025dc <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	@ 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e207      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b5b      	ldr	r3, [pc, #364]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0xc0>
 8002dce:	e014      	b.n	8002dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7ff fc04 	bl	80025dc <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7ff fc00 	bl	80025dc <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	@ 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1f3      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	4b51      	ldr	r3, [pc, #324]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xe8>
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d063      	beq.n	8002ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e06:	4b4a      	ldr	r3, [pc, #296]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e12:	4b47      	ldr	r3, [pc, #284]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d11c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1e:	4b44      	ldr	r3, [pc, #272]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d116      	bne.n	8002e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	4b41      	ldr	r3, [pc, #260]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_RCC_OscConfig+0x152>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e1c7      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b3b      	ldr	r3, [pc, #236]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4937      	ldr	r1, [pc, #220]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	e03a      	b.n	8002ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e60:	4b34      	ldr	r3, [pc, #208]	@ (8002f34 <HAL_RCC_OscConfig+0x244>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7ff fbb9 	bl	80025dc <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7ff fbb5 	bl	80025dc <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e1a8      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	4b2b      	ldr	r3, [pc, #172]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8c:	4b28      	ldr	r3, [pc, #160]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4925      	ldr	r1, [pc, #148]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
 8002ea0:	e015      	b.n	8002ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	4b24      	ldr	r3, [pc, #144]	@ (8002f34 <HAL_RCC_OscConfig+0x244>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7ff fb98 	bl	80025dc <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7ff fb94 	bl	80025dc <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e187      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d036      	beq.n	8002f48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee2:	4b15      	ldr	r3, [pc, #84]	@ (8002f38 <HAL_RCC_OscConfig+0x248>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7ff fb78 	bl	80025dc <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef0:	f7ff fb74 	bl	80025dc <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e167      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	4b0b      	ldr	r3, [pc, #44]	@ (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002f04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x200>
 8002f0e:	e01b      	b.n	8002f48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f10:	4b09      	ldr	r3, [pc, #36]	@ (8002f38 <HAL_RCC_OscConfig+0x248>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7ff fb61 	bl	80025dc <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1c:	e00e      	b.n	8002f3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1e:	f7ff fb5d 	bl	80025dc <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d907      	bls.n	8002f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e150      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
 8002f30:	40023800 	.word	0x40023800
 8002f34:	42470000 	.word	0x42470000
 8002f38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3c:	4b88      	ldr	r3, [pc, #544]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ea      	bne.n	8002f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8097 	beq.w	8003084 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5a:	4b81      	ldr	r3, [pc, #516]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10f      	bne.n	8002f86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	4b7d      	ldr	r3, [pc, #500]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6e:	4a7c      	ldr	r2, [pc, #496]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f74:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f76:	4b7a      	ldr	r3, [pc, #488]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	4b77      	ldr	r3, [pc, #476]	@ (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f92:	4b74      	ldr	r3, [pc, #464]	@ (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a73      	ldr	r2, [pc, #460]	@ (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7ff fb1d 	bl	80025dc <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7ff fb19 	bl	80025dc <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e10c      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	4b6a      	ldr	r3, [pc, #424]	@ (8003164 <HAL_RCC_OscConfig+0x474>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x2ea>
 8002fcc:	4b64      	ldr	r3, [pc, #400]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fd0:	4a63      	ldr	r2, [pc, #396]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fd8:	e01c      	b.n	8003014 <HAL_RCC_OscConfig+0x324>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x30c>
 8002fe2:	4b5f      	ldr	r3, [pc, #380]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fe6:	4a5e      	ldr	r2, [pc, #376]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	f043 0304 	orr.w	r3, r3, #4
 8002fec:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fee:	4b5c      	ldr	r3, [pc, #368]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ff2:	4a5b      	ldr	r2, [pc, #364]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ffa:	e00b      	b.n	8003014 <HAL_RCC_OscConfig+0x324>
 8002ffc:	4b58      	ldr	r3, [pc, #352]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003000:	4a57      	ldr	r2, [pc, #348]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	6713      	str	r3, [r2, #112]	@ 0x70
 8003008:	4b55      	ldr	r3, [pc, #340]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800300c:	4a54      	ldr	r2, [pc, #336]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 0304 	bic.w	r3, r3, #4
 8003012:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d015      	beq.n	8003048 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301c:	f7ff fade 	bl	80025dc <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003022:	e00a      	b.n	800303a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7ff fada 	bl	80025dc <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e0cb      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	4b49      	ldr	r3, [pc, #292]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0ee      	beq.n	8003024 <HAL_RCC_OscConfig+0x334>
 8003046:	e014      	b.n	8003072 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003048:	f7ff fac8 	bl	80025dc <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7ff fac4 	bl	80025dc <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0b5      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003066:	4b3e      	ldr	r3, [pc, #248]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1ee      	bne.n	8003050 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003072:	7dfb      	ldrb	r3, [r7, #23]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003078:	4b39      	ldr	r3, [pc, #228]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800307c:	4a38      	ldr	r2, [pc, #224]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 800307e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003082:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80a1 	beq.w	80031d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800308e:	4b34      	ldr	r3, [pc, #208]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b08      	cmp	r3, #8
 8003098:	d05c      	beq.n	8003154 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d141      	bne.n	8003126 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	4b31      	ldr	r3, [pc, #196]	@ (8003168 <HAL_RCC_OscConfig+0x478>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7ff fa98 	bl	80025dc <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b0:	f7ff fa94 	bl	80025dc <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e087      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	4b27      	ldr	r3, [pc, #156]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69da      	ldr	r2, [r3, #28]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030dc:	019b      	lsls	r3, r3, #6
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	3b01      	subs	r3, #1
 80030e8:	041b      	lsls	r3, r3, #16
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	491b      	ldr	r1, [pc, #108]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003168 <HAL_RCC_OscConfig+0x478>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7ff fa6d 	bl	80025dc <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003106:	f7ff fa69 	bl	80025dc <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e05c      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003118:	4b11      	ldr	r3, [pc, #68]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x416>
 8003124:	e054      	b.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b10      	ldr	r3, [pc, #64]	@ (8003168 <HAL_RCC_OscConfig+0x478>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7ff fa56 	bl	80025dc <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003134:	f7ff fa52 	bl	80025dc <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e045      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	4b06      	ldr	r3, [pc, #24]	@ (8003160 <HAL_RCC_OscConfig+0x470>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x444>
 8003152:	e03d      	b.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d107      	bne.n	800316c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e038      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
 8003160:	40023800 	.word	0x40023800
 8003164:	40007000 	.word	0x40007000
 8003168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800316c:	4b1b      	ldr	r3, [pc, #108]	@ (80031dc <HAL_RCC_OscConfig+0x4ec>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d028      	beq.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d121      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d11a      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800319c:	4013      	ands	r3, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80031a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d111      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b2:	085b      	lsrs	r3, r3, #1
 80031b4:	3b01      	subs	r3, #1
 80031b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800

080031e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0cc      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f4:	4b68      	ldr	r3, [pc, #416]	@ (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d90c      	bls.n	800321c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b65      	ldr	r3, [pc, #404]	@ (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b63      	ldr	r3, [pc, #396]	@ (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b8      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003234:	4b59      	ldr	r3, [pc, #356]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a58      	ldr	r2, [pc, #352]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800323e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800324c:	4b53      	ldr	r3, [pc, #332]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a52      	ldr	r2, [pc, #328]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b50      	ldr	r3, [pc, #320]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	494d      	ldr	r1, [pc, #308]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d044      	beq.n	8003300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b47      	ldr	r3, [pc, #284]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d119      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e07f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d003      	beq.n	800329e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	2b03      	cmp	r3, #3
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329e:	4b3f      	ldr	r3, [pc, #252]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e06f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ae:	4b3b      	ldr	r3, [pc, #236]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e067      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b37      	ldr	r3, [pc, #220]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4934      	ldr	r1, [pc, #208]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d0:	f7ff f984 	bl	80025dc <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7ff f980 	bl	80025dc <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e04f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b2b      	ldr	r3, [pc, #172]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003300:	4b25      	ldr	r3, [pc, #148]	@ (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d20c      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b22      	ldr	r3, [pc, #136]	@ (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b20      	ldr	r3, [pc, #128]	@ (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e032      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003334:	4b19      	ldr	r3, [pc, #100]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4916      	ldr	r1, [pc, #88]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003352:	4b12      	ldr	r3, [pc, #72]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	490e      	ldr	r1, [pc, #56]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003366:	f000 f821 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b0b      	ldr	r3, [pc, #44]	@ (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	490a      	ldr	r1, [pc, #40]	@ (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	fa22 f303 	lsr.w	r3, r2, r3
 800337e:	4a09      	ldr	r2, [pc, #36]	@ (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003382:	4b09      	ldr	r3, [pc, #36]	@ (80033a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7ff f8e4 	bl	8002554 <HAL_InitTick>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023c00 	.word	0x40023c00
 800339c:	40023800 	.word	0x40023800
 80033a0:	080056a8 	.word	0x080056a8
 80033a4:	2000003c 	.word	0x2000003c
 80033a8:	20000040 	.word	0x20000040

080033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b0:	b090      	sub	sp, #64	@ 0x40
 80033b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80033b8:	2300      	movs	r3, #0
 80033ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033bc:	2300      	movs	r3, #0
 80033be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c4:	4b59      	ldr	r3, [pc, #356]	@ (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d00d      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x40>
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	f200 80a1 	bhi.w	8003518 <HAL_RCC_GetSysClockFreq+0x16c>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x34>
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033de:	e09b      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4b53      	ldr	r3, [pc, #332]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x184>)
 80033e2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80033e4:	e09b      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e6:	4b53      	ldr	r3, [pc, #332]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x188>)
 80033e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80033ea:	e098      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ec:	4b4f      	ldr	r3, [pc, #316]	@ (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80033f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033f6:	4b4d      	ldr	r3, [pc, #308]	@ (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d028      	beq.n	8003454 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003402:	4b4a      	ldr	r3, [pc, #296]	@ (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	099b      	lsrs	r3, r3, #6
 8003408:	2200      	movs	r2, #0
 800340a:	623b      	str	r3, [r7, #32]
 800340c:	627a      	str	r2, [r7, #36]	@ 0x24
 800340e:	6a3b      	ldr	r3, [r7, #32]
 8003410:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003414:	2100      	movs	r1, #0
 8003416:	4b47      	ldr	r3, [pc, #284]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x188>)
 8003418:	fb03 f201 	mul.w	r2, r3, r1
 800341c:	2300      	movs	r3, #0
 800341e:	fb00 f303 	mul.w	r3, r0, r3
 8003422:	4413      	add	r3, r2
 8003424:	4a43      	ldr	r2, [pc, #268]	@ (8003534 <HAL_RCC_GetSysClockFreq+0x188>)
 8003426:	fba0 1202 	umull	r1, r2, r0, r2
 800342a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800342c:	460a      	mov	r2, r1
 800342e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003430:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003432:	4413      	add	r3, r2
 8003434:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003436:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003438:	2200      	movs	r2, #0
 800343a:	61bb      	str	r3, [r7, #24]
 800343c:	61fa      	str	r2, [r7, #28]
 800343e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003442:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003446:	f7fd faad 	bl	80009a4 <__aeabi_uldivmod>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4613      	mov	r3, r2
 8003450:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003452:	e053      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003454:	4b35      	ldr	r3, [pc, #212]	@ (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	099b      	lsrs	r3, r3, #6
 800345a:	2200      	movs	r2, #0
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	617a      	str	r2, [r7, #20]
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003466:	f04f 0b00 	mov.w	fp, #0
 800346a:	4652      	mov	r2, sl
 800346c:	465b      	mov	r3, fp
 800346e:	f04f 0000 	mov.w	r0, #0
 8003472:	f04f 0100 	mov.w	r1, #0
 8003476:	0159      	lsls	r1, r3, #5
 8003478:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800347c:	0150      	lsls	r0, r2, #5
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	ebb2 080a 	subs.w	r8, r2, sl
 8003486:	eb63 090b 	sbc.w	r9, r3, fp
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	f04f 0300 	mov.w	r3, #0
 8003492:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003496:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800349a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800349e:	ebb2 0408 	subs.w	r4, r2, r8
 80034a2:	eb63 0509 	sbc.w	r5, r3, r9
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	00eb      	lsls	r3, r5, #3
 80034b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034b4:	00e2      	lsls	r2, r4, #3
 80034b6:	4614      	mov	r4, r2
 80034b8:	461d      	mov	r5, r3
 80034ba:	eb14 030a 	adds.w	r3, r4, sl
 80034be:	603b      	str	r3, [r7, #0]
 80034c0:	eb45 030b 	adc.w	r3, r5, fp
 80034c4:	607b      	str	r3, [r7, #4]
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034d2:	4629      	mov	r1, r5
 80034d4:	028b      	lsls	r3, r1, #10
 80034d6:	4621      	mov	r1, r4
 80034d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034dc:	4621      	mov	r1, r4
 80034de:	028a      	lsls	r2, r1, #10
 80034e0:	4610      	mov	r0, r2
 80034e2:	4619      	mov	r1, r3
 80034e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034e6:	2200      	movs	r2, #0
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	60fa      	str	r2, [r7, #12]
 80034ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80034f0:	f7fd fa58 	bl	80009a4 <__aeabi_uldivmod>
 80034f4:	4602      	mov	r2, r0
 80034f6:	460b      	mov	r3, r1
 80034f8:	4613      	mov	r3, r2
 80034fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80034fc:	4b0b      	ldr	r3, [pc, #44]	@ (800352c <HAL_RCC_GetSysClockFreq+0x180>)
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	0c1b      	lsrs	r3, r3, #16
 8003502:	f003 0303 	and.w	r3, r3, #3
 8003506:	3301      	adds	r3, #1
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800350c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800350e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003510:	fbb2 f3f3 	udiv	r3, r2, r3
 8003514:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003516:	e002      	b.n	800351e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003518:	4b05      	ldr	r3, [pc, #20]	@ (8003530 <HAL_RCC_GetSysClockFreq+0x184>)
 800351a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800351c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800351e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003520:	4618      	mov	r0, r3
 8003522:	3740      	adds	r7, #64	@ 0x40
 8003524:	46bd      	mov	sp, r7
 8003526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800352a:	bf00      	nop
 800352c:	40023800 	.word	0x40023800
 8003530:	00f42400 	.word	0x00f42400
 8003534:	017d7840 	.word	0x017d7840

08003538 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800353c:	4b03      	ldr	r3, [pc, #12]	@ (800354c <HAL_RCC_GetHCLKFreq+0x14>)
 800353e:	681b      	ldr	r3, [r3, #0]
}
 8003540:	4618      	mov	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	2000003c 	.word	0x2000003c

08003550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003554:	f7ff fff0 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 8003558:	4602      	mov	r2, r0
 800355a:	4b05      	ldr	r3, [pc, #20]	@ (8003570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	0a9b      	lsrs	r3, r3, #10
 8003560:	f003 0307 	and.w	r3, r3, #7
 8003564:	4903      	ldr	r1, [pc, #12]	@ (8003574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003566:	5ccb      	ldrb	r3, [r1, r3]
 8003568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800356c:	4618      	mov	r0, r3
 800356e:	bd80      	pop	{r7, pc}
 8003570:	40023800 	.word	0x40023800
 8003574:	080056b8 	.word	0x080056b8

08003578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800357c:	f7ff ffdc 	bl	8003538 <HAL_RCC_GetHCLKFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b05      	ldr	r3, [pc, #20]	@ (8003598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	0b5b      	lsrs	r3, r3, #13
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	4903      	ldr	r1, [pc, #12]	@ (800359c <HAL_RCC_GetPCLK2Freq+0x24>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40023800 	.word	0x40023800
 800359c:	080056b8 	.word	0x080056b8

080035a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b082      	sub	sp, #8
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e041      	b.n	8003636 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d106      	bne.n	80035cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2200      	movs	r2, #0
 80035c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f7fe fe26 	bl	8002218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2202      	movs	r2, #2
 80035d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3304      	adds	r3, #4
 80035dc:	4619      	mov	r1, r3
 80035de:	4610      	mov	r0, r2
 80035e0:	f000 fb48 	bl	8003c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2201      	movs	r2, #1
 80035e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2201      	movs	r2, #1
 80035f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800363e:	b580      	push	{r7, lr}
 8003640:	b082      	sub	sp, #8
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d101      	bne.n	8003650 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e041      	b.n	80036d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003656:	b2db      	uxtb	r3, r3
 8003658:	2b00      	cmp	r3, #0
 800365a:	d106      	bne.n	800366a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 f839 	bl	80036dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2202      	movs	r2, #2
 800366e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681a      	ldr	r2, [r3, #0]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3304      	adds	r3, #4
 800367a:	4619      	mov	r1, r3
 800367c:	4610      	mov	r0, r2
 800367e:	f000 faf9 	bl	8003c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2201      	movs	r2, #1
 8003686:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2201      	movs	r2, #1
 800368e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2201      	movs	r2, #1
 8003696:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2201      	movs	r2, #1
 80036ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2201      	movs	r2, #1
 80036b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2201      	movs	r2, #1
 80036be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2201      	movs	r2, #1
 80036c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b084      	sub	sp, #16
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
 80036f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d109      	bne.n	8003714 <HAL_TIM_PWM_Start+0x24>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003706:	b2db      	uxtb	r3, r3
 8003708:	2b01      	cmp	r3, #1
 800370a:	bf14      	ite	ne
 800370c:	2301      	movne	r3, #1
 800370e:	2300      	moveq	r3, #0
 8003710:	b2db      	uxtb	r3, r3
 8003712:	e022      	b.n	800375a <HAL_TIM_PWM_Start+0x6a>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	2b04      	cmp	r3, #4
 8003718:	d109      	bne.n	800372e <HAL_TIM_PWM_Start+0x3e>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b01      	cmp	r3, #1
 8003724:	bf14      	ite	ne
 8003726:	2301      	movne	r3, #1
 8003728:	2300      	moveq	r3, #0
 800372a:	b2db      	uxtb	r3, r3
 800372c:	e015      	b.n	800375a <HAL_TIM_PWM_Start+0x6a>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b08      	cmp	r3, #8
 8003732:	d109      	bne.n	8003748 <HAL_TIM_PWM_Start+0x58>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b01      	cmp	r3, #1
 800373e:	bf14      	ite	ne
 8003740:	2301      	movne	r3, #1
 8003742:	2300      	moveq	r3, #0
 8003744:	b2db      	uxtb	r3, r3
 8003746:	e008      	b.n	800375a <HAL_TIM_PWM_Start+0x6a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b01      	cmp	r3, #1
 8003752:	bf14      	ite	ne
 8003754:	2301      	movne	r3, #1
 8003756:	2300      	moveq	r3, #0
 8003758:	b2db      	uxtb	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e07c      	b.n	800385c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d104      	bne.n	8003772 <HAL_TIM_PWM_Start+0x82>
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2202      	movs	r2, #2
 800376c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003770:	e013      	b.n	800379a <HAL_TIM_PWM_Start+0xaa>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b04      	cmp	r3, #4
 8003776:	d104      	bne.n	8003782 <HAL_TIM_PWM_Start+0x92>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2202      	movs	r2, #2
 800377c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003780:	e00b      	b.n	800379a <HAL_TIM_PWM_Start+0xaa>
 8003782:	683b      	ldr	r3, [r7, #0]
 8003784:	2b08      	cmp	r3, #8
 8003786:	d104      	bne.n	8003792 <HAL_TIM_PWM_Start+0xa2>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2202      	movs	r2, #2
 800378c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003790:	e003      	b.n	800379a <HAL_TIM_PWM_Start+0xaa>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2202      	movs	r2, #2
 8003796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2201      	movs	r2, #1
 80037a0:	6839      	ldr	r1, [r7, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f000 fd50 	bl	8004248 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a2d      	ldr	r2, [pc, #180]	@ (8003864 <HAL_TIM_PWM_Start+0x174>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d004      	beq.n	80037bc <HAL_TIM_PWM_Start+0xcc>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003868 <HAL_TIM_PWM_Start+0x178>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d101      	bne.n	80037c0 <HAL_TIM_PWM_Start+0xd0>
 80037bc:	2301      	movs	r3, #1
 80037be:	e000      	b.n	80037c2 <HAL_TIM_PWM_Start+0xd2>
 80037c0:	2300      	movs	r3, #0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a22      	ldr	r2, [pc, #136]	@ (8003864 <HAL_TIM_PWM_Start+0x174>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d022      	beq.n	8003826 <HAL_TIM_PWM_Start+0x136>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e8:	d01d      	beq.n	8003826 <HAL_TIM_PWM_Start+0x136>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a1f      	ldr	r2, [pc, #124]	@ (800386c <HAL_TIM_PWM_Start+0x17c>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d018      	beq.n	8003826 <HAL_TIM_PWM_Start+0x136>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003870 <HAL_TIM_PWM_Start+0x180>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	d013      	beq.n	8003826 <HAL_TIM_PWM_Start+0x136>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a1c      	ldr	r2, [pc, #112]	@ (8003874 <HAL_TIM_PWM_Start+0x184>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d00e      	beq.n	8003826 <HAL_TIM_PWM_Start+0x136>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a16      	ldr	r2, [pc, #88]	@ (8003868 <HAL_TIM_PWM_Start+0x178>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d009      	beq.n	8003826 <HAL_TIM_PWM_Start+0x136>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a18      	ldr	r2, [pc, #96]	@ (8003878 <HAL_TIM_PWM_Start+0x188>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d004      	beq.n	8003826 <HAL_TIM_PWM_Start+0x136>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a16      	ldr	r2, [pc, #88]	@ (800387c <HAL_TIM_PWM_Start+0x18c>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d111      	bne.n	800384a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f003 0307 	and.w	r3, r3, #7
 8003830:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b06      	cmp	r3, #6
 8003836:	d010      	beq.n	800385a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0201 	orr.w	r2, r2, #1
 8003846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003848:	e007      	b.n	800385a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681a      	ldr	r2, [r3, #0]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f042 0201 	orr.w	r2, r2, #1
 8003858:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	3710      	adds	r7, #16
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40010000 	.word	0x40010000
 8003868:	40010400 	.word	0x40010400
 800386c:	40000400 	.word	0x40000400
 8003870:	40000800 	.word	0x40000800
 8003874:	40000c00 	.word	0x40000c00
 8003878:	40014000 	.word	0x40014000
 800387c:	40001800 	.word	0x40001800

08003880 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2200      	movs	r2, #0
 8003890:	6839      	ldr	r1, [r7, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fcd8 	bl	8004248 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a2e      	ldr	r2, [pc, #184]	@ (8003958 <HAL_TIM_PWM_Stop+0xd8>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d004      	beq.n	80038ac <HAL_TIM_PWM_Stop+0x2c>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a2d      	ldr	r2, [pc, #180]	@ (800395c <HAL_TIM_PWM_Stop+0xdc>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d101      	bne.n	80038b0 <HAL_TIM_PWM_Stop+0x30>
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_TIM_PWM_Stop+0x32>
 80038b0:	2300      	movs	r3, #0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d017      	beq.n	80038e6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6a1a      	ldr	r2, [r3, #32]
 80038bc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80038c0:	4013      	ands	r3, r2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10f      	bne.n	80038e6 <HAL_TIM_PWM_Stop+0x66>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a1a      	ldr	r2, [r3, #32]
 80038cc:	f240 4344 	movw	r3, #1092	@ 0x444
 80038d0:	4013      	ands	r3, r2
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d107      	bne.n	80038e6 <HAL_TIM_PWM_Stop+0x66>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6a1a      	ldr	r2, [r3, #32]
 80038ec:	f241 1311 	movw	r3, #4369	@ 0x1111
 80038f0:	4013      	ands	r3, r2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10f      	bne.n	8003916 <HAL_TIM_PWM_Stop+0x96>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	6a1a      	ldr	r2, [r3, #32]
 80038fc:	f240 4344 	movw	r3, #1092	@ 0x444
 8003900:	4013      	ands	r3, r2
 8003902:	2b00      	cmp	r3, #0
 8003904:	d107      	bne.n	8003916 <HAL_TIM_PWM_Stop+0x96>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0201 	bic.w	r2, r2, #1
 8003914:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d104      	bne.n	8003926 <HAL_TIM_PWM_Stop+0xa6>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2201      	movs	r2, #1
 8003920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003924:	e013      	b.n	800394e <HAL_TIM_PWM_Stop+0xce>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	2b04      	cmp	r3, #4
 800392a:	d104      	bne.n	8003936 <HAL_TIM_PWM_Stop+0xb6>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003934:	e00b      	b.n	800394e <HAL_TIM_PWM_Stop+0xce>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b08      	cmp	r3, #8
 800393a:	d104      	bne.n	8003946 <HAL_TIM_PWM_Stop+0xc6>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003944:	e003      	b.n	800394e <HAL_TIM_PWM_Stop+0xce>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2201      	movs	r2, #1
 800394a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800394e:	2300      	movs	r3, #0
}
 8003950:	4618      	mov	r0, r3
 8003952:	3708      	adds	r7, #8
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40010000 	.word	0x40010000
 800395c:	40010400 	.word	0x40010400

08003960 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	b086      	sub	sp, #24
 8003964:	af00      	add	r7, sp, #0
 8003966:	60f8      	str	r0, [r7, #12]
 8003968:	60b9      	str	r1, [r7, #8]
 800396a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800396c:	2300      	movs	r3, #0
 800396e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003976:	2b01      	cmp	r3, #1
 8003978:	d101      	bne.n	800397e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800397a:	2302      	movs	r3, #2
 800397c:	e0ae      	b.n	8003adc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2201      	movs	r2, #1
 8003982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2b0c      	cmp	r3, #12
 800398a:	f200 809f 	bhi.w	8003acc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800398e:	a201      	add	r2, pc, #4	@ (adr r2, 8003994 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003994:	080039c9 	.word	0x080039c9
 8003998:	08003acd 	.word	0x08003acd
 800399c:	08003acd 	.word	0x08003acd
 80039a0:	08003acd 	.word	0x08003acd
 80039a4:	08003a09 	.word	0x08003a09
 80039a8:	08003acd 	.word	0x08003acd
 80039ac:	08003acd 	.word	0x08003acd
 80039b0:	08003acd 	.word	0x08003acd
 80039b4:	08003a4b 	.word	0x08003a4b
 80039b8:	08003acd 	.word	0x08003acd
 80039bc:	08003acd 	.word	0x08003acd
 80039c0:	08003acd 	.word	0x08003acd
 80039c4:	08003a8b 	.word	0x08003a8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68b9      	ldr	r1, [r7, #8]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f9f0 	bl	8003db4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699a      	ldr	r2, [r3, #24]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f042 0208 	orr.w	r2, r2, #8
 80039e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	699a      	ldr	r2, [r3, #24]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f022 0204 	bic.w	r2, r2, #4
 80039f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6999      	ldr	r1, [r3, #24]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	691a      	ldr	r2, [r3, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	619a      	str	r2, [r3, #24]
      break;
 8003a06:	e064      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	68b9      	ldr	r1, [r7, #8]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fa40 	bl	8003e94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	699a      	ldr	r2, [r3, #24]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	699a      	ldr	r2, [r3, #24]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	6999      	ldr	r1, [r3, #24]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	021a      	lsls	r2, r3, #8
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	619a      	str	r2, [r3, #24]
      break;
 8003a48:	e043      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68b9      	ldr	r1, [r7, #8]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f000 fa95 	bl	8003f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69da      	ldr	r2, [r3, #28]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0208 	orr.w	r2, r2, #8
 8003a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69da      	ldr	r2, [r3, #28]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 0204 	bic.w	r2, r2, #4
 8003a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	69d9      	ldr	r1, [r3, #28]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	691a      	ldr	r2, [r3, #16]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	61da      	str	r2, [r3, #28]
      break;
 8003a88:	e023      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	4618      	mov	r0, r3
 8003a92:	f000 fae9 	bl	8004068 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69da      	ldr	r2, [r3, #28]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69da      	ldr	r2, [r3, #28]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69d9      	ldr	r1, [r3, #28]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	021a      	lsls	r2, r3, #8
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	61da      	str	r2, [r3, #28]
      break;
 8003aca:	e002      	b.n	8003ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	75fb      	strb	r3, [r7, #23]
      break;
 8003ad0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aee:	2300      	movs	r3, #0
 8003af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d101      	bne.n	8003b00 <HAL_TIM_ConfigClockSource+0x1c>
 8003afc:	2302      	movs	r3, #2
 8003afe:	e0b4      	b.n	8003c6a <HAL_TIM_ConfigClockSource+0x186>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b38:	d03e      	beq.n	8003bb8 <HAL_TIM_ConfigClockSource+0xd4>
 8003b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b3e:	f200 8087 	bhi.w	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b46:	f000 8086 	beq.w	8003c56 <HAL_TIM_ConfigClockSource+0x172>
 8003b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4e:	d87f      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b50:	2b70      	cmp	r3, #112	@ 0x70
 8003b52:	d01a      	beq.n	8003b8a <HAL_TIM_ConfigClockSource+0xa6>
 8003b54:	2b70      	cmp	r3, #112	@ 0x70
 8003b56:	d87b      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b58:	2b60      	cmp	r3, #96	@ 0x60
 8003b5a:	d050      	beq.n	8003bfe <HAL_TIM_ConfigClockSource+0x11a>
 8003b5c:	2b60      	cmp	r3, #96	@ 0x60
 8003b5e:	d877      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b60:	2b50      	cmp	r3, #80	@ 0x50
 8003b62:	d03c      	beq.n	8003bde <HAL_TIM_ConfigClockSource+0xfa>
 8003b64:	2b50      	cmp	r3, #80	@ 0x50
 8003b66:	d873      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b68:	2b40      	cmp	r3, #64	@ 0x40
 8003b6a:	d058      	beq.n	8003c1e <HAL_TIM_ConfigClockSource+0x13a>
 8003b6c:	2b40      	cmp	r3, #64	@ 0x40
 8003b6e:	d86f      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b70:	2b30      	cmp	r3, #48	@ 0x30
 8003b72:	d064      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b74:	2b30      	cmp	r3, #48	@ 0x30
 8003b76:	d86b      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	d060      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d867      	bhi.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d05c      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	d05a      	beq.n	8003c3e <HAL_TIM_ConfigClockSource+0x15a>
 8003b88:	e062      	b.n	8003c50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6818      	ldr	r0, [r3, #0]
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	6899      	ldr	r1, [r3, #8]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	685a      	ldr	r2, [r3, #4]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f000 fb35 	bl	8004208 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	689b      	ldr	r3, [r3, #8]
 8003ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	68ba      	ldr	r2, [r7, #8]
 8003bb4:	609a      	str	r2, [r3, #8]
      break;
 8003bb6:	e04f      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6818      	ldr	r0, [r3, #0]
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	6899      	ldr	r1, [r3, #8]
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	68db      	ldr	r3, [r3, #12]
 8003bc8:	f000 fb1e 	bl	8004208 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689a      	ldr	r2, [r3, #8]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bda:	609a      	str	r2, [r3, #8]
      break;
 8003bdc:	e03c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6818      	ldr	r0, [r3, #0]
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	6859      	ldr	r1, [r3, #4]
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	461a      	mov	r2, r3
 8003bec:	f000 fa92 	bl	8004114 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2150      	movs	r1, #80	@ 0x50
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f000 faeb 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003bfc:	e02c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6818      	ldr	r0, [r3, #0]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	6859      	ldr	r1, [r3, #4]
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	f000 fab1 	bl	8004172 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	2160      	movs	r1, #96	@ 0x60
 8003c16:	4618      	mov	r0, r3
 8003c18:	f000 fadb 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003c1c:	e01c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	6859      	ldr	r1, [r3, #4]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	68db      	ldr	r3, [r3, #12]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f000 fa72 	bl	8004114 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2140      	movs	r1, #64	@ 0x40
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 facb 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003c3c:	e00c      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4619      	mov	r1, r3
 8003c48:	4610      	mov	r0, r2
 8003c4a:	f000 fac2 	bl	80041d2 <TIM_ITRx_SetConfig>
      break;
 8003c4e:	e003      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c50:	2301      	movs	r3, #1
 8003c52:	73fb      	strb	r3, [r7, #15]
      break;
 8003c54:	e000      	b.n	8003c58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
	...

08003c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b085      	sub	sp, #20
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	4a40      	ldr	r2, [pc, #256]	@ (8003d88 <TIM_Base_SetConfig+0x114>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d013      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c92:	d00f      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a3d      	ldr	r2, [pc, #244]	@ (8003d8c <TIM_Base_SetConfig+0x118>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d00b      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	4a3c      	ldr	r2, [pc, #240]	@ (8003d90 <TIM_Base_SetConfig+0x11c>)
 8003ca0:	4293      	cmp	r3, r2
 8003ca2:	d007      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	4a3b      	ldr	r2, [pc, #236]	@ (8003d94 <TIM_Base_SetConfig+0x120>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d003      	beq.n	8003cb4 <TIM_Base_SetConfig+0x40>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a3a      	ldr	r2, [pc, #232]	@ (8003d98 <TIM_Base_SetConfig+0x124>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d108      	bne.n	8003cc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	4a2f      	ldr	r2, [pc, #188]	@ (8003d88 <TIM_Base_SetConfig+0x114>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d02b      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd4:	d027      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a2c      	ldr	r2, [pc, #176]	@ (8003d8c <TIM_Base_SetConfig+0x118>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d023      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a2b      	ldr	r2, [pc, #172]	@ (8003d90 <TIM_Base_SetConfig+0x11c>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d01f      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a2a      	ldr	r2, [pc, #168]	@ (8003d94 <TIM_Base_SetConfig+0x120>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d01b      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a29      	ldr	r2, [pc, #164]	@ (8003d98 <TIM_Base_SetConfig+0x124>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d017      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a28      	ldr	r2, [pc, #160]	@ (8003d9c <TIM_Base_SetConfig+0x128>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a27      	ldr	r2, [pc, #156]	@ (8003da0 <TIM_Base_SetConfig+0x12c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d00f      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a26      	ldr	r2, [pc, #152]	@ (8003da4 <TIM_Base_SetConfig+0x130>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d00b      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a25      	ldr	r2, [pc, #148]	@ (8003da8 <TIM_Base_SetConfig+0x134>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d007      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a24      	ldr	r2, [pc, #144]	@ (8003dac <TIM_Base_SetConfig+0x138>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d003      	beq.n	8003d26 <TIM_Base_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a23      	ldr	r2, [pc, #140]	@ (8003db0 <TIM_Base_SetConfig+0x13c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d108      	bne.n	8003d38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8003d88 <TIM_Base_SetConfig+0x114>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d003      	beq.n	8003d6c <TIM_Base_SetConfig+0xf8>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a0c      	ldr	r2, [pc, #48]	@ (8003d98 <TIM_Base_SetConfig+0x124>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d103      	bne.n	8003d74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	691a      	ldr	r2, [r3, #16]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	615a      	str	r2, [r3, #20]
}
 8003d7a:	bf00      	nop
 8003d7c:	3714      	adds	r7, #20
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr
 8003d86:	bf00      	nop
 8003d88:	40010000 	.word	0x40010000
 8003d8c:	40000400 	.word	0x40000400
 8003d90:	40000800 	.word	0x40000800
 8003d94:	40000c00 	.word	0x40000c00
 8003d98:	40010400 	.word	0x40010400
 8003d9c:	40014000 	.word	0x40014000
 8003da0:	40014400 	.word	0x40014400
 8003da4:	40014800 	.word	0x40014800
 8003da8:	40001800 	.word	0x40001800
 8003dac:	40001c00 	.word	0x40001c00
 8003db0:	40002000 	.word	0x40002000

08003db4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b087      	sub	sp, #28
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	f023 0201 	bic.w	r2, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a1b      	ldr	r3, [r3, #32]
 8003dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003de2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	f023 0303 	bic.w	r3, r3, #3
 8003dea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	f023 0302 	bic.w	r3, r3, #2
 8003dfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	689b      	ldr	r3, [r3, #8]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a20      	ldr	r2, [pc, #128]	@ (8003e8c <TIM_OC1_SetConfig+0xd8>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d003      	beq.n	8003e18 <TIM_OC1_SetConfig+0x64>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a1f      	ldr	r2, [pc, #124]	@ (8003e90 <TIM_OC1_SetConfig+0xdc>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d10c      	bne.n	8003e32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	f023 0308 	bic.w	r3, r3, #8
 8003e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	697a      	ldr	r2, [r7, #20]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f023 0304 	bic.w	r3, r3, #4
 8003e30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a15      	ldr	r2, [pc, #84]	@ (8003e8c <TIM_OC1_SetConfig+0xd8>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <TIM_OC1_SetConfig+0x8e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a14      	ldr	r2, [pc, #80]	@ (8003e90 <TIM_OC1_SetConfig+0xdc>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d111      	bne.n	8003e66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	693a      	ldr	r2, [r7, #16]
 8003e6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	68fa      	ldr	r2, [r7, #12]
 8003e70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	697a      	ldr	r2, [r7, #20]
 8003e7e:	621a      	str	r2, [r3, #32]
}
 8003e80:	bf00      	nop
 8003e82:	371c      	adds	r7, #28
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	40010400 	.word	0x40010400

08003e94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b087      	sub	sp, #28
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	f023 0210 	bic.w	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	699b      	ldr	r3, [r3, #24]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	021b      	lsls	r3, r3, #8
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f023 0320 	bic.w	r3, r3, #32
 8003ede:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	011b      	lsls	r3, r3, #4
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a22      	ldr	r2, [pc, #136]	@ (8003f78 <TIM_OC2_SetConfig+0xe4>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_OC2_SetConfig+0x68>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a21      	ldr	r2, [pc, #132]	@ (8003f7c <TIM_OC2_SetConfig+0xe8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d10d      	bne.n	8003f18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	011b      	lsls	r3, r3, #4
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a17      	ldr	r2, [pc, #92]	@ (8003f78 <TIM_OC2_SetConfig+0xe4>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <TIM_OC2_SetConfig+0x94>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a16      	ldr	r2, [pc, #88]	@ (8003f7c <TIM_OC2_SetConfig+0xe8>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d113      	bne.n	8003f50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	693a      	ldr	r2, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	699b      	ldr	r3, [r3, #24]
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	693a      	ldr	r2, [r7, #16]
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685a      	ldr	r2, [r3, #4]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	621a      	str	r2, [r3, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
 8003f76:	bf00      	nop
 8003f78:	40010000 	.word	0x40010000
 8003f7c:	40010400 	.word	0x40010400

08003f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b087      	sub	sp, #28
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
 8003f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a1b      	ldr	r3, [r3, #32]
 8003f8e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a1b      	ldr	r3, [r3, #32]
 8003f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	69db      	ldr	r3, [r3, #28]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0303 	bic.w	r3, r3, #3
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	021b      	lsls	r3, r3, #8
 8003fd0:	697a      	ldr	r2, [r7, #20]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a21      	ldr	r2, [pc, #132]	@ (8004060 <TIM_OC3_SetConfig+0xe0>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d003      	beq.n	8003fe6 <TIM_OC3_SetConfig+0x66>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a20      	ldr	r2, [pc, #128]	@ (8004064 <TIM_OC3_SetConfig+0xe4>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d10d      	bne.n	8004002 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fee:	683b      	ldr	r3, [r7, #0]
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	021b      	lsls	r3, r3, #8
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a16      	ldr	r2, [pc, #88]	@ (8004060 <TIM_OC3_SetConfig+0xe0>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d003      	beq.n	8004012 <TIM_OC3_SetConfig+0x92>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a15      	ldr	r2, [pc, #84]	@ (8004064 <TIM_OC3_SetConfig+0xe4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d113      	bne.n	800403a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	011b      	lsls	r3, r3, #4
 8004028:	693a      	ldr	r2, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	699b      	ldr	r3, [r3, #24]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	4313      	orrs	r3, r2
 8004038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	693a      	ldr	r2, [r7, #16]
 800403e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004046:	683b      	ldr	r3, [r7, #0]
 8004048:	685a      	ldr	r2, [r3, #4]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	621a      	str	r2, [r3, #32]
}
 8004054:	bf00      	nop
 8004056:	371c      	adds	r7, #28
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	40010000 	.word	0x40010000
 8004064:	40010400 	.word	0x40010400

08004068 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004068:	b480      	push	{r7}
 800406a:	b087      	sub	sp, #28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6a1b      	ldr	r3, [r3, #32]
 8004082:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	69db      	ldr	r3, [r3, #28]
 800408e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800409e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80040b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	031b      	lsls	r3, r3, #12
 80040ba:	693a      	ldr	r2, [r7, #16]
 80040bc:	4313      	orrs	r3, r2
 80040be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	4a12      	ldr	r2, [pc, #72]	@ (800410c <TIM_OC4_SetConfig+0xa4>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d003      	beq.n	80040d0 <TIM_OC4_SetConfig+0x68>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	4a11      	ldr	r2, [pc, #68]	@ (8004110 <TIM_OC4_SetConfig+0xa8>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d109      	bne.n	80040e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80040d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	695b      	ldr	r3, [r3, #20]
 80040dc:	019b      	lsls	r3, r3, #6
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	685a      	ldr	r2, [r3, #4]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	693a      	ldr	r2, [r7, #16]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40010000 	.word	0x40010000
 8004110:	40010400 	.word	0x40010400

08004114 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004114:	b480      	push	{r7}
 8004116:	b087      	sub	sp, #28
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6a1b      	ldr	r3, [r3, #32]
 8004124:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	f023 0201 	bic.w	r2, r3, #1
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	699b      	ldr	r3, [r3, #24]
 8004136:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800413e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	f023 030a 	bic.w	r3, r3, #10
 8004150:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	697a      	ldr	r2, [r7, #20]
 8004164:	621a      	str	r2, [r3, #32]
}
 8004166:	bf00      	nop
 8004168:	371c      	adds	r7, #28
 800416a:	46bd      	mov	sp, r7
 800416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004170:	4770      	bx	lr

08004172 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004172:	b480      	push	{r7}
 8004174:	b087      	sub	sp, #28
 8004176:	af00      	add	r7, sp, #0
 8004178:	60f8      	str	r0, [r7, #12]
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0210 	bic.w	r2, r3, #16
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6a1b      	ldr	r3, [r3, #32]
 8004194:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800419c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	031b      	lsls	r3, r3, #12
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041b0:	68bb      	ldr	r3, [r7, #8]
 80041b2:	011b      	lsls	r3, r3, #4
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	697a      	ldr	r2, [r7, #20]
 80041be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	621a      	str	r2, [r3, #32]
}
 80041c6:	bf00      	nop
 80041c8:	371c      	adds	r7, #28
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr

080041d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041d2:	b480      	push	{r7}
 80041d4:	b085      	sub	sp, #20
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
 80041da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041ea:	683a      	ldr	r2, [r7, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f043 0307 	orr.w	r3, r3, #7
 80041f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	609a      	str	r2, [r3, #8]
}
 80041fc:	bf00      	nop
 80041fe:	3714      	adds	r7, #20
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	607a      	str	r2, [r7, #4]
 8004214:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004222:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	021a      	lsls	r2, r3, #8
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	431a      	orrs	r2, r3
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4313      	orrs	r3, r2
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	4313      	orrs	r3, r2
 8004234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	609a      	str	r2, [r3, #8]
}
 800423c:	bf00      	nop
 800423e:	371c      	adds	r7, #28
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f003 031f 	and.w	r3, r3, #31
 800425a:	2201      	movs	r2, #1
 800425c:	fa02 f303 	lsl.w	r3, r2, r3
 8004260:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	6a1a      	ldr	r2, [r3, #32]
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	43db      	mvns	r3, r3
 800426a:	401a      	ands	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6a1a      	ldr	r2, [r3, #32]
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	f003 031f 	and.w	r3, r3, #31
 800427a:	6879      	ldr	r1, [r7, #4]
 800427c:	fa01 f303 	lsl.w	r3, r1, r3
 8004280:	431a      	orrs	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	621a      	str	r2, [r3, #32]
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
	...

08004294 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b084      	sub	sp, #16
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d109      	bne.n	80042b8 <HAL_TIMEx_PWMN_Start+0x24>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	bf14      	ite	ne
 80042b0:	2301      	movne	r3, #1
 80042b2:	2300      	moveq	r3, #0
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	e022      	b.n	80042fe <HAL_TIMEx_PWMN_Start+0x6a>
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b04      	cmp	r3, #4
 80042bc:	d109      	bne.n	80042d2 <HAL_TIMEx_PWMN_Start+0x3e>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	bf14      	ite	ne
 80042ca:	2301      	movne	r3, #1
 80042cc:	2300      	moveq	r3, #0
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	e015      	b.n	80042fe <HAL_TIMEx_PWMN_Start+0x6a>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d109      	bne.n	80042ec <HAL_TIMEx_PWMN_Start+0x58>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	bf14      	ite	ne
 80042e4:	2301      	movne	r3, #1
 80042e6:	2300      	moveq	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	e008      	b.n	80042fe <HAL_TIMEx_PWMN_Start+0x6a>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80042f2:	b2db      	uxtb	r3, r3
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	bf14      	ite	ne
 80042f8:	2301      	movne	r3, #1
 80042fa:	2300      	moveq	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e06d      	b.n	80043e2 <HAL_TIMEx_PWMN_Start+0x14e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d104      	bne.n	8004316 <HAL_TIMEx_PWMN_Start+0x82>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2202      	movs	r2, #2
 8004310:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004314:	e013      	b.n	800433e <HAL_TIMEx_PWMN_Start+0xaa>
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b04      	cmp	r3, #4
 800431a:	d104      	bne.n	8004326 <HAL_TIMEx_PWMN_Start+0x92>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2202      	movs	r2, #2
 8004320:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004324:	e00b      	b.n	800433e <HAL_TIMEx_PWMN_Start+0xaa>
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2b08      	cmp	r3, #8
 800432a:	d104      	bne.n	8004336 <HAL_TIMEx_PWMN_Start+0xa2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2202      	movs	r2, #2
 8004330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004334:	e003      	b.n	800433e <HAL_TIMEx_PWMN_Start+0xaa>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2202      	movs	r2, #2
 800433a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2204      	movs	r2, #4
 8004344:	6839      	ldr	r1, [r7, #0]
 8004346:	4618      	mov	r0, r3
 8004348:	f000 f98a 	bl	8004660 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800435a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a22      	ldr	r2, [pc, #136]	@ (80043ec <HAL_TIMEx_PWMN_Start+0x158>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d022      	beq.n	80043ac <HAL_TIMEx_PWMN_Start+0x118>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800436e:	d01d      	beq.n	80043ac <HAL_TIMEx_PWMN_Start+0x118>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a1e      	ldr	r2, [pc, #120]	@ (80043f0 <HAL_TIMEx_PWMN_Start+0x15c>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d018      	beq.n	80043ac <HAL_TIMEx_PWMN_Start+0x118>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a1d      	ldr	r2, [pc, #116]	@ (80043f4 <HAL_TIMEx_PWMN_Start+0x160>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d013      	beq.n	80043ac <HAL_TIMEx_PWMN_Start+0x118>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a1b      	ldr	r2, [pc, #108]	@ (80043f8 <HAL_TIMEx_PWMN_Start+0x164>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d00e      	beq.n	80043ac <HAL_TIMEx_PWMN_Start+0x118>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a1a      	ldr	r2, [pc, #104]	@ (80043fc <HAL_TIMEx_PWMN_Start+0x168>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d009      	beq.n	80043ac <HAL_TIMEx_PWMN_Start+0x118>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a18      	ldr	r2, [pc, #96]	@ (8004400 <HAL_TIMEx_PWMN_Start+0x16c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d004      	beq.n	80043ac <HAL_TIMEx_PWMN_Start+0x118>
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a17      	ldr	r2, [pc, #92]	@ (8004404 <HAL_TIMEx_PWMN_Start+0x170>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d111      	bne.n	80043d0 <HAL_TIMEx_PWMN_Start+0x13c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b06      	cmp	r3, #6
 80043bc:	d010      	beq.n	80043e0 <HAL_TIMEx_PWMN_Start+0x14c>
    {
      __HAL_TIM_ENABLE(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f042 0201 	orr.w	r2, r2, #1
 80043cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043ce:	e007      	b.n	80043e0 <HAL_TIMEx_PWMN_Start+0x14c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f042 0201 	orr.w	r2, r2, #1
 80043de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043e0:	2300      	movs	r3, #0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3710      	adds	r7, #16
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	40010000 	.word	0x40010000
 80043f0:	40000400 	.word	0x40000400
 80043f4:	40000800 	.word	0x40000800
 80043f8:	40000c00 	.word	0x40000c00
 80043fc:	40010400 	.word	0x40010400
 8004400:	40014000 	.word	0x40014000
 8004404:	40001800 	.word	0x40001800

08004408 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	2200      	movs	r2, #0
 8004418:	6839      	ldr	r1, [r7, #0]
 800441a:	4618      	mov	r0, r3
 800441c:	f000 f920 	bl	8004660 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	6a1a      	ldr	r2, [r3, #32]
 8004426:	f241 1311 	movw	r3, #4369	@ 0x1111
 800442a:	4013      	ands	r3, r2
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10f      	bne.n	8004450 <HAL_TIMEx_PWMN_Stop+0x48>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	f240 4344 	movw	r3, #1092	@ 0x444
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d107      	bne.n	8004450 <HAL_TIMEx_PWMN_Stop+0x48>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800444e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6a1a      	ldr	r2, [r3, #32]
 8004456:	f241 1311 	movw	r3, #4369	@ 0x1111
 800445a:	4013      	ands	r3, r2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10f      	bne.n	8004480 <HAL_TIMEx_PWMN_Stop+0x78>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	6a1a      	ldr	r2, [r3, #32]
 8004466:	f240 4344 	movw	r3, #1092	@ 0x444
 800446a:	4013      	ands	r3, r2
 800446c:	2b00      	cmp	r3, #0
 800446e:	d107      	bne.n	8004480 <HAL_TIMEx_PWMN_Stop+0x78>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f022 0201 	bic.w	r2, r2, #1
 800447e:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d104      	bne.n	8004490 <HAL_TIMEx_PWMN_Stop+0x88>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800448e:	e013      	b.n	80044b8 <HAL_TIMEx_PWMN_Stop+0xb0>
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b04      	cmp	r3, #4
 8004494:	d104      	bne.n	80044a0 <HAL_TIMEx_PWMN_Stop+0x98>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800449e:	e00b      	b.n	80044b8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d104      	bne.n	80044b0 <HAL_TIMEx_PWMN_Stop+0xa8>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2201      	movs	r2, #1
 80044aa:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044ae:	e003      	b.n	80044b8 <HAL_TIMEx_PWMN_Stop+0xb0>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
 80044cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d101      	bne.n	80044dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044d8:	2302      	movs	r3, #2
 80044da:	e05a      	b.n	8004592 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004502:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	4313      	orrs	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68fa      	ldr	r2, [r7, #12]
 8004514:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a21      	ldr	r2, [pc, #132]	@ (80045a0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d022      	beq.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004528:	d01d      	beq.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a1d      	ldr	r2, [pc, #116]	@ (80045a4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d018      	beq.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1b      	ldr	r2, [pc, #108]	@ (80045a8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d013      	beq.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1a      	ldr	r2, [pc, #104]	@ (80045ac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d00e      	beq.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a18      	ldr	r2, [pc, #96]	@ (80045b0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d009      	beq.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a17      	ldr	r2, [pc, #92]	@ (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d004      	beq.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a15      	ldr	r2, [pc, #84]	@ (80045b8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d10c      	bne.n	8004580 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800456c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	68ba      	ldr	r2, [r7, #8]
 8004574:	4313      	orrs	r3, r2
 8004576:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	68ba      	ldr	r2, [r7, #8]
 800457e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459c:	4770      	bx	lr
 800459e:	bf00      	nop
 80045a0:	40010000 	.word	0x40010000
 80045a4:	40000400 	.word	0x40000400
 80045a8:	40000800 	.word	0x40000800
 80045ac:	40000c00 	.word	0x40000c00
 80045b0:	40010400 	.word	0x40010400
 80045b4:	40014000 	.word	0x40014000
 80045b8:	40001800 	.word	0x40001800

080045bc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045d0:	2b01      	cmp	r3, #1
 80045d2:	d101      	bne.n	80045d8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045d4:	2302      	movs	r3, #2
 80045d6:	e03d      	b.n	8004654 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2201      	movs	r2, #1
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68db      	ldr	r3, [r3, #12]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	4313      	orrs	r3, r2
 8004608:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	4313      	orrs	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	69db      	ldr	r3, [r3, #28]
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2200      	movs	r2, #0
 800464e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3714      	adds	r7, #20
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr

08004660 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004660:	b480      	push	{r7}
 8004662:	b087      	sub	sp, #28
 8004664:	af00      	add	r7, sp, #0
 8004666:	60f8      	str	r0, [r7, #12]
 8004668:	60b9      	str	r1, [r7, #8]
 800466a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	f003 031f 	and.w	r3, r3, #31
 8004672:	2204      	movs	r2, #4
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6a1a      	ldr	r2, [r3, #32]
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	43db      	mvns	r3, r3
 8004682:	401a      	ands	r2, r3
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6a1a      	ldr	r2, [r3, #32]
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	f003 031f 	and.w	r3, r3, #31
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	fa01 f303 	lsl.w	r3, r1, r3
 8004698:	431a      	orrs	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	621a      	str	r2, [r3, #32]
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr

080046aa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80046aa:	b580      	push	{r7, lr}
 80046ac:	b082      	sub	sp, #8
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d101      	bne.n	80046bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	e03f      	b.n	800473c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d106      	bne.n	80046d6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046d0:	6878      	ldr	r0, [r7, #4]
 80046d2:	f7fd fea3 	bl	800241c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2224      	movs	r2, #36	@ 0x24
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80046ec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 fd24 	bl	800513c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	691a      	ldr	r2, [r3, #16]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004702:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	695a      	ldr	r2, [r3, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004712:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68da      	ldr	r2, [r3, #12]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004722:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2220      	movs	r2, #32
 8004736:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3708      	adds	r7, #8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004744:	b480      	push	{r7}
 8004746:	b085      	sub	sp, #20
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	4613      	mov	r3, r2
 8004750:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b20      	cmp	r3, #32
 800475c:	d130      	bne.n	80047c0 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d002      	beq.n	800476a <HAL_UART_Transmit_IT+0x26>
 8004764:	88fb      	ldrh	r3, [r7, #6]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e029      	b.n	80047c2 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <HAL_UART_Transmit_IT+0x38>
 8004778:	2302      	movs	r3, #2
 800477a:	e022      	b.n	80047c2 <HAL_UART_Transmit_IT+0x7e>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2201      	movs	r2, #1
 8004780:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    huart->pTxBuffPtr = pData;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	68ba      	ldr	r2, [r7, #8]
 8004788:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	88fa      	ldrh	r2, [r7, #6]
 800478e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	88fa      	ldrh	r2, [r7, #6]
 8004794:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2200      	movs	r2, #0
 800479a:	641a      	str	r2, [r3, #64]	@ 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	2221      	movs	r2, #33	@ 0x21
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68da      	ldr	r2, [r3, #12]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80047ba:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80047bc:	2300      	movs	r3, #0
 80047be:	e000      	b.n	80047c2 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80047c0:	2302      	movs	r3, #2
  }
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3714      	adds	r7, #20
 80047c6:	46bd      	mov	sp, r7
 80047c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047cc:	4770      	bx	lr

080047ce <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047ce:	b580      	push	{r7, lr}
 80047d0:	b084      	sub	sp, #16
 80047d2:	af00      	add	r7, sp, #0
 80047d4:	60f8      	str	r0, [r7, #12]
 80047d6:	60b9      	str	r1, [r7, #8]
 80047d8:	4613      	mov	r3, r2
 80047da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	d11d      	bne.n	8004824 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d002      	beq.n	80047f4 <HAL_UART_Receive_IT+0x26>
 80047ee:	88fb      	ldrh	r3, [r7, #6]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d101      	bne.n	80047f8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e016      	b.n	8004826 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <HAL_UART_Receive_IT+0x38>
 8004802:	2302      	movs	r3, #2
 8004804:	e00f      	b.n	8004826 <HAL_UART_Receive_IT+0x58>
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2200      	movs	r2, #0
 8004812:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004814:	88fb      	ldrh	r3, [r7, #6]
 8004816:	461a      	mov	r2, r3
 8004818:	68b9      	ldr	r1, [r7, #8]
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f000 fab6 	bl	8004d8c <UART_Start_Receive_IT>
 8004820:	4603      	mov	r3, r0
 8004822:	e000      	b.n	8004826 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004824:	2302      	movs	r3, #2
  }
}
 8004826:	4618      	mov	r0, r3
 8004828:	3710      	adds	r7, #16
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
	...

08004830 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b0ba      	sub	sp, #232	@ 0xe8
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695b      	ldr	r3, [r3, #20]
 8004852:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004856:	2300      	movs	r3, #0
 8004858:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800485c:	2300      	movs	r3, #0
 800485e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800486e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004872:	2b00      	cmp	r3, #0
 8004874:	d10f      	bne.n	8004896 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487a:	f003 0320 	and.w	r3, r3, #32
 800487e:	2b00      	cmp	r3, #0
 8004880:	d009      	beq.n	8004896 <HAL_UART_IRQHandler+0x66>
 8004882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004886:	f003 0320 	and.w	r3, r3, #32
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 fb99 	bl	8004fc6 <UART_Receive_IT>
      return;
 8004894:	e256      	b.n	8004d44 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800489a:	2b00      	cmp	r3, #0
 800489c:	f000 80de 	beq.w	8004a5c <HAL_UART_IRQHandler+0x22c>
 80048a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048a4:	f003 0301 	and.w	r3, r3, #1
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d106      	bne.n	80048ba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048b0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 80d1 	beq.w	8004a5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00b      	beq.n	80048de <HAL_UART_IRQHandler+0xae>
 80048c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d005      	beq.n	80048de <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d6:	f043 0201 	orr.w	r2, r3, #1
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048e2:	f003 0304 	and.w	r3, r3, #4
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <HAL_UART_IRQHandler+0xd2>
 80048ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fa:	f043 0202 	orr.w	r2, r3, #2
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004906:	f003 0302 	and.w	r3, r3, #2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00b      	beq.n	8004926 <HAL_UART_IRQHandler+0xf6>
 800490e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800491e:	f043 0204 	orr.w	r2, r3, #4
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800492a:	f003 0308 	and.w	r3, r3, #8
 800492e:	2b00      	cmp	r3, #0
 8004930:	d011      	beq.n	8004956 <HAL_UART_IRQHandler+0x126>
 8004932:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004936:	f003 0320 	and.w	r3, r3, #32
 800493a:	2b00      	cmp	r3, #0
 800493c:	d105      	bne.n	800494a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800493e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494e:	f043 0208 	orr.w	r2, r3, #8
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 81ed 	beq.w	8004d3a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004964:	f003 0320 	and.w	r3, r3, #32
 8004968:	2b00      	cmp	r3, #0
 800496a:	d008      	beq.n	800497e <HAL_UART_IRQHandler+0x14e>
 800496c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004970:	f003 0320 	and.w	r3, r3, #32
 8004974:	2b00      	cmp	r3, #0
 8004976:	d002      	beq.n	800497e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f000 fb24 	bl	8004fc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	695b      	ldr	r3, [r3, #20]
 8004984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004988:	2b40      	cmp	r3, #64	@ 0x40
 800498a:	bf0c      	ite	eq
 800498c:	2301      	moveq	r3, #1
 800498e:	2300      	movne	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	f003 0308 	and.w	r3, r3, #8
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d103      	bne.n	80049aa <HAL_UART_IRQHandler+0x17a>
 80049a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d04f      	beq.n	8004a4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa2c 	bl	8004e08 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	695b      	ldr	r3, [r3, #20]
 80049b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ba:	2b40      	cmp	r3, #64	@ 0x40
 80049bc:	d141      	bne.n	8004a42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3314      	adds	r3, #20
 80049c4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049cc:	e853 3f00 	ldrex	r3, [r3]
 80049d0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	3314      	adds	r3, #20
 80049e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049ea:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049ee:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049fa:	e841 2300 	strex	r3, r2, [r1]
 80049fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004a02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1d9      	bne.n	80049be <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d013      	beq.n	8004a3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a16:	4a7d      	ldr	r2, [pc, #500]	@ (8004c0c <HAL_UART_IRQHandler+0x3dc>)
 8004a18:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f7fd ff8d 	bl	800293e <HAL_DMA_Abort_IT>
 8004a24:	4603      	mov	r3, r0
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d016      	beq.n	8004a58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a2e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004a34:	4610      	mov	r0, r2
 8004a36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a38:	e00e      	b.n	8004a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f000 f990 	bl	8004d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a40:	e00a      	b.n	8004a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a42:	6878      	ldr	r0, [r7, #4]
 8004a44:	f000 f98c 	bl	8004d60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a48:	e006      	b.n	8004a58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f988 	bl	8004d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8004a56:	e170      	b.n	8004d3a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a58:	bf00      	nop
    return;
 8004a5a:	e16e      	b.n	8004d3a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	f040 814a 	bne.w	8004cfa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a6a:	f003 0310 	and.w	r3, r3, #16
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f000 8143 	beq.w	8004cfa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a78:	f003 0310 	and.w	r3, r3, #16
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 813c 	beq.w	8004cfa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a82:	2300      	movs	r3, #0
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60bb      	str	r3, [r7, #8]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	60bb      	str	r3, [r7, #8]
 8004a96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa2:	2b40      	cmp	r3, #64	@ 0x40
 8004aa4:	f040 80b4 	bne.w	8004c10 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ab4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	f000 8140 	beq.w	8004d3e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	f080 8139 	bcs.w	8004d3e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ad2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ad8:	69db      	ldr	r3, [r3, #28]
 8004ada:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ade:	f000 8088 	beq.w	8004bf2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	330c      	adds	r3, #12
 8004ae8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004afc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b00:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	330c      	adds	r3, #12
 8004b0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004b0e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b16:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004b1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b1e:	e841 2300 	strex	r3, r2, [r1]
 8004b22:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1d9      	bne.n	8004ae2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	3314      	adds	r3, #20
 8004b34:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b36:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b38:	e853 3f00 	ldrex	r3, [r3]
 8004b3c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b40:	f023 0301 	bic.w	r3, r3, #1
 8004b44:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	3314      	adds	r3, #20
 8004b4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b52:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b56:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b58:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b5e:	e841 2300 	strex	r3, r2, [r1]
 8004b62:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b64:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e1      	bne.n	8004b2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3314      	adds	r3, #20
 8004b70:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b72:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b74:	e853 3f00 	ldrex	r3, [r3]
 8004b78:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b7a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b7c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	3314      	adds	r3, #20
 8004b8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b8e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b90:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b92:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b94:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b9c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1e3      	bne.n	8004b6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2220      	movs	r2, #32
 8004ba6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2200      	movs	r2, #0
 8004bae:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	330c      	adds	r3, #12
 8004bb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004bba:	e853 3f00 	ldrex	r3, [r3]
 8004bbe:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004bc0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004bc2:	f023 0310 	bic.w	r3, r3, #16
 8004bc6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004bd4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004bd6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bda:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004be2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e3      	bne.n	8004bb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bec:	4618      	mov	r0, r3
 8004bee:	f7fd fe36 	bl	800285e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	4619      	mov	r1, r3
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f8b6 	bl	8004d74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c08:	e099      	b.n	8004d3e <HAL_UART_IRQHandler+0x50e>
 8004c0a:	bf00      	nop
 8004c0c:	08004ecf 	.word	0x08004ecf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	1ad3      	subs	r3, r2, r3
 8004c1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 808b 	beq.w	8004d42 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	f000 8086 	beq.w	8004d42 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	330c      	adds	r3, #12
 8004c3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c40:	e853 3f00 	ldrex	r3, [r3]
 8004c44:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c48:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	330c      	adds	r3, #12
 8004c56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c5a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c5c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c60:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c62:	e841 2300 	strex	r3, r2, [r1]
 8004c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1e3      	bne.n	8004c36 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	3314      	adds	r3, #20
 8004c74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c78:	e853 3f00 	ldrex	r3, [r3]
 8004c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	f023 0301 	bic.w	r3, r3, #1
 8004c84:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	3314      	adds	r3, #20
 8004c8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c92:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c94:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c96:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c9a:	e841 2300 	strex	r3, r2, [r1]
 8004c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1e3      	bne.n	8004c6e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	330c      	adds	r3, #12
 8004cba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	e853 3f00 	ldrex	r3, [r3]
 8004cc2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0310 	bic.w	r3, r3, #16
 8004cca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	330c      	adds	r3, #12
 8004cd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004cd8:	61fa      	str	r2, [r7, #28]
 8004cda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cdc:	69b9      	ldr	r1, [r7, #24]
 8004cde:	69fa      	ldr	r2, [r7, #28]
 8004ce0:	e841 2300 	strex	r3, r2, [r1]
 8004ce4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d1e3      	bne.n	8004cb4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	6878      	ldr	r0, [r7, #4]
 8004cf4:	f000 f83e 	bl	8004d74 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cf8:	e023      	b.n	8004d42 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <HAL_UART_IRQHandler+0x4ea>
 8004d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f000 f8ef 	bl	8004ef6 <UART_Transmit_IT>
    return;
 8004d18:	e014      	b.n	8004d44 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00e      	beq.n	8004d44 <HAL_UART_IRQHandler+0x514>
 8004d26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d008      	beq.n	8004d44 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f000 f92f 	bl	8004f96 <UART_EndTransmit_IT>
    return;
 8004d38:	e004      	b.n	8004d44 <HAL_UART_IRQHandler+0x514>
    return;
 8004d3a:	bf00      	nop
 8004d3c:	e002      	b.n	8004d44 <HAL_UART_IRQHandler+0x514>
      return;
 8004d3e:	bf00      	nop
 8004d40:	e000      	b.n	8004d44 <HAL_UART_IRQHandler+0x514>
      return;
 8004d42:	bf00      	nop
  }
}
 8004d44:	37e8      	adds	r7, #232	@ 0xe8
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop

08004d4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d68:	bf00      	nop
 8004d6a:	370c      	adds	r7, #12
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr

08004d74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d74:	b480      	push	{r7}
 8004d76:	b083      	sub	sp, #12
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	4613      	mov	r3, r2
 8004d98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	68ba      	ldr	r2, [r7, #8]
 8004d9e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	88fa      	ldrh	r2, [r7, #6]
 8004da4:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	88fa      	ldrh	r2, [r7, #6]
 8004daa:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2222      	movs	r2, #34	@ 0x22
 8004db6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d007      	beq.n	8004dda <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	68da      	ldr	r2, [r3, #12]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dd8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	695a      	ldr	r2, [r3, #20]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f042 0201 	orr.w	r2, r2, #1
 8004de8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68da      	ldr	r2, [r3, #12]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f042 0220 	orr.w	r2, r2, #32
 8004df8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004dfa:	2300      	movs	r3, #0
}
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	3714      	adds	r7, #20
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b095      	sub	sp, #84	@ 0x54
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	330c      	adds	r3, #12
 8004e16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	330c      	adds	r3, #12
 8004e2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e30:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e38:	e841 2300 	strex	r3, r2, [r1]
 8004e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d1e5      	bne.n	8004e10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3314      	adds	r3, #20
 8004e4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4c:	6a3b      	ldr	r3, [r7, #32]
 8004e4e:	e853 3f00 	ldrex	r3, [r3]
 8004e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	f023 0301 	bic.w	r3, r3, #1
 8004e5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	3314      	adds	r3, #20
 8004e62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004e64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004e6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e6c:	e841 2300 	strex	r3, r2, [r1]
 8004e70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d1e5      	bne.n	8004e44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d119      	bne.n	8004eb4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	330c      	adds	r3, #12
 8004e86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	e853 3f00 	ldrex	r3, [r3]
 8004e8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	f023 0310 	bic.w	r3, r3, #16
 8004e96:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	330c      	adds	r3, #12
 8004e9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ea0:	61ba      	str	r2, [r7, #24]
 8004ea2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ea4:	6979      	ldr	r1, [r7, #20]
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	e841 2300 	strex	r3, r2, [r1]
 8004eac:	613b      	str	r3, [r7, #16]
   return(result);
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1e5      	bne.n	8004e80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2220      	movs	r2, #32
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ec2:	bf00      	nop
 8004ec4:	3754      	adds	r7, #84	@ 0x54
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b084      	sub	sp, #16
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ee8:	68f8      	ldr	r0, [r7, #12]
 8004eea:	f7ff ff39 	bl	8004d60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}

08004ef6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b085      	sub	sp, #20
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b21      	cmp	r3, #33	@ 0x21
 8004f08:	d13e      	bne.n	8004f88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f12:	d114      	bne.n	8004f3e <UART_Transmit_IT+0x48>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	691b      	ldr	r3, [r3, #16]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d110      	bne.n	8004f3e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
 8004f20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	881b      	ldrh	r3, [r3, #0]
 8004f26:	461a      	mov	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	1c9a      	adds	r2, r3, #2
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	621a      	str	r2, [r3, #32]
 8004f3c:	e008      	b.n	8004f50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6a1b      	ldr	r3, [r3, #32]
 8004f42:	1c59      	adds	r1, r3, #1
 8004f44:	687a      	ldr	r2, [r7, #4]
 8004f46:	6211      	str	r1, [r2, #32]
 8004f48:	781a      	ldrb	r2, [r3, #0]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f54:	b29b      	uxth	r3, r3
 8004f56:	3b01      	subs	r3, #1
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	687a      	ldr	r2, [r7, #4]
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d10f      	bne.n	8004f84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	68da      	ldr	r2, [r3, #12]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	68da      	ldr	r2, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004f82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f84:	2300      	movs	r3, #0
 8004f86:	e000      	b.n	8004f8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f88:	2302      	movs	r3, #2
  }
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr

08004f96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f96:	b580      	push	{r7, lr}
 8004f98:	b082      	sub	sp, #8
 8004f9a:	af00      	add	r7, sp, #0
 8004f9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	68da      	ldr	r2, [r3, #12]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004fac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f7ff fec8 	bl	8004d4c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fbc:	2300      	movs	r3, #0
}
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	3708      	adds	r7, #8
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	bd80      	pop	{r7, pc}

08004fc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fc6:	b580      	push	{r7, lr}
 8004fc8:	b08c      	sub	sp, #48	@ 0x30
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004fd4:	b2db      	uxtb	r3, r3
 8004fd6:	2b22      	cmp	r3, #34	@ 0x22
 8004fd8:	f040 80ab 	bne.w	8005132 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004fe4:	d117      	bne.n	8005016 <UART_Receive_IT+0x50>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d113      	bne.n	8005016 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	b29b      	uxth	r3, r3
 8005000:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005004:	b29a      	uxth	r2, r3
 8005006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005008:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500e:	1c9a      	adds	r2, r3, #2
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	629a      	str	r2, [r3, #40]	@ 0x28
 8005014:	e026      	b.n	8005064 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800501a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800501c:	2300      	movs	r3, #0
 800501e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005028:	d007      	beq.n	800503a <UART_Receive_IT+0x74>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	689b      	ldr	r3, [r3, #8]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10a      	bne.n	8005048 <UART_Receive_IT+0x82>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d106      	bne.n	8005048 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	b2da      	uxtb	r2, r3
 8005042:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005044:	701a      	strb	r2, [r3, #0]
 8005046:	e008      	b.n	800505a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	b2db      	uxtb	r3, r3
 8005050:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005054:	b2da      	uxtb	r2, r3
 8005056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005058:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800505e:	1c5a      	adds	r2, r3, #1
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005068:	b29b      	uxth	r3, r3
 800506a:	3b01      	subs	r3, #1
 800506c:	b29b      	uxth	r3, r3
 800506e:	687a      	ldr	r2, [r7, #4]
 8005070:	4619      	mov	r1, r3
 8005072:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005074:	2b00      	cmp	r3, #0
 8005076:	d15a      	bne.n	800512e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f022 0220 	bic.w	r2, r2, #32
 8005086:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	68da      	ldr	r2, [r3, #12]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005096:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695a      	ldr	r2, [r3, #20]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0201 	bic.w	r2, r2, #1
 80050a6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2220      	movs	r2, #32
 80050ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	d135      	bne.n	8005124 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	330c      	adds	r3, #12
 80050c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	e853 3f00 	ldrex	r3, [r3]
 80050cc:	613b      	str	r3, [r7, #16]
   return(result);
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	f023 0310 	bic.w	r3, r3, #16
 80050d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	330c      	adds	r3, #12
 80050dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050de:	623a      	str	r2, [r7, #32]
 80050e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e2:	69f9      	ldr	r1, [r7, #28]
 80050e4:	6a3a      	ldr	r2, [r7, #32]
 80050e6:	e841 2300 	strex	r3, r2, [r1]
 80050ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80050ec:	69bb      	ldr	r3, [r7, #24]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1e5      	bne.n	80050be <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0310 	and.w	r3, r3, #16
 80050fc:	2b10      	cmp	r3, #16
 80050fe:	d10a      	bne.n	8005116 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005100:	2300      	movs	r3, #0
 8005102:	60fb      	str	r3, [r7, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	60fb      	str	r3, [r7, #12]
 8005114:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800511a:	4619      	mov	r1, r3
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f7ff fe29 	bl	8004d74 <HAL_UARTEx_RxEventCallback>
 8005122:	e002      	b.n	800512a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7fc fe05 	bl	8001d34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800512a:	2300      	movs	r3, #0
 800512c:	e002      	b.n	8005134 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	e000      	b.n	8005134 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005132:	2302      	movs	r3, #2
  }
}
 8005134:	4618      	mov	r0, r3
 8005136:	3730      	adds	r7, #48	@ 0x30
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}

0800513c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800513c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005140:	b0c0      	sub	sp, #256	@ 0x100
 8005142:	af00      	add	r7, sp, #0
 8005144:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	691b      	ldr	r3, [r3, #16]
 8005150:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005158:	68d9      	ldr	r1, [r3, #12]
 800515a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515e:	681a      	ldr	r2, [r3, #0]
 8005160:	ea40 0301 	orr.w	r3, r0, r1
 8005164:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005166:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800516a:	689a      	ldr	r2, [r3, #8]
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	431a      	orrs	r2, r3
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	431a      	orrs	r2, r3
 800517c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005180:	69db      	ldr	r3, [r3, #28]
 8005182:	4313      	orrs	r3, r2
 8005184:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005194:	f021 010c 	bic.w	r1, r1, #12
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051a2:	430b      	orrs	r3, r1
 80051a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	695b      	ldr	r3, [r3, #20]
 80051ae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b6:	6999      	ldr	r1, [r3, #24]
 80051b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	ea40 0301 	orr.w	r3, r0, r1
 80051c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	4b8f      	ldr	r3, [pc, #572]	@ (8005408 <UART_SetConfig+0x2cc>)
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d005      	beq.n	80051dc <UART_SetConfig+0xa0>
 80051d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	4b8d      	ldr	r3, [pc, #564]	@ (800540c <UART_SetConfig+0x2d0>)
 80051d8:	429a      	cmp	r2, r3
 80051da:	d104      	bne.n	80051e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051dc:	f7fe f9cc 	bl	8003578 <HAL_RCC_GetPCLK2Freq>
 80051e0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80051e4:	e003      	b.n	80051ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051e6:	f7fe f9b3 	bl	8003550 <HAL_RCC_GetPCLK1Freq>
 80051ea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051f8:	f040 810c 	bne.w	8005414 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005200:	2200      	movs	r2, #0
 8005202:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005206:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800520a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800520e:	4622      	mov	r2, r4
 8005210:	462b      	mov	r3, r5
 8005212:	1891      	adds	r1, r2, r2
 8005214:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005216:	415b      	adcs	r3, r3
 8005218:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800521a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800521e:	4621      	mov	r1, r4
 8005220:	eb12 0801 	adds.w	r8, r2, r1
 8005224:	4629      	mov	r1, r5
 8005226:	eb43 0901 	adc.w	r9, r3, r1
 800522a:	f04f 0200 	mov.w	r2, #0
 800522e:	f04f 0300 	mov.w	r3, #0
 8005232:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005236:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800523a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800523e:	4690      	mov	r8, r2
 8005240:	4699      	mov	r9, r3
 8005242:	4623      	mov	r3, r4
 8005244:	eb18 0303 	adds.w	r3, r8, r3
 8005248:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800524c:	462b      	mov	r3, r5
 800524e:	eb49 0303 	adc.w	r3, r9, r3
 8005252:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005262:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005266:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800526a:	460b      	mov	r3, r1
 800526c:	18db      	adds	r3, r3, r3
 800526e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005270:	4613      	mov	r3, r2
 8005272:	eb42 0303 	adc.w	r3, r2, r3
 8005276:	657b      	str	r3, [r7, #84]	@ 0x54
 8005278:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800527c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005280:	f7fb fb90 	bl	80009a4 <__aeabi_uldivmod>
 8005284:	4602      	mov	r2, r0
 8005286:	460b      	mov	r3, r1
 8005288:	4b61      	ldr	r3, [pc, #388]	@ (8005410 <UART_SetConfig+0x2d4>)
 800528a:	fba3 2302 	umull	r2, r3, r3, r2
 800528e:	095b      	lsrs	r3, r3, #5
 8005290:	011c      	lsls	r4, r3, #4
 8005292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005296:	2200      	movs	r2, #0
 8005298:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800529c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80052a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80052a4:	4642      	mov	r2, r8
 80052a6:	464b      	mov	r3, r9
 80052a8:	1891      	adds	r1, r2, r2
 80052aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80052ac:	415b      	adcs	r3, r3
 80052ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052b4:	4641      	mov	r1, r8
 80052b6:	eb12 0a01 	adds.w	sl, r2, r1
 80052ba:	4649      	mov	r1, r9
 80052bc:	eb43 0b01 	adc.w	fp, r3, r1
 80052c0:	f04f 0200 	mov.w	r2, #0
 80052c4:	f04f 0300 	mov.w	r3, #0
 80052c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052d4:	4692      	mov	sl, r2
 80052d6:	469b      	mov	fp, r3
 80052d8:	4643      	mov	r3, r8
 80052da:	eb1a 0303 	adds.w	r3, sl, r3
 80052de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052e2:	464b      	mov	r3, r9
 80052e4:	eb4b 0303 	adc.w	r3, fp, r3
 80052e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80052fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005300:	460b      	mov	r3, r1
 8005302:	18db      	adds	r3, r3, r3
 8005304:	643b      	str	r3, [r7, #64]	@ 0x40
 8005306:	4613      	mov	r3, r2
 8005308:	eb42 0303 	adc.w	r3, r2, r3
 800530c:	647b      	str	r3, [r7, #68]	@ 0x44
 800530e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005312:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005316:	f7fb fb45 	bl	80009a4 <__aeabi_uldivmod>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4611      	mov	r1, r2
 8005320:	4b3b      	ldr	r3, [pc, #236]	@ (8005410 <UART_SetConfig+0x2d4>)
 8005322:	fba3 2301 	umull	r2, r3, r3, r1
 8005326:	095b      	lsrs	r3, r3, #5
 8005328:	2264      	movs	r2, #100	@ 0x64
 800532a:	fb02 f303 	mul.w	r3, r2, r3
 800532e:	1acb      	subs	r3, r1, r3
 8005330:	00db      	lsls	r3, r3, #3
 8005332:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005336:	4b36      	ldr	r3, [pc, #216]	@ (8005410 <UART_SetConfig+0x2d4>)
 8005338:	fba3 2302 	umull	r2, r3, r3, r2
 800533c:	095b      	lsrs	r3, r3, #5
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005344:	441c      	add	r4, r3
 8005346:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800534a:	2200      	movs	r2, #0
 800534c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005350:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005354:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005358:	4642      	mov	r2, r8
 800535a:	464b      	mov	r3, r9
 800535c:	1891      	adds	r1, r2, r2
 800535e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005360:	415b      	adcs	r3, r3
 8005362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005364:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005368:	4641      	mov	r1, r8
 800536a:	1851      	adds	r1, r2, r1
 800536c:	6339      	str	r1, [r7, #48]	@ 0x30
 800536e:	4649      	mov	r1, r9
 8005370:	414b      	adcs	r3, r1
 8005372:	637b      	str	r3, [r7, #52]	@ 0x34
 8005374:	f04f 0200 	mov.w	r2, #0
 8005378:	f04f 0300 	mov.w	r3, #0
 800537c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005380:	4659      	mov	r1, fp
 8005382:	00cb      	lsls	r3, r1, #3
 8005384:	4651      	mov	r1, sl
 8005386:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800538a:	4651      	mov	r1, sl
 800538c:	00ca      	lsls	r2, r1, #3
 800538e:	4610      	mov	r0, r2
 8005390:	4619      	mov	r1, r3
 8005392:	4603      	mov	r3, r0
 8005394:	4642      	mov	r2, r8
 8005396:	189b      	adds	r3, r3, r2
 8005398:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800539c:	464b      	mov	r3, r9
 800539e:	460a      	mov	r2, r1
 80053a0:	eb42 0303 	adc.w	r3, r2, r3
 80053a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80053a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053bc:	460b      	mov	r3, r1
 80053be:	18db      	adds	r3, r3, r3
 80053c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053c2:	4613      	mov	r3, r2
 80053c4:	eb42 0303 	adc.w	r3, r2, r3
 80053c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80053d2:	f7fb fae7 	bl	80009a4 <__aeabi_uldivmod>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	4b0d      	ldr	r3, [pc, #52]	@ (8005410 <UART_SetConfig+0x2d4>)
 80053dc:	fba3 1302 	umull	r1, r3, r3, r2
 80053e0:	095b      	lsrs	r3, r3, #5
 80053e2:	2164      	movs	r1, #100	@ 0x64
 80053e4:	fb01 f303 	mul.w	r3, r1, r3
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	00db      	lsls	r3, r3, #3
 80053ec:	3332      	adds	r3, #50	@ 0x32
 80053ee:	4a08      	ldr	r2, [pc, #32]	@ (8005410 <UART_SetConfig+0x2d4>)
 80053f0:	fba2 2303 	umull	r2, r3, r2, r3
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	f003 0207 	and.w	r2, r3, #7
 80053fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4422      	add	r2, r4
 8005402:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005404:	e106      	b.n	8005614 <UART_SetConfig+0x4d8>
 8005406:	bf00      	nop
 8005408:	40011000 	.word	0x40011000
 800540c:	40011400 	.word	0x40011400
 8005410:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005414:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005418:	2200      	movs	r2, #0
 800541a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800541e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005422:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005426:	4642      	mov	r2, r8
 8005428:	464b      	mov	r3, r9
 800542a:	1891      	adds	r1, r2, r2
 800542c:	6239      	str	r1, [r7, #32]
 800542e:	415b      	adcs	r3, r3
 8005430:	627b      	str	r3, [r7, #36]	@ 0x24
 8005432:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005436:	4641      	mov	r1, r8
 8005438:	1854      	adds	r4, r2, r1
 800543a:	4649      	mov	r1, r9
 800543c:	eb43 0501 	adc.w	r5, r3, r1
 8005440:	f04f 0200 	mov.w	r2, #0
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	00eb      	lsls	r3, r5, #3
 800544a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800544e:	00e2      	lsls	r2, r4, #3
 8005450:	4614      	mov	r4, r2
 8005452:	461d      	mov	r5, r3
 8005454:	4643      	mov	r3, r8
 8005456:	18e3      	adds	r3, r4, r3
 8005458:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800545c:	464b      	mov	r3, r9
 800545e:	eb45 0303 	adc.w	r3, r5, r3
 8005462:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005472:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005476:	f04f 0200 	mov.w	r2, #0
 800547a:	f04f 0300 	mov.w	r3, #0
 800547e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005482:	4629      	mov	r1, r5
 8005484:	008b      	lsls	r3, r1, #2
 8005486:	4621      	mov	r1, r4
 8005488:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800548c:	4621      	mov	r1, r4
 800548e:	008a      	lsls	r2, r1, #2
 8005490:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005494:	f7fb fa86 	bl	80009a4 <__aeabi_uldivmod>
 8005498:	4602      	mov	r2, r0
 800549a:	460b      	mov	r3, r1
 800549c:	4b60      	ldr	r3, [pc, #384]	@ (8005620 <UART_SetConfig+0x4e4>)
 800549e:	fba3 2302 	umull	r2, r3, r3, r2
 80054a2:	095b      	lsrs	r3, r3, #5
 80054a4:	011c      	lsls	r4, r3, #4
 80054a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054aa:	2200      	movs	r2, #0
 80054ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054b8:	4642      	mov	r2, r8
 80054ba:	464b      	mov	r3, r9
 80054bc:	1891      	adds	r1, r2, r2
 80054be:	61b9      	str	r1, [r7, #24]
 80054c0:	415b      	adcs	r3, r3
 80054c2:	61fb      	str	r3, [r7, #28]
 80054c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054c8:	4641      	mov	r1, r8
 80054ca:	1851      	adds	r1, r2, r1
 80054cc:	6139      	str	r1, [r7, #16]
 80054ce:	4649      	mov	r1, r9
 80054d0:	414b      	adcs	r3, r1
 80054d2:	617b      	str	r3, [r7, #20]
 80054d4:	f04f 0200 	mov.w	r2, #0
 80054d8:	f04f 0300 	mov.w	r3, #0
 80054dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054e0:	4659      	mov	r1, fp
 80054e2:	00cb      	lsls	r3, r1, #3
 80054e4:	4651      	mov	r1, sl
 80054e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054ea:	4651      	mov	r1, sl
 80054ec:	00ca      	lsls	r2, r1, #3
 80054ee:	4610      	mov	r0, r2
 80054f0:	4619      	mov	r1, r3
 80054f2:	4603      	mov	r3, r0
 80054f4:	4642      	mov	r2, r8
 80054f6:	189b      	adds	r3, r3, r2
 80054f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054fc:	464b      	mov	r3, r9
 80054fe:	460a      	mov	r2, r1
 8005500:	eb42 0303 	adc.w	r3, r2, r3
 8005504:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005512:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005514:	f04f 0200 	mov.w	r2, #0
 8005518:	f04f 0300 	mov.w	r3, #0
 800551c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005520:	4649      	mov	r1, r9
 8005522:	008b      	lsls	r3, r1, #2
 8005524:	4641      	mov	r1, r8
 8005526:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800552a:	4641      	mov	r1, r8
 800552c:	008a      	lsls	r2, r1, #2
 800552e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005532:	f7fb fa37 	bl	80009a4 <__aeabi_uldivmod>
 8005536:	4602      	mov	r2, r0
 8005538:	460b      	mov	r3, r1
 800553a:	4611      	mov	r1, r2
 800553c:	4b38      	ldr	r3, [pc, #224]	@ (8005620 <UART_SetConfig+0x4e4>)
 800553e:	fba3 2301 	umull	r2, r3, r3, r1
 8005542:	095b      	lsrs	r3, r3, #5
 8005544:	2264      	movs	r2, #100	@ 0x64
 8005546:	fb02 f303 	mul.w	r3, r2, r3
 800554a:	1acb      	subs	r3, r1, r3
 800554c:	011b      	lsls	r3, r3, #4
 800554e:	3332      	adds	r3, #50	@ 0x32
 8005550:	4a33      	ldr	r2, [pc, #204]	@ (8005620 <UART_SetConfig+0x4e4>)
 8005552:	fba2 2303 	umull	r2, r3, r2, r3
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800555c:	441c      	add	r4, r3
 800555e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005562:	2200      	movs	r2, #0
 8005564:	673b      	str	r3, [r7, #112]	@ 0x70
 8005566:	677a      	str	r2, [r7, #116]	@ 0x74
 8005568:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800556c:	4642      	mov	r2, r8
 800556e:	464b      	mov	r3, r9
 8005570:	1891      	adds	r1, r2, r2
 8005572:	60b9      	str	r1, [r7, #8]
 8005574:	415b      	adcs	r3, r3
 8005576:	60fb      	str	r3, [r7, #12]
 8005578:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800557c:	4641      	mov	r1, r8
 800557e:	1851      	adds	r1, r2, r1
 8005580:	6039      	str	r1, [r7, #0]
 8005582:	4649      	mov	r1, r9
 8005584:	414b      	adcs	r3, r1
 8005586:	607b      	str	r3, [r7, #4]
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005594:	4659      	mov	r1, fp
 8005596:	00cb      	lsls	r3, r1, #3
 8005598:	4651      	mov	r1, sl
 800559a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800559e:	4651      	mov	r1, sl
 80055a0:	00ca      	lsls	r2, r1, #3
 80055a2:	4610      	mov	r0, r2
 80055a4:	4619      	mov	r1, r3
 80055a6:	4603      	mov	r3, r0
 80055a8:	4642      	mov	r2, r8
 80055aa:	189b      	adds	r3, r3, r2
 80055ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80055ae:	464b      	mov	r3, r9
 80055b0:	460a      	mov	r2, r1
 80055b2:	eb42 0303 	adc.w	r3, r2, r3
 80055b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80055c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80055c4:	f04f 0200 	mov.w	r2, #0
 80055c8:	f04f 0300 	mov.w	r3, #0
 80055cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80055d0:	4649      	mov	r1, r9
 80055d2:	008b      	lsls	r3, r1, #2
 80055d4:	4641      	mov	r1, r8
 80055d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055da:	4641      	mov	r1, r8
 80055dc:	008a      	lsls	r2, r1, #2
 80055de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80055e2:	f7fb f9df 	bl	80009a4 <__aeabi_uldivmod>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005620 <UART_SetConfig+0x4e4>)
 80055ec:	fba3 1302 	umull	r1, r3, r3, r2
 80055f0:	095b      	lsrs	r3, r3, #5
 80055f2:	2164      	movs	r1, #100	@ 0x64
 80055f4:	fb01 f303 	mul.w	r3, r1, r3
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	011b      	lsls	r3, r3, #4
 80055fc:	3332      	adds	r3, #50	@ 0x32
 80055fe:	4a08      	ldr	r2, [pc, #32]	@ (8005620 <UART_SetConfig+0x4e4>)
 8005600:	fba2 2303 	umull	r2, r3, r2, r3
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	f003 020f 	and.w	r2, r3, #15
 800560a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4422      	add	r2, r4
 8005612:	609a      	str	r2, [r3, #8]
}
 8005614:	bf00      	nop
 8005616:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800561a:	46bd      	mov	sp, r7
 800561c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005620:	51eb851f 	.word	0x51eb851f

08005624 <memset>:
 8005624:	4402      	add	r2, r0
 8005626:	4603      	mov	r3, r0
 8005628:	4293      	cmp	r3, r2
 800562a:	d100      	bne.n	800562e <memset+0xa>
 800562c:	4770      	bx	lr
 800562e:	f803 1b01 	strb.w	r1, [r3], #1
 8005632:	e7f9      	b.n	8005628 <memset+0x4>

08005634 <__libc_init_array>:
 8005634:	b570      	push	{r4, r5, r6, lr}
 8005636:	4d0d      	ldr	r5, [pc, #52]	@ (800566c <__libc_init_array+0x38>)
 8005638:	4c0d      	ldr	r4, [pc, #52]	@ (8005670 <__libc_init_array+0x3c>)
 800563a:	1b64      	subs	r4, r4, r5
 800563c:	10a4      	asrs	r4, r4, #2
 800563e:	2600      	movs	r6, #0
 8005640:	42a6      	cmp	r6, r4
 8005642:	d109      	bne.n	8005658 <__libc_init_array+0x24>
 8005644:	4d0b      	ldr	r5, [pc, #44]	@ (8005674 <__libc_init_array+0x40>)
 8005646:	4c0c      	ldr	r4, [pc, #48]	@ (8005678 <__libc_init_array+0x44>)
 8005648:	f000 f818 	bl	800567c <_init>
 800564c:	1b64      	subs	r4, r4, r5
 800564e:	10a4      	asrs	r4, r4, #2
 8005650:	2600      	movs	r6, #0
 8005652:	42a6      	cmp	r6, r4
 8005654:	d105      	bne.n	8005662 <__libc_init_array+0x2e>
 8005656:	bd70      	pop	{r4, r5, r6, pc}
 8005658:	f855 3b04 	ldr.w	r3, [r5], #4
 800565c:	4798      	blx	r3
 800565e:	3601      	adds	r6, #1
 8005660:	e7ee      	b.n	8005640 <__libc_init_array+0xc>
 8005662:	f855 3b04 	ldr.w	r3, [r5], #4
 8005666:	4798      	blx	r3
 8005668:	3601      	adds	r6, #1
 800566a:	e7f2      	b.n	8005652 <__libc_init_array+0x1e>
 800566c:	080056c8 	.word	0x080056c8
 8005670:	080056c8 	.word	0x080056c8
 8005674:	080056c8 	.word	0x080056c8
 8005678:	080056cc 	.word	0x080056cc

0800567c <_init>:
 800567c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800567e:	bf00      	nop
 8005680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005682:	bc08      	pop	{r3}
 8005684:	469e      	mov	lr, r3
 8005686:	4770      	bx	lr

08005688 <_fini>:
 8005688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800568a:	bf00      	nop
 800568c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800568e:	bc08      	pop	{r3}
 8005690:	469e      	mov	lr, r3
 8005692:	4770      	bx	lr
